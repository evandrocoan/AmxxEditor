#! /usr/bin/env python
# -*- coding: utf-8 -*-

####################### Licensing #######################################################
#
#   Copyright 2018 @ Evandro Coan
#   Project Unit Tests
#
#  Redistributions of source code must retain the above
#  copyright notice, this list of conditions and the
#  following disclaimer.
#
#  Redistributions in binary form must reproduce the above
#  copyright notice, this list of conditions and the following
#  disclaimer in the documentation and/or other materials
#  provided with the distribution.
#
#  Neither the name Evandro Coan nor the names of any
#  contributors may be used to endorse or promote products
#  derived from this software without specific prior written
#  permission.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 3 of the License, or ( at
#  your option ) any later version.
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#########################################################################################
#


import os

import unittest
import sublime_plugin

from AmxxEditor.AmxxEditor import PawnParse
from AmxxEditor.AmxxEditor import Node
from AmxxEditor.AmxxEditor import _on_settings_modified

# Import and reload the debugger
sublime_plugin.reload_plugin( "AmxxEditor.AmxxEditor" )
_on_settings_modified()

from debug_tools.utilities import get_relative_path
from debug_tools import getLogger
log = getLogger( __name__.split('.')[-1], 127 )


class MainUnitTests(unittest.TestCase):
    """
        How to assert output with nosetest/unittest in python?
        https://stackoverflow.com/questions/4219717/how-to-assert-output-with-nosetest-unittest-in-python
    """

    def setUp(self):
        self.maxDiff = None

    def tearDown(self):
        pass

    def test_galileo_doc_strings(self):
        file_name = get_relative_path( 'galileo.sma', __file__ )
        # log( 1, "file_name: %s", file_name )

        node = Node(file_name)
        pawnParse = PawnParse()

        with open( node.file_name ) as file:
            pawnParse.start(file, node)

        func_list = dict((func, item) for func, item in node.funcs_list)
        doc_list = dict((func, item.doc_comment) for func, item in node.doct.items())

        # print(doc_list)
        # print(func_list)

        self.assertEqual(
            {'SOUND_COUNTDOWN': '', 'clientDisconnected': '\nI do not know whether client_disconnected(1) will present the same problem as CLIENT_AUTHORIZED_MACRO(1)\nmacro just above fixes, so I put it on a stock just for precaution.', 'MAX_BIG_BOSS_STRING': '', 'debugRtvVote': '', 'chooseRandomVotingWinner': '', 'announceThePendingVoteTime': '', 'setTestFailure': "\nInforms the Test System that the test failed and why. This is to be used directly instead of\nSET_TEST_FAILURE(1) when 2 consecutive tests use different `test_id`'s.\n\n@param test_id the test_id at the Test System\n@param isFailure a boolean value setting whether the failure status is true.\n@param failure_reason the reason why the test failed", 'flushVoteBlockedMaps': '\nPrint the current blocked maps buffer, if there are any maps on it.\n\n@param blockedMapsBuffer the formatted maps list to be printed.', 'GET_MAP_INFO': '\nRetrieves a map name from a Dynamic Array of maps.\n\n@param mapArray a Dynamic Array of maps\n@param mapIndex an valid index on the `mapArray` parameter\n@param mapName a string to store the map name', 'HELPER_MAP_FILE_LIST_LOAD': '\nWrapper to avoid passing a low used default parameter on the start of the function call.', 'TRY_TO_APPLY': '\nGeneral handler to assist object property applying and keep the code clear. This only need\nto be used with destructorscleaners which does not support uninitialized handlers, requiring\nan if pre-checking.\n\n@param objectHandler the object handler to be called.\n@param objectIndentifation the object identification number to be destroyed.', 'doTheActualMapExtension': '', 'loadMapsFolderDirectoryArray': '', 'normalTestsToExecute': '\nContains all imediates unit tests to execute.', 'nomination_menuHook': '\nUsed to allow the menu nomination_menu(1) to have parameters within a default value.\nIt is because public functions are not allow to have a default value and we need this function\nbe public to allow it to be called from a set_task().', 'vote_handleDisplay': '', 'vote_handleChoice': '', 'start_voting_by_maxrounds': '', 'test_registerSeriesNaming': '\nRegister a test series naming, used to easily allow to distinguish between tests names.\nExample, this:\n1. test_loadVoteChoices.aa_case1\n2. test_loadVoteChoices.aa_case2\n3. test_loadVoteChoices.bb.bb_case1\n4. test_loadVoteChoices.bb.bb_case2\n\nInstead of this:\n1. test_loadVoteChoices.a_case1\n2. test_loadVoteChoices.a_case2\n3. test_loadVoteChoices.b_case1\n4. test_loadVoteChoices.b_case2\n\n@param seriesName the current test name.\n@param newSeries a char as the new test series start. The default is to use the last serie.', 'sayNextMap': '', 'test_configureTheNextMap_loadi': '', 'sayFFStatus': '', 'IS_MAP_MAPCHANGE_FREEZE_PLAYERS': '', 'LAST_ROUND_HUD_SHOW_INTERVAL': '\nUsed on the count `++g_showLastRoundHudCounter % LAST_ROUND_HUD_SHOW_INTERVAL > 6`, called each second.', 'test_configureTheNextMap_loadg': '\nTest the cvar `gal_srv_move_cursor` set as 14.\n\nWhen the option `IS_TO_LOAD_EXPLICIT_MAP_SERIES` is set, the moveTheCursorToTheLastMap cannot\nmove the cursor until the series end, if there are valid maps but the series does not started\nat 0 or 1.', 'test_configureTheNextMap_loadf': '\nTest the cvar `gal_srv_move_cursor` set as 10, using an alternating series test from the above.', 'showRemainingTimeUntilVoting': '', 'RTV_CMD_SHORTHAND': '', 'END_OF_MAP_VOTE_ANNOUNCE1': '', 'END_OF_MAP_VOTE_ANNOUNCE2': '', 'IS_FORCED_VOTE': '', 'plugin_cfg': '\nCalled when all plugins went through plugin_init(). When this forward is called, most plugins\nshould have registered their cvars and commands already.', 'loadMapsFolderDirectory': '', 'vote_rock': '', 'PERIODIC_CHECKING_INTERVAL': "\nThe periodic task created on 'configureServerStart(1)' use this intervals in seconds to\nstart checking for an end map voting start. Defines the interval where the periodic tasks\nas map_manageEnd(0) and vote_manageEnd(0) will be checked.", 'displayVoteMapMenu': '\nThis is the main menu `say galmenu` builder.', 'loadTheDefaultVotingChoices': '', 'DEBUG_LEVEL_DISABLE_TEST_LOGS': '', 'ARE_WE_RUNNING_UNIT_TESTS': '\nSome times we need to run a different code when performing Unit Tests as unnecessary delays.', 'test_isMapExtensionAvowed_case2': "\nTests if the cvar 'amx_extendmap_max' functionality is working properly for a failure case.", 'IS_TO_ALLOW_A_CRASH_SEARCH': '\nReturn whether is to allow a crash search on this server start or not.\n\n@return true when the crash map search is enabledallowed, false otherwise', 'display_vote_menu': '', 'IS_TO_ADD_VOTE_MENU_UNDO_BUTTON': '\nDetermines whether undo vote button should be added to the voting menu footer.\n\n@return true when the undo button must be added, false otherwise', 'printRunOffMaps': '', 'DELAY_TO_WAIT_THE_SERVER_CVARS_TO_BE_LOADED': '', 'test_nominateAndUnnominate_load': '\nThis case happens when the map was previously nominated and cancelled by someone else\nand then nominated again by the same person or someone else.\n\nAlso test whether the unnominatedDisconnectedPlayer(1) forward is cleaning the players\nnominations correctly.', 'VOTE_MININUM_PLAYERS_REQUIRED': '', 'REMOVE_CODE_COLOR_TAGS': "\nRemove the colored strings codes '^4 for green', '^1 for yellow', '^3 for team' and\n'^2 for unknown'.\n\n@param string[] a string pointer to be formatted.", 'MAX_OPTIONS_IN_VOTE': '', 'SOUND_MAPCHANGE': '', 'IS_MAP_VALID': '', 'SET_TEST_FAILURE': '\nCall the internal function to perform its task and stop the current test execution to avoid\ndouble failure at the test control system. This is to be used instead of setTestFailure(1)\nwhen 2 consecutive tests use the same `test_id`.\n\n@see also the stock setTestFailure(3)', 'test_negativeRTVValues': '\nCreate one case test for the RTV feature based on its parameters passed by the\ntest_negativeRTVValues_load(0) loader function.', 'PRINT_COLORED_MESSAGE': '\nPrint to the users chat, a colored chat message.\n\n@param player_id a player id from 1 to MAX_PLAYERS\n@param message a colored formatted string message. At the AMXX 182 it must start within\none color code as found on REMOVE_CODE_COLOR_TAGS(1) above macro. Example:\n"^1Hi! I am a ^3 colored message".', 'SERVER_START_MAPVOTE': '', 'cmd_HL1_votemap': '\nThe default engine console `votemap command` customization.', 'SECONDS_BY_ROUND_AVERAGE': '', 'IS_WHITELIST_BLOCKING': '\nUsed to determine whether a map is blocked by the Whitelist feature.\n\n@param isWhitelistEnabled whether or not is to allow the Whitelist blockage\n@param mapNameToCheck the map name to be verified if the map list checking is enabled\n@return true when the `mapNameToCheck` is blocked by the Whitelist feature, false otherwise', 'FAKE_PLAYERS_NUMBER_FOR_DEBUGGING': "\nHow much players use when the debugging level 'DEBUG_LEVEL_FAKE_VOTES' is enabled.", 'START_VOTING_BY_MIDDLE_ROUND_DELAY': '\nStart a map voting delayed after the mp_maxrounds or mp_winlimit minimum to be reached.', 'SHOW_STATUS_NEVER': '', 'loadMapFiles': '\nTo start loading the files.', 'restartEmptyCycle': '', 'register_vote': "\nRegister the player's choice giving extra weight to admin votes.", 'handleDisplayVoteMap': '\nThis is the `say galmenu` main menu handler.\n\nThis menu handler uses the convert_numeric_base(3) instead of menu_item_getinfo() to allow easy\nconversion to the olde menu style, and also because it is working fine as it is.', 'round_end_event': '', 'finalizeVoting': '\nRestore global variables to is default state. This is to be ready for a new voting.', 'MAX_SERVER_RESTART_ACCEPTABLE': '\nDefine how many times the server can crash on a map, before that map to be ignored and to select\nthe next map on the map cycle to be played. The counter starts on 0.', 'startEmptyCycleSystem': '', 'create_game_crash_recreation': "\nHandle the action to take immediately after half of the time-left or rounds-left passed\nwhen using the 'Game Server Crash Recreation' Feature.", 'ARE_THERE_ENOUGH_PLAYERS_FOR_MANAGE_END': '\nThis indicates the players minimum number necessary to allow the last round to be finished when\nthe time runs out.\n\n@return true when we must to wait for the round to end, false otherwise', 'isHandledGameCrashAction': '\n\n@return true when the crashing was properly handled, false otherwise.', 'IS_ABLE_TO_PERFORM_A_MAP_CHANGE': '\nIf this is called when the voting or the round ending is going on, it will cause the votinground\nending to be cut and will force the map to immediately change to the next map.\n\n@return true when we can perform a map change, i.e, it is allowed right now, false otherwise', 'map_getMinutesElapsed': '', 'test_getUniqueRandomBasic_load': '\nTo test the stock getUniqueRandomIntegerBasic(2).', 'VOTE_MIDDLE_PLAYERS_REQUIRED': '', 'displayVoteMapMenuCommands': '\nThis is the secondary `say galmenu` builder. It is used to choose to cancel the personal voting,\nstart it or see the added maps.', 'test_populateListOnSeries_loadb': '\nTests if the function map_populateListOnSeries(3) is properly loading the maps series.', 'IS_THE_ROUND_AVERAGE_TIME_TOO_SHORT': '\nWhen there are enough rounds played and the round average time is neither even half to the vote\ntotal time, it is pretty pointless the try start the voting at the round start.\n\n@return true when the round average time is too smalllowshort, false otherwise', 'register_test': '\nThis is the first thing called when a test begin running. It function is to let the Test System\nknow that the test exists and then know how to handle it using the test_id.\n\n@param max_delay_result the max delay time to finish the whole test chain execution.\n@param test_name the test name to register\n\n@return test_id an integer that refers it at the Test System.', 'IS_EARLY_VOTE': '', 'loadOnlyNominationVoteChoices': '', 'cmd_createMapFile': '\nThe command `gal_createmapfile`.', 'loadMapFileListComplete': '', 'test_GET_MAP_INFO_check': '\n@see test_GET_MAP_INFO(2)', 'display_menu_dirt': '', 'try_to_process_last_round': '\nThis is a fail safe to not allow map changes if must there be a map voting and it was not\nfinishedperformed yet.', 'map_loadRecentBanList': '\nLoad the recent ban map from the file. If the number of valid maps loaded is lower than the\nnumber of map loaded to fill the vote menu, not all the maps will be loaded.\n\nThis also restrict the number of maps to be write to the file `RECENT_BAN_MAPS_FILE_NAME` as if\nnot all maps have been loaded here, on them will be written down to the file on\nwriteRecentMapsBanList(0).\n\n@param maximumLoadMapsCount how many maps are loaded from the main map file list.', 'configureVoteDisplayDebugging': '', 'SECOND_SERVER_START': '', 'test_loadVoteChoices_cases': "\nTo call the general test handler 'test_loadVoteChoices_serie(1)' using test series, the\n`loadTheDefaultVotingChoices(0)` function testing.", 'test_convertNumericBase': '\nCreate one case test for the stock convert_numeric_base(0) based on its parameters passed\nby the test_convertNumericBase_load(0) loader function.', 'tryToMoveTheMapCycleCursor': '\nReturns true when are on a series and should not load the next map following the current map.\n\nReturns false when the current map is already from the map cycle series, or when the current alternate\nseries is over by getting on its last map and the map cycle should be followed instead.\n\n@return true when the cursor was not moved, false otherwise.', 'countPlayerNominations': '', 'convert_octal_to_decimal': '\nGiven a number on the base 8, calculates and return the equivalent decimal number (base 10).', 'VOTEMAP_VOTING_MAP_NAMES_INDEX_FLAG': "\nUsed to select indexes values at the array `g_votingMapNames` instead of the usual array, when we're\nare on the submenu `Commands Menu`.", 'DO_NOT_ALPHABETIZE_VOTEMAP_MENU': '', 'DEBUG_LEVEL_MANUAL_TEST_START': '', 'FIRST_SERVER_START': '', 'SHOW_STATUS_AT_END': '', 'SET_VOTING_TIME_TO': '\nUsed to set a the voting time to a variable.', 'isToLoadNextWhiteListEndProcess': '', 'loadTheWhiteListFeature': "\nThis must to be called always is needed to update the Whitelist loaded maps, or when it is the\nfirst time the Whitelist feature is loaded.\n\n@note It must to be protected by an 'IS_WHITELIST_ENABLED()' evaluation.", 'serverChangeLevel': '', 'handleTwoMapsAtFirstPosition': '\nThis case is triggered when there are 2 map at the first position.', 'test_loadTheNextMapPluginMaps': '\nSee the functions test_configureTheNextMap_load(1) 1, 2, 3, 4 and 5 to now how the map cycle\nwill be filled by the given options.', 'tryToStartTheVotingOnThisRound': '\nThis only handles the voting starting by limit expiration.\n\nThe map will not accept to change when the voting is running due the restriction on\ntry_to_process_last_round(2). On the cases where that restriction does not have effect, the\nvoting will already have been started by vote_manageEnd(0) when the maximum allowed time comes.', 'findDispFormat': '', 'MAX_CELL_LENGHT': '\nConfigure the print indexes padding and max line length in characters.', 'MIN_VOTE_START_ROUNDS_DELAY': '', 'cmd_voteMap': '\nThe command `gal_votemap`. It will receive a list of maps and will to perform a map voting as if\nit was an automatic or forced one. The only difference would be the maps it will use. Instead of\nrandom, they will the the maps passed to the command `gal_votemap map1 map2 map3 ... map9`.\n\nIssue: Add the command `gal_votemap` https://github.com/addonszz/Galileo/issues/48', 'helper_loadStrictValidMapsTrie': '\nTo clean and load the global `g_test_strictValidMapsTrie` within the passed maps as arguments.\n\n@param mapFileList the variable number of maps.', 'toShowTheMapStayHud': '', 'setTheNextMapCvarFlag': '', 'loadTheBanRecentMapsFeature': '\nCreate the recent maps cvar and load the banned file list form the file system.\n\n@param maximumLoadMapsCount how many maps are loaded from the main map file list.', 'intermission_processing': '', 'resetRoundsScores': '', 'round_start_event': '\nCalled after the freeze time to stop counting.', 'handleEndOfTheMapVoteChoice': '', 'END_AT_THE_CURRENT_ROUND_END': '', 'cmd_quit2': '\nThe command `quit2`. See also setTheCurrentAndNextMapSettings(0).', 'MAX_NOMINATION_TRIE_KEY_SIZE': '', 'convert_numeric_base': '\nGiven a number on a certain base until 10, calculates and return the equivalent number on another\nbase until 10.\n\n@param origin_number the number to be converted.\n@param origin_base the base where `origin_number` is on.\n@param destiny_base the base where `origin_number` is to be converted to.', 'loadWhiteListFile': '\nThe parameters `listTrie` and `listArray` must to be passed by as reference because they are created\ninternally by this function on setupLoadWhiteListParams(3).', 'MAX_COLOR_MESSAGE': '', 'SHOW_STATUS_ALWAYS': '', 'SERVER_GAME_CRASH_ACTION_RATIO_DIVISOR': '', 'isAValidMap': '', 'GET_USER_NAME': '\nGet the player name. If the player is not connected, uses "Unknown Dude" as its name.\n\n@param player_id the player id\n@param name_string a string pointer to hold the player name', 'RTV_CMD_SINGLE_PLAYER_DISABLE': '', 'color_chat': '\nPrint colored text to a given player_id. It has to be called to each player using its player_id\ninstead of \'LANG_PLAYER\' constant. Just use the \'LANG_PLAYER\' constant when using this function\nto display to all players.\n\nThis includes the code:\nConnorMcLeod\'s [Dyn Native] ColorChat v0.3.2 (04 jul 2013) register_dictionary_colored function:\n<a href="https://forums.alliedmods.net/showthread.php?p=851160">ColorChat v0.3.2</a>\n\nIf you run this function on a Game Mod that do not support colored messages, they will be\ndisplayed as normal messages without any errors or bad formats.\n\nThis allow you to use \'!g for green\', \'!y for yellow\', \'!t for team\' color with LANGs at a\nregister_dictionary_colored file. Otherwise use \'^1\', \'^2\', \'^3\' and \'^4\'.\n\n@param player_id the player id.\n@param lang_formatting the text formatting rules to display.\n@param any the variable number of formatting parameters.\n\n@see <a href="https://forums.alliedmods.net/showthread.php?t=297484">vformat() ignoring user language</a>', 'LOG': '', 'handleDisplayVoteMapCommands': "\nThis is the secondary `say galmenu` handler.\n\nThis menu handler uses the menu_item_getinfo() instead of convert_numeric_base(3) because it was\nrecently written and there is not need to use the old menu's style with specific handler.", 'process_last_round': '\nTo perform the switch between the straight intermission_processing(0) and the last_round_countdown(0).\n\nThis is used to be called from the computeVotes(0) end voting function, there to call process_last_round(2)\nwith the variable `g_isToChangeMapOnVotingEnd` properly set.', 'IS_TO_LOAD_ALTERNATE_MAP_SERIES': '', 'try_to_add_the_nomination': '', 'setPlayerNominationMapIndex': "\nChanges the player nomination. When there is no nominations, it creates the player entry to the\nthe server nominations tables `g_reverseSearchNominationsTrie`, `g_forwardSearchNominationsTrie` and\n`g_nominatedMapsArray`.\n\n@param player_id the nominator player id.\n@param nominationIndex @see the updateNominationsReverseSearch's nominationIndex function parameter.\n@param mapIndex @see the updateNominationsReverseSearch's mapIndex function parameter.", 'configureTheNorPlayersFeature': '\n@param mapFilerFilePath any string trash variable with length MAX_FILE_PATH_LENGHT', 'whatGameEndingTypeItIs': '', 'SOUND_GET_READY_TO_CHOOSE': '', 'isToLoadNextWhiteListGroupClose': '', 'map_loadEmptyCycleList': '\nCurrently the empty cycle behavior is based on the function map_getNext(4). Therefore this is a\nproblem because it will create infinity empty cycle loops between duplicated maps on the empty\nmap cycle.\n\nSo here I have to options:\na) change all the empty cycle algorithm\nb) do not load duplicated maps.\n\nAs anyone until now complained about this behavior, I choose the former as easier to implement.', 'restoreTheChatTime': '\nIf the game to be faster the us to change the level we must to restore the the `cvar_mp_chattime`\non plugin_end(0).', 'start_rtvVote': '\nIndicates when a map should end after the RTV voting is finished.\nIf selected a value higher than 0, cvar_endOnRoundRtv indicates also the players\nminimum number necessary to allow the last round to be finished when\nthe time runs out.\nFor example, if cvar_endOnRoundRtv value is set to 2, and there are only 1 player\non the server, the round will end immediately.', 'addMenuMoreBackStartOptions': '', 'test_loadCurrentBlackList_load': "\nThis is a configuration loader for the 'loadWhiteListFile(4)' function testing.", 'setTimeText': '', 'VOTE_TIME_HUD2': '', 'configureTheRTVFeature': '\n@param mapFilerFilePath any string trash variable with length MAX_FILE_PATH_LENGHT', 'configureNextEmptyCycleMap': '\nSet the next map from the empty cycle list, if and only if, it is not already configured.\n\n@return -1 if the current map is not on the empty cycle list. Otherwise anything else.', 'DEBUG_LEVEL_CRITICAL_MODE': '', 'startNominationMenuVariables': '', 'announceRegistedVote': '', 'whiteListHourlySet': '', 'processLoadedGroupMapFileFrom': '', 'dispaly_the_vote_sub_menu': '', 'VOTE_TIME_HUD1': '', 'IS_DISABLED_VOTEMAP_EXIT': '', 'FRAGS_BY_ROUND_AVERAGE': '', 'clear_two_dimensional_array': '\nWrapper to allow use the destroy_two_dimensional_array(2) as a cleaner on the TRY_TO_CLEAN(2).', 'map_loadPrefixList': '', 'debugWhatGameEndingTypeItIs': '', 'show_intermission': '\nFreeze the game and show the scoreboard.', 'new_round_event': '\nCalled before the freeze time to start counting. This event is not called for the first game round.', 'announceCellString': '\nAnnounce cells to the server console.\n\n@param cellStringAnnounce a cell as string.\n@param cellStringsBuffer the output string to be printed.\n\n@note It does not immediately print the cell, the output occurs when the buffer is full.', 'GAME_ENDING_CONTEXT_SAVED': '\nEvery time an operation close to the call to map_manageEnd(0) need to be performed on the cvars\n`mp_timelimit`, `mp_fraglimit`, `mp_maxrounds` and `mp_winlimit`, this macro must to be used to\nretrieve the correct cvar value, otherwise it will probably get the value 0 and go nuts.', 'processSubMenuKeyHit': '', 'nextmapPluginInit': '################################## AMX MOD X NEXTMAP PLUGIN ###################################', 'isPrefixInMenu': '', 'IS_END_OF_MAP_VOTING_GOING_ON': '\nVerifies if a voting is or was already processed.\n\n@return true when the voting is completely finished or running on, false otherwise', 'approveTheVotingStartLight': '', 'configureTheWhiteListFeature': '\n@param mapFilerFilePath any string trash variable with length MAX_FILE_PATH_LENGHT', 'srv_announceEarlyVote': '', 'setTimeVoice': '', 'standardizeTheHoursForWhitelist': '\nStandardize the hours from 0 until 23.', 'setGameToFinishAtHalfTime': '\nSave the mp_maxrounds, etc and set them to half of it.', 'configureVotingStart': '', 'map_restoreEndGameCvars': '', 'nomination_cancel': '', 'startVoteMapVoting': '', 'initializeTheVoteDisplay': '', 'getRoundsRemainingBy': '', 'unblockNewVotingToStart': '', 'vote_manageEarlyStart': '\nAction from handleServerStart to take when it is detected that the server has been\nrestarted. 3 - start an early map vote after the first two minutes.', 'show_delayed_results': '\nThis is executed at the end of the delayed tests execution to show its results and restore any\ncvars variable change.', 'cmd_rockthevote': '\nThe command `say rockthevote`.', 'sayHandlerForOneNomWords': '\nHandles one user word said on chat.\n\n@return true when it is performed some nomination command, false otherwise', 'isToStartTheVotingOnThisRound': '\nPredict if this will be the last round and allow to start the voting. Give time range to try\ndetecting the round start, to avoid the old buy weapons menu override. This is called every\nround start and determines whether this round should be used to perform the map voting.\n\nIf this is called between the team_win_event(0) and the round_end_event(0)? This cannot to be\ncalled otherwise the seconds passed since the round started will be out of date.\n\n@param secondsRemaining how many seconds are remaining to the map end.', 'END_OF_MAP_VOTE_ASK': '', 'configureTheVotingMenus': '', 'nomination_announceCancellation': '', 'GET_MAP_NAME_LEFT': '\nSplit the map name from a string.\n\n@param textLine a string containing a map name at the first part\n@param mapName a string to save the map extracted', 'show_last_round_message': '', 'HUD_TIMELEFT_ANNOUNCE': '', 'test_getUniqueRandomInt_load': '\nTo test the stock getUniqueRandomInteger(3).', 'is_there_game_commencing': '\nReturn whether the gaming is on going.', 'print_is_white_list_out_block': '', 'MAPFILETYPE_GROUPS': '', 'getVoteAnnouncementTime': '', 'configureTheMidPlayersFeature': '\n@param mapFilerFilePath any string trash variable with length MAX_FILE_PATH_LENGHT', 'helper_unnominated_nomsLoad': '\nLoad the specified nominations into a specific player.\n\n@param player_id the player id to receive the nominations.\n@param nominations the variable number of maps nominations.', 'addMenuMoreBackOptions': '', 'MAPFILETYPE_SINGLE': '', 'tryToShowTheVotingMenu': '', 'chooseTheEndOfMapStartOption': '\nSwitches between the `cvar_endOnRound` and `cvar_endOfMapVoteStart` options cases.\n\ncase 1:\n`cvar_endOnRound`: When time runs out, end at the current round end.\n`cvar_endOfMapVoteStart`: To start the voting on the last round to be played.\n\ncase 2:\n`cvar_endOnRound`: When time runs out, end at the next round end.\n`cvar_endOfMapVoteStart`: To start the voting on the round before the last.\n\ncase 3:\n`cvar_endOnRound`: Do not applies.\n`cvar_endOfMapVoteStart`: To start the voting on the round before the last of the last.\n\n@param roundsRemaining how many rounds are remaining to the map end.', 'announcerockFailToosoon': '', 'IS_NOMINATION_MININUM_PLAYERS_CONTROL_ENABLED': "\nBoolean check for the nominations minimum players controlling feature. When there are less\nplayers than cvar 'cvar_voteMinPlayers' value on the server, use a different map file list\nspecified at the cvar 'gal_vote_minplayers_mapfile' to fill the map voting as map fillers\ninstead of the cvar 'gal_vote_mapfile' map file list.\n\n@return true when the Nomination Minimum Players feature is enabled, false otherwise", 'last_round_countdown': '', 'setupLoadWhiteListParams': '', 'test_nominateAndUnnominate': '\nCreate one case test for the nomination system based on its parameters passed by the\ntest_nominateAndUnnominate_load(0) loader function.', 'print_logger': '\nWrite debug messages to server\'s console and log file.\n\n@param message the debug message, if omitted its default value is ""\n@param any the variable number of formatting parameters\n\n@see the also stock writeToTheDebugFile( log_file[], formatted_message[] ) for the output log\n`DEBUGGER_OUTPUT_LOG_FILE_NAME`.', 'MAX_PLAYER_NAME_LENGHT': '', 'test_populateListOnSeries_load': '', 'howManySecondsLastMapTheVoting': '\nCalculates how time time the voting last.\n\n@param isToIncludeRunoff whether to include the `runoff` time in the total. Its default value is true.\n@return the total voting time in seconds.', 'displaysLastTestOk': '', 'test_endOfMapVotingStart_case3': '\nTests if the end map voting is starting automatically at the end of map due time limit expiration.', 'game_commencing_event': '\nMake sure the reset time is the original time limit.', 'addMapToTheVotingMenu': '', 'COMMAND_LISTMAPS_DISABLED': '', 'getNextMapByPosition': "\nIncrements by 1, the global variable 'g_nextMapCyclePosition', or set its value to 1.\n\nIf the map cycles are loaded on the plugin_init(0), and the setting `gal_srv_move_cursor`, is\nloaded only at the forward plugin_cfg(0). This ways we need to load both and discard the one\nwhich was not necessary later when the settings are loaded on the plugin_cfg(0).\n\nTherefore we will get a completely wrong `g_nextMapCyclePosition` value which will mess with\neverything, was the `gal_srv_move_cursor` feature makes both map cycle with different indexes.\n\n@param &nextMapCyclePosition is the next map position following actual next map.\n@param isUseTheCurrentMapRule use or not the current map set blocking rule.", 'test_functionNameExample': '\nTests if the function functionNameExample(1) is properly setting the next map.', 'speakRemainingInterger': '', 'SERVER_START_CURRENTMAP': '', 'flushCellStrings': '\nPrint the current buffer, if there are any cellStrings on it.\n\n@param cellStringsBuffer the formatted cellStrings list to be printed.', 'add_my_nomination': '', 'MAX_MENU_ITEMS_PER_PAGE': '', 'IS_MAP_MAPCHANGE_COUNTDOWN': '', 'test_endOfMapVoting': '', 'tryToGetGameModCvar': '', 'create_fakeVotes': '################################## BELOW HERE ONLY GOES DEBUG/TEST CODE ###################################', 'MAX_NON_SEQUENCIAL_MAPS_ON_THE_SERIE': '\nHighly and directly impact on the server change level performance.\n\nIf your server is hosted under an SSD (Solid State Disk), a value high as 20 will take up to 10 or 20 seconds to\ncomplete the change level for a mapcycle within 800 maps.\n\nIf your server is hosted under an HD (Hard Disk), a value high as 20 will take up to 60 or 120 seconds to\ncomplete the change level for a mapcycle within 800 maps.', 'client_authorized_stock': '', 'ERR': '\nShorts the error message line. It requires the variable `errorMessage[ MAX_LONG_STRING ]`\nto be declared before it.\n\nUsage example:\n\nERR( "The expected result must to be %d, instead of %d.", expected, test_result )', 'computeNextWhiteListLoadTime': '', 'COMMAND_VOTEMAP_DISABLED': '', 'loadPluginSetttings': '', 'nomination_clearAll': '', 'start_voting_by_timer': '', 'convertWhitelistToBlacklist': '\nNow [1-2] specifies the time you want to block them; from 1:00 (am) until 2:59 (am).\n\nThis changes:\nFrom 1:00 until 2:59\nto\nFrom 3:00 until 0:59\n1 2\n3 0', 'test_endOfMapVotingStop_case7': '\nTests if the end map voting is not starting automatically at the end of map due time limit expiration.', 'handleServerStart': "\nIndicates which action to take when it is detected that the server\nhas been 'externally restarted'. By 'externally restarted', is mean to\nsay the Computer's Operational System (Linux) or Server Manager (HLSW),\nused the server command 'quit' and reopened the server.\n\n0 - stay on the map the server started with\n\n1 - change to the map that was being played when the server was reset\n\n2 - change to what would have been the next map had the server not\nbeen restarted ( if the next map isn't known, this acts like 3 )\n\n3 - start an early map vote after the first two minutes\n\n4 - change to a randomly selected map from your nominatable map list", 'test_registerTest': '\nThis is a simple test to verify the basic registering test functionality.', 'test_getUniqueRandomIntBasic': '\nCreate one case test for the stock getUniqueRandomIntegerBasic(2) and getUniqueRandomInteger(4)\nbased on its parameters passed by the test_getUniqueRandomBasic_load(0) and test_getUniqueRandomInteger(0)\nloader functions.', 'debug_vote_map_selection': '', 'MAX_NOM_MATCH_COUNT': '', 'map_change': 'change to the map', 'cmd_changeLevel': '\nThe command `gal_changelevel`.', 'writeRecentMapsBanList': '', 'debugPrintRecentBanFile': '', 'printVotingMaps': '', 'dalayedTestsToExecute': '\nContains all delayed unit tests to execute.', 'toShowTheMapNextHud': '', 'GET_LAST_PAGE_NUMBER': "\nCalculate which is the number of the last menu page.\n\n@param totalMenuItems how many items there are on the menu\n@param menuItemPerPage how much items there are on each menu's page\n@return an integer, as the page number", 'cmd_listrecent': '\nThe command `say recentmaps` and its menu implementation.', 'getTheCurrentSerieForTheMap': '', 'toAnnounceTheMapExtension': '', 'IS_TO_ADD_VOTE_MENU_NEW_LINE': '\nDetermines whether a new empty line should be added near the voting menu footer.\n\nThe last rule `g_totalVoteOptions == 1 && !g_isRunOffNeedingKeepCurrentMap` is used when the\nvoting is not an runoff voting, therefore there is only 1 map on the voting menu. At the moment,\nthis could happens when the voting is started by the `gal_votemap``say galmenu` command.\n\n@return true when a new line must be added, false otherwise', 'test_isMapExtensionAvowed_case1': "\nTests if the cvar 'amx_extendmap_max' functionality is working properly for a successful case.", 'loadMapFileListArray': '', 'RUNOFF_EXTEND': '', 'map_extend': '', 'loadMapFileSeriesListArray': '', 'createMapFileFromAllServerMaps': '', 'startEmptyCycleCountdown': '', 'closeVoting': '', 'REMOVE_LETTER_COLOR_TAGS': "\nRemove the colored strings codes '!g for green', '!y for yellow', '!t for team' and\n'!n for unknown'.\n\n@param string[] a string pointer to be formatted.", 'printTheCurrentAndNextMapNames': '\nTo print on the server console the current and next map names aligned. Output example:\n\nL 01232017 - 00:40:44: {1.000 15768 778942 1}\nL 01232017 - 00:40:44: {1.000 15768 778943 1}\nL 01232017 - 00:40:44: {1.000 15764 778945 2} The current map is [ cs_italy ]\nL 01232017 - 00:40:44: {1.000 15764 778946 1} The next map is [ cs_italy_cz ]\nL 01232017 - 00:40:44: {1.000 15768 778948 2}\nL 01232017 - 00:40:44: {1.000 15768 778949 1}\n\nThere is not point in adding the entry statement to this function as its purpose is only to\nprint few lines as possible.', 'vote_unrockTheVote': '', 'voteExpire': '', 'IS_TO_LOAD_THE_FIRST_MAP_SERIES': '', 'sayCurrentMap': '', 'test_GET_MAP_NAME_load': '\nTests if the function map_populateListOnSeries(3) is properly loading the maps series.', 'ANNOUNCE_CHOICE_ADMINS': '', 'test_announceVoteBlockedMap_a': "\nCalls the 'test_loadVoteChoices_load(1)' series case 'a' for manual testing, and seeing the\noutputted string by 'announceVoteBlockedMap(4)'.", 'DEBUG_LEVEL_UNIT_TEST_DELAYED': '', 'get_intermission_chattime': '', 'IS_DISABLED_VOTEMAP_RUNOFF': '', 'NOMINATION_FIRST_PAGE_ITEMS_COUNTING': '\nDue there are several first menu options, take `VOTEMAP_FIRST_PAGE_ITEMS_COUNTING` items less.', 'determineTheVotingFirstChoices': '', 'approveTheVotingStart': '', 'vote_manageEnd': '', 'cmd_lookForCrashes': '\nThe command `gal_look_for_crashes`.', 'START_VOTEMAP_MIN_TIME': '', 'announceThePendingVote': '', 'setThisMapAsPossibleCrashingMap': '', 'CALCULATE_NEW_GAME_LIMIT': "\nTry to set the new game limits as specified by the cvars 'gal_srv_..._restart' feature. This\nmacro requires the integer variable 'serverLimiterValue' defined before the use of this macro.\n\n@param limiterCvarPointer the 'gal_srv_..._restart' pointer\n@param serverCvarPointer the game cvar pointer as 'cvar_mp_timelimit'.\n@param limiterOffset the current game limit as an integer. Example: 'map_getMinutesElapsedInteger(0)'.", 'debug_nomination_match_choice': '', 'test_functionNameExample_case': '\nCreate one case test for the stock functionNameExample(1) based on its parameters passed\nby the test_functionNameExample(0) loader function.', 'configureTheNextMapSetttings': '\nIf we were playing a map series map `cs_map1`, and due an RTV voting was started a new series as\n`de_map1`, we need to set the next map as `de_map2` instead of `cs_map1`. Also, after the series\nto be finished we must to be able to return to the next map after the original series `cs_map1`.\n\n@param currentMapcycleFilePath any string trash variable with length MAX_FILE_PATH_LENGHT', 'isToHandleRecentlyEmptyServer': "\nIf the empty cycle feature was initialized by 'inicializeEmptyCycleFeature()' function, this\nfunction to start the empty cycle map change system, when the last server player disconnect.", 'test_SortCustomSynced2D_case': '\nCreate one case test for the stock SortCustomSynced2D(1) based on its parameters passed\nby the test_SortCustomSynced2D(0) loader function.', 'IS_WHITELIST_ENABLED': '\nBoolean check for the Whitelist feature. The Whitelist feature specifies the time where the maps\nare allowed to be added to the voting list as fillers after the nominations being loaded.\n\n@return true when the Whitelist feature is enabled, false otherwise', 'configureServerStart': '\nNotice that this whole algorithm is only ran at the first time the server start, to set properly\nthe last where the server was before to be closed or crash.\n\nI must also to read them on the server start, as currently is being done, because I need to\nset up whether we need to change level now or not.', 'VOTE_TIME_ANNOUNCE2': '', 'show_last_round_HUD': '', 'VOTE_TIME_ANNOUNCE1': '', 'debugMesssageLogger': '\nWrite debug messages accordantly with the \'g_debug_level\' variable.\n\n@param mode the debug mode level, see the variable \'g_debug_level\' for the levels.\n@param text the debug message, if omitted its default value is ""\n@param any the variable number of formatting parameters\n\n@see the stock writeToTheDebugFile( log_file[], formatted_message[] ) for the output log\n\'DEBUGGER_OUTPUT_LOG_FILE_NAME\'.', 'str_token': '', 'test_configureTheNextMap_loadh': '\nTest the cvar `gal_srv_move_cursor` set as 14, using an alternating series test from the above.', 'displayVoteMapMenuHook': '\nUsed to allow the menu displayVoteMapMenu(1) to have parameters within a default value.\nIt is because public functions are not allow to have a default value and we need this function\nbe public to allow it to be called from a set_task().', 'print_tests_failure': '', 'END_AT_RIGHT_NOW': '', 'loadMapFileList': '', 'getRestartsOnTheCurrentMap': '', 'GET_MAP_INFO_RIGHT': '\nSplit the map info from a string.\n\n@param textLine a string containing a map info at the second part\n@param mapName a string to save the map extracted', 'cmd_HL1_listmaps': '\nThe default engine console `listmaps` command customization.', 'getMapIndexBefore': '\nThe `nextMapCyclePosition` is pointing to the actual next map, but we need the index to the map\nbefore the next map.', 'MAX_NOM_MENU_ITEMS_PER_PAGE': '', 'vote_addFillers': '', 'getNextMapLocalInfoToken': '', 'changeMap': '\nThis function call is only triggered by the game event register_event( "30", "changeMap", "a" ).\n\nThe task `TASKID_SERVER_CHANGE_LEVEL` cannot be removed to stop the map change, because when this\nis called by the game, there is not turning back and the map will change anyways.\n\nThis event can be called twice, one by th game engine (not turning back), and the other by me.\nThe former is due the game engine call could take some seconds more to happen, then it would mess\nwith the change timing. Therefore I call it just to be sure the deadline is missed.', 'SERVER_START_NEXTMAP': '', 'generateGameCrashActionFilePath': '', 'STATUS_TYPE_COUNT': '', 'IS_TO_LOAD_EXPLICIT_MAP_SERIES': '', 'MAX_INTEGER': '', 'test_loadVoteChoices_case': '\nChecks whether the voting menu is properly loaded given some maps.\n\n@param requiredMap a map to be on the menu.\n@param blockedMap a map to not be on the menu.\n@param newSeries a char as the new test series start. The default is to use the last serie.', 'configureTheMapcycleSystem': '\nTo detect if the last MAX_SERVER_RESTART_ACCEPTABLE restarts was to the same map. If so, change\nto the next map right after it.\n\n@param mapToChange is the first map read from `currentAndNextmapNames.dat`, i.e., the supposed last current map.', 'toPrintTheVotingMenuForAnalysis': '', 'processLoadedMapsFile': '', 'IS_TO_ENABLE_SVEN_COOP_SUPPORT': '\nEnables the support to Sven Coop \'mp_nextmap_cycle\' cvar and vote map start by the Ham_Use\n"game_end". It will require the \'<hamsandwich>\' module.', 'showGalVoteMapHelp': "\nThis is the `gal_votemap` admin's command line help displayer.", 'DEBUG_LEVEL': "\nThis is to view internal program data while execution. See the function 'debugMesssageLogger(...)'\nand the variable 'g_debug_level' for more information. Usage example, to enable several levels:\n#define DEBUG_LEVEL 1+2+4+16\n\n@note when the 'DEBUG_LEVEL_FAKE_VOTES' is activated, usually the voting will be approved\nbecause it creates also a fake players count. So, do not enable 'DEBUG_LEVEL_FAKE_VOTES'\nif you do not want the map voting starting on an empty server.\n\n0 - Disables this feature.\n\n1 - Normalbasic debuggingdepuration.\n\n2 - Run the NORMAL Unit Tests on the server start.\n\n4 - Run the DELAYED Unit Tests on the server start.\nCurrently there are none Delayed Unit Tests Created.\n\n8 - a) To create fake votes. See the function 'create_fakeVotes()'.\nb) Set the vote time to 5 seconds.\nc) To skip the 'pendingVoteCountdown()'.\nd) To create fake players count. See the function 'get_real_players_number()'.\n\n16 - Enable DEBUG_LEVEL 1 and all its debuggingdepuration available.\n\n32 - Run the MANUAL test on server start.\n\n64 - Disable the LOG() while running the Unit Tests.\n\n127 - Enable the levels 1, 2, 4, 8, 16, 32 and 64.\n\nDefault value: 0", 'cmd_listrecent_handler': '\nThis menu handler uses the convert_numeric_base(3) instead of menu_item_getinfo() to allow easy\nconversion to the olde menu style, and also because it is working fine as it is.', 'test_announceVoteBlockedMap_c': "\nCalls the 'test_loadVoteChoices_load(1)' series case 'c' for manual testing.\n\n@see test_announceVoteBlockedMap_a(0)", 'TOGGLE_BIT_FLAG_ON_OFF': '\nCheck whether the menu exists, call menu_destroy(1) and set the menu to id to 0.\n\n@param menu_id_variable a variable within the player menu to be destroyed.', 'stayHereWon': '', 'IS_TO_START_THE_VOTE_BY_FRAGS': '\nCalculates whether to start the map voting due map closing time.\n\n@param fragsRemaining how much frags are remaining to finish the map.', 'intermission_effects': '', 'SERVER_START_RANDOMMAP': '', 'setup_last_round_HUD': '', 'nomination_menu': '\nGather all maps that match the nomination.', 'configureTheMinPlayersFeature': '\n@param mapFilerFilePath any string trash variable with length MAX_FILE_PATH_LENGHT', 'checkIfThereEnoughMapPopulated': '', 'startNonForcedVoting': '', 'IS_COLORED_CHAT_ENABLED': '\nOn the first server start, we do not know whether the color chat is allowedenabled. This is due\nthe register register_dictionary_colored(1) to be called on plugin_init(0) and the settings being\nloaded only at plugin_cfg(0).\n\nWhen we put the color tags inside the plugin, we need to check whether the color chat is enabled.', 'test_handleServerStart': '\nTests if the function handleServerStart(2) is properly setting the start map.', 'loadMapGroupsFeature': '', 'computeMapVotingCount': '', 'test_loadCurrentBlacklist_case': "\nThis is a general test handler for the function 'loadWhiteListFile(4)'.\n\n@param s a char within the current test series.\n@param isBlackList whether is is a Whitelist or Blacklist test.\n@param currentHour the current hour.\n@param map_existent the map name to exist.\n@param not_existent the map name to does not exist.", 'moveTheCursorToTheLastMap': '\nMove the current map cycle position to the end of the current series. If it is already on the end\nor there is not series for the current position, it does nothing, i.e., get stuck where it is now.\n\n@param defaultNextMapCyclePosition is pointing the next map of the default next map on the `defaultCurrentMapNameClean` series.', 'printUntilTheNthLoadedMap': '\nThere is not point in adding the entry statement to this function as its purpose is only to\nprint few lines as possible.', 'SOUND_RUNOFF_REQUIRED': '', 'VOTEMAP_FIRST_PAGE_ITEMS_COUNTING': '\nDue there are several first menu options, take `VOTEMAP_FIRST_PAGE_ITEMS_COUNTING` items less.', 'isToLoadNextWhiteListGroupOpen': '\nBy default, the Whitelist understand a period as 5-5 being 05:00:00 until 05:59:59, and a period\nas 5-6 being 05:00:00 until 06:59:59.\n\n0 - To convert 5-5 to 05:00:00 until 05:59:59.\n1 - I want to 5-5 to be all day long.\n\nTo disable this feature, set this cvar to 0\n\nWhen the Whitelist ` gal_whitelist_hourly_set` says [0-0] it means it will allow them from 00:00:00 until 00:59:59\nWhen the Whitelist `!gal_whitelist_hourly_set` says [0-0] it means it will block them from 00:00:00 until 23:59:59\n\nAs we may notice, the current whitelist feature is full featured and the `gal_whitelist_hourly_set` is obsolete.\nTo force the Whitelist to block them from 00:00:00 until 23:59:59, we need to set it as {0-0}.\n\nFor the `gal_whitelist_block_out` option 0 - Allow all maps outside the Whitelist rule.\n\nTo block, we need to load them.\nTo allow, we cannot to load them.\n\nHow do I block a map?\nIf I load the map from the file to the `Trie`, I will block it on that hour and allow all the others loaded.\n\nFor the `gal_whitelist_block_out` option 1 - Block all maps outside the Whitelist rule.\n\nTo block, we cannot to load them.\nTo allow, we need to load them.\n\nHow do I block a map?\nIf I load the map from the file to the `Trie`, I will allow it on that hour and block all the others not loaded.\n\n@note the hours parameters `startHour` and `endHour` must to be already normalized by standardizeTheHoursForWhitelist(3).', 'cacheCvarsValuesPublic': '\nUsed to allow the menu cacheCvarsValues(1) to have parameters within a default value. It is\nbecause public functions are not allow to have a default value and we need this function be\npublic to allow it to be called from a set_task().', 'is_to_block_map_nomination': '', 'chooseTheVotingMapWinner': '', 'vote_getRocksNeeded': '\nConsider how may RTV votes are required to start the voting. If 0, the voting must to start\nimmediately.\n\n@return how many RTVs there necessary to start the voting', 'MAX_PLAYERS_COUNT': '', 'debugIsTimeToStartTheEndOfMap': '', 'test_setCorrectMenuPage_load': '\nTo test the stock setCorrectMenuPage(4).', 'debugLoadedGroupMapFileFrom': '', 'map_populateListOnSeries': '\nThis function supposes map cycle as:\n\nde_dust\nde_inferno\nde_chateal\nde_dust2\nde_nuke\n\nAnd will understand it as being:\n\nde_dust\nde_dust2\nde_dust3\nde_dust4\nde_inferno\nde_chateal\nde_dust2\nde_nuke\n\nSo the `mapsProcessedNumber` will count `de_dust4` as being the position 4 and `de_inferno` as being\nthe position 5, while in fact, `de_dust4` does not exist on the map cycle file, and the `de_inferno`\nbeing actually on the position 2.', 'SET_MENU_LANG_STRING_PROPERTY': "\nHelper to adjust the menus options 'back', 'next' and exit. This requires prior definition of\nthe variables 'menuOptionString[ MAX_SHORT_STRING ] and 'player_id', where the player id must\npoint to the player identification number which will see the menu.\n\n@param propertyConstant one of the new menu property constants\n@param menuId the menu identification number\n@param langConstantName the dictionary registered LANG constant", 'ANNOUNCE_CHOICE_PLAYERS': '', 'test_loadNextWhiteListGroupClos': "\nTo call the general test handler 'test_isToLoadBlacklist_case(3)' using test scenario cases.", 'IS_TO_MUTE': '\nControl whether the players commands are going to be displayed to everybody or just him.\n\n@param true if the messagecommand should be blocked (PLUGIN_HANDLED), false otherwise (PLUGIN_CONTINUE)\n@return `PLUGIN_HANDLED` or `PLUGIN_CONTINUE`, accordantly to the settings set by the cvar', 'sayTheTime': '', 'STATUS_TYPE_PERCENTAGE': '', 'cmd_say': '\nGeneric say handler to determine if we need to act on what was said.\n\nThis need to be registered only if the RTV and Nominations are enabled.', 'nominationAttemptWithNamePart': '\nGather all maps that match the g_nominationPartialNameAttempt[ player_id ].\n\n@note ( playerName[], &phraseIdx, matchingSegment[] )', 'delete_users_menus': '', 'plugin_end': '', 'setTheCurrentAndNextMapSettings': '\nI must to set next the current and next map at plugin_end(0), because if the next map changed by\na normal server change level, the current and next map names will not be updated. It is impossible\nto detect to which map the server was changed when the server admin does `amx_map` or any other\ncommand to change the level to a specific map. However we do not need to worry about such commands\nbecause if the admin does so, the map will be changed to the map just before they were when the\nchange level command to be performed.\n\nSadly this function is being called when the server\'s admin is calling `rcon quit`. It means that\non the next time the server start, it will be on the next map instead of the current map. To fix\nthis, we need to detect here if this function is being called when the server admin the command\n`rcon quit`.\n\nTherefore, we register the server command `quit` setting the global variable `g_isServerShuttingDown`\nto true and returning `PLUGIN_CONTINUE`. But this first one is not working. Looks list only Orpheu\ncan hook this. For now I am registering the command `quit2` which setup the global variable\n`g_isServerShuttingDown` and call the server command `quit`.\n\nThis is an example to blocking the rcon command:\n\n#include <amxmodx>\n#include <orpheu>\n\npublic plugin_init()\n{\nOrpheuRegisterHook( OrpheuGetFunction( "SV_Rcon" ), "On_Rcon_Pre", OrpheuHookPre )\n}\n\npublic OrpheuHookReturn:On_Rcon_Pre()\n{\ng_isServerShuttingDown = true;\nreturn OrpheuIgnored\n}\n\n************************************************************************************************\n\nAlgorithm o detect the quit command: (Not implemented, Not finished)\n\n1. Update only at server start the new file `lastServerStartMapName.dat`\n\n2. So if the map name on `lastServerStartMapName.dat` is different that the current map name on\n`currentAndNextmapNames.dat`, the server crashed on change level or the server admin used the\ncommand `quit` on the server console.\n\n2.a) If the server crashed on change level, we still want to go back to that map on\n`currentAndNextmapNames.dat` until `MAX_SERVER_RESTART_ACCEPTABLE`.\n2.b) If the server admin just used the command `quit`, we want to go back to the map the\nfile `lastServerStartMapName.dat`.\n\n3. If if the map name on `lastServerStartMapName.dat` is equal that the current map name on\n`currentAndNextmapNames.dat`, the server can crashed while playing the that map. This case is\nthe same on `2.a)`, we still want to come back to that map `lastServerStartMapName.dat` until\nthe MAX_SERVER_RESTART_ACCEPTABLE.', 'printTheUnitTestsResults': '', 'get_real_players_number': '', 'resetTheRtvWaitTime': '\nReset the "rtv wait" time, taking into consideration the map extension.\n\nThis must to be called before the doTheActualMapExtension(0)!', 'DEBUG_LEVEL_NORMAL': '\nDebugging level configurations.', 'enableNewVoting': '\nEnable a new voting, as a new game is starting', 'computeUndoButton': '', 'changeMapIntermission': '', 'nomination_getPlayer': '\nCheck if the map has already been nominated.\n\n@param mapIndex the map index desired.\n\n@return 0 when the map is not nominated, or the player nominator id.', 'test_endOfMapVotingStop_case5': '\nTests if the end map voting is not starting automatically at the end of map due time limit expiration.', 'test_GET_MAP_INFO': '\nChecks whether the voting menu is properly loaded given some maps.\n\n@param requiredMap a map name to be on the menu\n@param requiredInfo a map info to be on the menu\n@param toBe true if the information should be present, false otherwise', 'isThereNextMapOnTheSerie': '', 'map_getMinutesElapsedInteger': '', 'debugTeamWinEvent': '', 'ROUND_VOTING_START_SECONDS_DELAY': '\nSpecifies how much time to delay the voting start after the round start.\n\n@return an integer, how many seconds to wait', 'timeleftPluginInit': '', 'SHOW_STATUS_ALWAYS_UNTIL_VOTE': '', 'test_handleServerStart_case': '\nCreate one case test for the stock handleServerStart(1) based on its parameters passed\nby the test_handleServerStart(0) loader function.\n\n@param sA the start action option to be used on this test.\n@param cmnE the current map name expected after the test to run.\n@param nmnE the next map cycle name expected after the test to run.\n@param nmpE the next map cycle position expected after the test to run.\n@param iA whether or not is to advance the expected next map.\n@param iP the initial position to set the `g_nextMapCyclePosition` after saving the `nmpE`.', 'MUTE_MESSAGES_SPAMMING': '\nGeneral Constants for the cvar `gal_general_options` options.', 'displayEndOfTheMapVoteMenu': '', 'startVotingByGameEngineCall': '', 'tryToSetGameModCvarFloat': '', 'test_resetRoundsScores_case': "\nThis is a general test handler for the function 'resetRoundsScores(0)'.\n\n@param limiterCvarPointer the 'gal_srv_..._restart' pointer\n@param serverCvarPointer the game cvar pointer as 'cvar_mp_timelimit'.\n\n@note see the stock test_resetRoundsScores_loader(4) for the other parameters.", 'handleOneMapAtFirstPosition': '\nThis case is triggered when there are 1 map at the first position, but several on the second\nposition.', 'test_isToLoadBlacklist_case': "\nThis is a general test handler for the function 'isToLoadNextWhiteListGroupOpen(4)'.\n\n@param currentHour the current hour.\n@param isToLoad whether the sequence should be loaded by the given `currentHour`.", 'nomination_list': "\nPrint to chat all players nominations available. This is usually called by 'say noms'.", 'getPlayerNominationMapIndex': '\nGets the nominated map index, given the player id and the nomination index.\n\n@return -1 when there is no nomination, otherwise the map nomination index.', 'cacheCvarsValues': '\nTo cache some high used server cvars.\n\n@param ignoreUnregistred whether retrieve the settings dependent cvars or not.\n\n@see cacheCvarsValuesIgnored(0)', 'map_populateList': '', 'SHOW_STATUS_AFTER_VOTE': '', 'getLastNextMapFromServerStart': '', 'rtv_remind': '', 'toDigitsRepresentation': '\nCreate an Dynamic Array within of the decimal number at its given base.\n\n@param origin_number a decimal number to be converted.\n@param origin_base the base where `origin_number` is to be converted to.\n\nreturn a Dynamic Array within the digits of inputed number on the specified base.', 'configureTheUnitTests': 'The Unit Tests execution', 'nominationAttemptWithNameHook': '\nUsed to allow the menu nominationAttemptWithNamePart(2) to have parameters within a default value.\nIt is because public functions are not allow to have a default value and we need this function\nbe public to allow it to be called from a set_task().', 'print_all_tests_executed': '', 'test_SortCustomSynced2D': '\nTests if the function SortCustomSynced2D(3) is properly sorting the maps.', 'loadMapGroupsFeatureFile': '', 'IS_TO_RTV_WAIT_ADMIN': '', 'test_negativeRTVValues_load': '\nTo test the RTV feature. Simulates a non-RTV vote player disconnecting.', 'test_strictValidMapsTrie': '\nCreate one case test for the stock isAllowedValidMapByTheUnitTests(1) based on its parameters passed\nby the test_strictValidMapsTrie_load(0) loader function.', 'mp_fraglimitCvarSupport': "\nThe cvars as 'mp_fraglimit' is registered only the first time the server starts. This function\nsetup the 'mp_fraglimit' support on all Game Modifications.", 'MAX_SHORT_STRING': '', 'MAX_VOTING_CHOICES': '\nWhen it is set the maximum voting options as 9, we need to give space to the `Stay Here` and\n`Extend` on the voting menu, calculating how many voting choices are allowed to be used,\nconsidering whether the voting map extension option is being showed or not.\n\n@return an integer, how many voting choices are allowed, i.e., its maximum value', 'loadNominationList': '', 'HUD_VOTE_RESULTS_ANNOUNCE': '', 'VOTE_TIME_COUNT': '', 'map_listAll': '\nProperly list all server maps at the user console.', 'IS_ENABLED_VOTEMAP_NOMINATIONS': '', 'MIN_ROUND_TIME_DELAY': '\nThe rounds number required to be reached to allow predict if this will be the last round and\nallow to start the voting.', 'test_convertNumericBase_load': '\nTo test the stock convert_numeric_base(3).', 'tryToRunAnAlternateSeries': '\nStart following the series by its dynamically generated name instead of using the virtual map cycle\nfile list.\n\nWhen we should follow a different next map than the `defaultNextMapName` parameter, it set the `defaultNextMapName`\nparameter to the next map it should follow and freeze the map cycle position.\n\nOtherwise does keep it and do not freeze the map cycle position `defaultNextMapCyclePosition` decreasing its value.\n\n@param currentMapName this is the map name which was just changed by the RTV or server Admin.\n@param defaultNextMapName the next map based on the position read from last `defaultNextMapCyclePosition` value.\n@param defaultNextMapCyclePosition the default position of the next map of current `defaultNextMapName`.\n\n@return true when the map cycle position need to be decreased, false otherwise.', 'performRunoffExtending': '\nAllow it only on a end map voting.', 'test_endOfMapVoting_case6': '\nTests if the end map voting is not starting again right after if the extension option wins.', 'saveTheRoundTime': '', 'nomination_handlePartialMatch': '\nThese menus does not use the `info[]` parameter allowed by the new menu style because in the\nprevious implementation of this menu, where a single menu within all the map entries was build.\nThere the `info[]` option on AMXX 182 as getting wrong indexes about after the menu entry 200.\nSo, a implementation to pass the indexes using global variables was created.\n\nNow as the menu has at most only 10 entries, such bug would not to apply. However I prefer to keep\nthis implementation for historical reasons and as it is already functional and its properly of\nremembering on which page the menu was closed previously is properly working.\n\nThe new menus built after this using the `on demand approach` are already using the `info[]` option\nfrom the new menus style. For its implementation, see the function: displayVoteMapMenuCommands(1)', 'MAX_MAPNAME_LENGHT': '', 'saveCurrentAndNextMapNames': '\nThe parameter `forceUpdateFile` is used only when we need to set the `CURRENT_AND_NEXTMAP_FILE_NAME`\nat the first time we started the server. As by the book, we only read the `CURRENT_AND_NEXTMAP_FILE_NAME`\ndata at the server start.\n\nThe next map written to the file `currentAndNextmapNames.dat` is currently used for the option\n`startAction == SERVER_START_NEXTMAP` and debugging purposes.', 'IS_VOTE_EXPIRED': '', 'inGameTestsToExecute': "\nRun the manual call Unit Tests, by 'say run' and 'say_team run'.", 'addExtensionOption': '', 'GET_MAP_NAME': '\nRetrieves a map name from a Dynamic Array of maps.\n\n@param mapArray a Dynamic Array of maps\n@param mapIndex an valid index on the `mapArray` parameter\n@param mapName a string to store the map name', 'INFINITY_VOTING_TIME_VALUE': '\nThe value used when the voting time is set to 0.', 'map_getNext': '\nGiven a mapArray list and the currentMap, calculates the next map after the currentMap provided at\nthe mapArray. The map list to start on 0 as the first map.\n\nIf there is not found a next map, the current map name on `nextMapName` will to be set as the\nfirst map cycle map name.\n\n@param mapArray the dynamic array with the map list to search\n@param currentMap the string printer to the current map name\n@param nextMapName the string pointer which will receive the next map\n\n@return mapIndex the nextMapName index in the mapArray. -1 if not found a nextMapName.', 'setCorrectMenuPage': '\nRemove all the text from the string, except the first digits chain, to allow to open the menu\nas `say galmenuPageNumber`. For example: `say galmenu50`.', 'getLastEmptyCycleMap': '', 'sort_stringsi': '', 'display_menu_clean': '', 'no_color_console': '\nRemove the color tags form the message before print it to the given player console.\n\n@param player_id the player id.\n@param message[] the text formatting rules to display.\n@param any the variable number of formatting parameters.', 'sayRoundsLeft': '', 'displayTheVoteMapActionMenu': "\nThis is the `say galmenu` final admin's choice builder.", 'IS_BY_TIMER': '', 'ALWAYS_KEEP_SHOWING_NONE_OPTION': '', 'runTests': '\nThis function run all tests that are listed at it. Every test that is created must to be called\nhere to register itself at the Test System and perform the testing.', 'HUD_CHANGELEVEL_ANNOUNCE': '', 'isTimeToStartTheEndOfMapVoting': '\nDetermine whether the server is on an acceptable time to start a map voting on the middle of the\nround and to start the end map voting near the map time limit expiration.\n\nWhen other features as `cvar_endOfMapVoteStart` and `cvar_endOnRound` are not enabled, then\nwe must to start the voting right away when the minimum necessary time comes.\n\nAs we only periodically check to whether to start the map voting each 15 seconds, we must to set\nthe minimum check as: g_votingSecondsRemaining + 15 seconds + 1', 'IS_BY_FRAGS': '', 'test_populateListOnSeries_loada': '\nTests if the function map_populateListOnSeries(3) is properly loading the maps series.', 'map_manageEnd': '\nThis must to be called to perform the delayed map start vote, when the variables\ng_isTheLastGameRoundg_isThePenultGameRound are set to true. Therefore, it would set the task\nto start the map voting considering how many seconds from this round already have been played.\n\nAlso, at the same time, the vote_manageEnd(0) must to attempt to start the voting in case\nthe time to end the map or the round? Here we need to take care of:\n\n1. If the time will end in 70 seconds, but the map will hold due `cvar_endOnRound`, we do not\nnecessary need to start the map voting, as the map may last longer as 200 seconds.\n2. Moreover, we just to need to take the `g_roundAverageTime` and the `g_roundStartTime`\nand calculate how much time is left on the round. Then pass it to:\nisTimeToStartTheEndOfMapVoting( roundSecondsLeft )\n\nNow, if the round end before the voting to complete, the endRoundWatchdog(0) will not be\ncalled and the a extra round will be played. But if we are not using the `cvar_endOnRound` feature?\n\nWe do not wait to start the map voting, and to start the it right when the remaining time\nreaches the `g_votingSecondsRemaining` time. But as we only periodically check to whether to start\nthe map voting each 15 seconds, we must to set the maximum check start as `g_votingSecondsRemaining`\nand the minimum start check as `g_votingSecondsRemaining + 15 seconds + 3`. These values are defined\nby the constants `START_VOTEMAP_MAX_TIME` and `START_VOTEMAP_MIN_TIME`, respectively.\n\nNow the the average round time is shorter than the total voting time, we must to\nstart a map voting, otherwise we could get an extra round being played. This case also\nmust to be handled by tryToStartTheVotingOnThisRound(1), to start the voting on round before\nthe actual last round.', 'START_VOTEMAP_MAX_TIME': '', 'test_getUniqueRandomInteger': '\nCreate one case test for the stock getUniqueRandomInteger(0) based on its parameters passed\nby the test_getUniqueRandom_load2(0) loader function.', 'test_loadCurrentBlacklist_caseT': '', 'IS_BY_ROUNDS': '', 'IS_RUNOFF_VOTE': '', 'SWITCH_ENDING_GAME_TYPE_RETURN': '\nWrapper to call switchEndingGameType(10) without repeating the same `if` code everywhere.', 'test_populateListOnSeries_loadc': '\nTests if the function map_populateListOnSeries(3) is properly loading the maps series.', 'printDynamicArrayCells': '', 'configureEndGameCvars': '\nAll these cvars must to be set using the tryToSetGameModCvarNum(2), tryToSetGameModCvarString(2)\nand tryToSetGameModCvarFloat(2) functions.', 'test_isInEmptyCycle': '\nTest for client connect cvar_isToStopEmptyCycle behavior.', 'round_restart_event': "\nReset rounds scores every game restart event. This relies on that the 'game_commencing_event()'\nis not triggered by the 'round_restart_event()'. This use 'is_there_game_commencing()' to determine\nif it must restore the time limit by calling 'game_commencing_event()', when there is none game\non going, to avoid the infinity time limit due the allow last round finish feature.", 'cmd_startVote': '\nThe command `gal_startvote`, used when need to start a forced vote map.', 'loadMapsFolderDirectoryComplete': '', 'printDynamicArrayMaps': '', 'loadMapFileListOnSeries': '', 'print_tests_results_count': '', 'IS_TO_IGNORE_SPECTATORS': '\nIf the cvar `gal_server_players_count` is enabled, we must ignore the spectators team on\nCounter-Strike. If colored chat is supported, we are running Counter-Strike, therefore there are\nthe CTTR teams.\n\n@return true if the spectators team must be ignored, false otherwise', 'toShowTheMapExtensionHud': '', 'IS_DISABLED_VOTEMAP_EXTENSION': '', 'test_configureTheNextMap_loadd': '\nTest the cvar `gal_srv_move_cursor` set as 2.', 'nomination_toggle': '', 'HUD_VOTE_VISUAL_COUNTDOWN': '', 'IS_VOTE_OVER': '', 'CLIENT_AUTHORIZED_MACRO': '\nThe reamxmodx is requiring more parameters to allow a call to `client_authorized()` from the\nUnit Test. So, the stock client_authorized_stock(1) is just a shadow of the client_authorized(1)\njust to allow to perform the Unit tests.', 'MAX_SAVED_ROUNDS_FOR_AVERAGE': '', 'map_nominate': '', 'DESTROY_PLAYER_NEW_MENU_TYPE': '\nCheck whether the menu exists, call menu_destroy(1) and set the menu to id to 0.\n\n@param menu_id_variable a variable within the player menu to be destroyed.', 'approveTheRunoffVotingStart': '', 'VOTE_WAIT_FOR_ROUND_END': '', 'compute_the_RTV_vote': '\nAllow the player to rock the vote.\n\n@return true when the vote is computed, false otherwise.', 'startTheVoting': '\nAny voting not started by `cvar_endOfMapVoteStart`, `cvar_endOnRound` or ending limit expiration,\nis a forced voting.', 'MAX_PREFIX_COUNT': '', 'SortCustomSynced2D': '\nSort static the static array `array[]` and keep the array `arraySync` updated with it.\n\n@param array a sorted two-dimensional static array\n@param arraySync a synced two-dimensional static array with the first parameter `array[][]`\n@param elementSize the size of the elements to be inserted', 'doAmxxLog': '\nCall the AMXX logger log_amx() and the internal debugger using the same logging message.\n\n@param text the debug message, if omitted its default value is ""\n@param any the variable number of formatting parameters', 'saveCurrentMapCycleSetting': "\nThe variable 'g_nextMapCyclePosition' is updated also at 'handleServerStart(0)', to refresh the\nnew settings.\n\n@param mapcycleFilePath the current map-cycle file path.", 'registerTheMapCycleCvar': '\nThe default cvar `mapcyclefile` seems to crash the game if you have more of 489 maps in\n`mapcycle.txt`file. Therefore, you can use this cvar instead of the default `mapcyclefile` cvar\nif you want to have more map on your map cycle file.', 'printIntegerArray': '', 'RUNOFF_ENABLED': '', 'test_loadCurrentBlackList_cases': "\nTo call the general test handler 'test_loadCurrentBlacklist_case(3)' using test scenario cases.", 'nomination_handleMatchChoice': '\nThis menu handler uses the convert_numeric_base(3) instead of menu_item_getinfo() to allow easy\nconversion to the olde menu style, and also because it is working fine as it is.', 'map_change_stays': '', 'showPlayersVoteResult': '', 'start_voting_by_winlimit': '', 'VOTE_TIME_RUNOFF': '', 'test_colorChatLimits': '\nManual test for the maximum chat message send to the server players.', 'CONVERT_NONE_OPTION_TO_CANCEL_LAST_VOTE': '', 'IS_MAP_MAPCHANGE_BUY_GRENADES': '', 'getUniqueRandomInteger': "\nGet unique random numbers between a minimum until maximum. For now this function is used on the\nsource code. It is here for historical purposes only. It was previously created for use but its\nused was deprecated. Now it can be used for implementation comparison between its sister function\ngetUniqueRandomIntegerBasic(2) just bellow.\n\nIf the `maximum`'s change between the function calls, the unique random number sequence will be\nrestarted to this new maximum value. Also after the maximum value been reached, the random unique\nsequence will be restarted and a new unique random number sequence will be generated.\n\nIf your `maximum` parameter value is not 0, you can to reset the sequence manually just to calling\nthis function as `getUniqueRandomInteger( holder )` or using some the `maximum` parameter value.\nThe random generated range is:\n\nminimum <= return value <= maximum\n\n1. Do not forgot the call ArrayCreate() for the `holder` parameter before calling this function,\nand to call ArrayDestroy(1) for the `holder` parameter after you finished using this function.\n2. Do not change the minimum value without changing at the same time the maximum value, otherwise\nyou will still get number at the old minimum value starting range.\n3. This algorithm complexity is linear `O( n )` for the first call and when the random generated\nsequence is restarted. The further function calls has constant `O( 1 )` complexity.\n\n@param holder an initially empty Dynamic Array used for internal purposes.\n@param minimum the inclusive lower bound limit, i.e., the minimum value to be sorted.\n@param maximum the inclusive upper bound limit, i.e., the maximum value to be sorted.\n@param restart if false, the sequence will not be automatically restarted and will to start\nreturning the value -1;\n\n@return an unique random integer until the `maximum` parameter value.", 'test_loadCurrentBlacklistMapsCl': '', 'test_configureTheNextMap': '\nTests if the function configureTheNextMapSetttings(1) is properly setting the next map.', 'END_AT_THE_NEXT_ROUND_END': '', 'test_loadCurrentBlacklistMapsOp': '', 'cmd_cancelVote': '\nThe command `gal_cancelvote`.', 'IS_TO_LOAD_ALL_THE_MAP_SERIES': '', 'test_whatGameEndingTypeIt': '\nCreate one case test for the stock whatGameEndingTypeItIs(0) based on its parameters passed\nby the test_whatGameEndingTypeIt_load(0) loader function.', 'test_loadVoteChoices_serie_d': '\nPART 4: Enable the minimum players feature.', 'vote_resetStats': "\nTo prepare for a new runoff voting or partially to prepare for a complete new voting. If it is\nnot a runoff voting, 'finalizeVoting()' must be called before this.", 'IS_IT_A_VALID_MAP_LINE': '\nCheck whether a line not a commentary, empty and if it is a valid map by IS_MAP_VALID(1).\n\n@param currentLine a string within the line to check.', 'configureServerMapChange': '\nSetup the main task that schedules the end map voting and allow round finish feature.\n\n@param mapFilerFilePath any string trash variable with length MAX_FILE_PATH_LENGHT', 'test_loadVoteChoices_serie_a': '\nPART 1: Nominates some maps and create the vote map file and minimum players map file.', 'test_loadVoteChoices_serie_b': '\nPART 2: Force the minimum players feature to work.', 'test_loadVoteChoices_serie_c': '\nPART 3: Load more maps nominations and disable the minimum players feature.', 'fromDigitsRepresentation': '\nRead an digits Dynamic Array at its given base and return an integer representation.\n\n@param digits a Dynamic Array within the digits of inputed number on the specified base.\n@param origin_base the base where `digits` are represented.\n\nreturn an integer representation inputed number on the specified base.', 'setNextMap': '\nInternally set the next map on `g_nextMapName` and save to the file `currentAndNextmapNames.dat`,\nthe current map name and the here provided nextMapName.\n\n@param currentMapName the current map the server is playing\n@param nextMapName the next map the server will be playing\n@param isToUpdateTheCvar true if is to change the cvar `amx_nextmap` to the `nextMapName`,\notherwise false\n@param forceUpdateFile true if is to update current and next map names saved on the\n`currentAndNextmapNames.dat` file, otherwise false', 'pendingVoteCountdown': '', 'writeToTheDebugFile': "\nWrite messages to the debug log file on 'addonsamxmodxlogs'.\n\n@param log_file the log file name.\n@param formatted_message the formatted message to write down to the debug log file.", 'resetRoundEnding': '\nReset the round ending, if it is in progress.', 'test_strictValidMapsTrie_load': '\nTests if the function helper_loadStrictValidMapsTrie() is properly loading its maps bytes\nisAllowedValidMapByTheUnitTests(1).', 'sayWinLimitLeft': '', 'VOTE_START_ROUNDS': '\nThe rounds number before the mp_maxroundsmp_winlimit to be reached to start the map voting. This\nconstant is equivalent to the `START_VOTEMAP_MIN_TIME` and `START_VOTEMAP_MAX_TIME` concepts.\n\nMake sure this is big enough, because the rounds could be finish pretty fast and the game may end\nbefore it, as this option only takes effect and the `cvar_endOnRound` and `cvar_endOfMapVoteStart`\nare not handling the map end.', 'loadTheCursorOnMapSeries': '', 'HELPER_MAP_FILE_LIST_LOAD2': '', 'updateNominationsReverseSearch': "\nUpdate the reverse search. It is used to find out the data stored by the `MapNominationsType`\nenum for the given nominated map index.\n\nNote:\n1. Each map has one, and only one nomination index.\n2. The `originalMapIndex` is the position of the last nomination to be replaced.\n\n@param player_id the nominator player game id.\n@param nominationIndex the player's personal nominations array index.\n\n@param mapIndex the server's nomination index. Uses -1 to disable the current\nplayer's personal nomination index.\n\n@param originalMapIndex the correct server's nomination index. Do not accept the wild card\n-1 as the mapIndex parameter just above.", 'SOUND_TIME_TO_CHOOSE': '', 'printNominationList': '\nPrint a nomination map list to the user. When the list is empty, it does show no nominations\navailable.\n\nparam mapsList the list of maps to be printed to the user.\n@param isFlushed whether the list has already been printed to the user after the `say noms` command.', 'helper_loadNominations': '\nLoad the specified nominations into the system.\n\n@param nominations the variable number of maps nominations.', 'sayHandlerForTwoNomWords': '\nHandles two user word said on chat.\n\n@return true when it is performed some nomination command, false otherwise', 'IS_DISABLED_VOTEMAP_INTRO': '', 'helper_clearNominationsData': '\nTo clear the normal game nominations.', 'MAP_CHANGES_AT_THE_NEXT_ROUND_START': '', 'buildNominationPartNameAttempt': '\nThis must to be called every time the Partial Nomination Menu will be show to the player for the\nfirst time, i.e., when this is called from the forward cmd_say(1) handler.', 'restoreRoundEnding': '', 'DEBUG_LEVEL_UNIT_TEST_NORMAL': '', 'client_death_event': '\nThis event is not registered by mp_fraglimitCvarSupport(0) if the game does not support the\n`mp_fraglimit` cvar natively or if the `cvar_fragLimitSupport` virtual support is not enabled.', 'computeVoteMenuFooter': '\nBased on how many seconds are remaining, calculates the vote menu `Time Remaining` seconds. It\nalso displays that the voting has ended when the timer is negative, however this option seems to\nbe deprecated. Therefore the actual `GAL_VOTE_ENDED` is displayed by display_menu_dirt(5).', 'vote_display': "\nThis function is called with the correct player id only after the player voted or by the\n'tryToShowTheVotingMenu(0)' function call.", 'MAX_FILE_PATH_LENGHT': '', 'test_mapGetNext_case': "\nThis is a general test handler for the function 'map_getNext(4)'.\n\n@param testMapListArray an Array with a map-cycle for loading\n@param currentMap an string as the current map\n@param nextMapAim an string as the desired next map\n@param mapIndexAim the desired next map index", 'start_voting_by_frags': '', 'voteMapMenuBuilder': '\nThis is the main `say galmenu` builder called from the cmd_say(1) handler.', 'loadMapsFolderDirectoryTrie': '', 'IS_MAP_MAPCHANGE_FRIENDLY_FIRE': '', 'cleanTheUnitTestsData': '\nClean old Unit Tests execution run data.', 'client_putinserver': '', 'IS_BY_WINLIMIT': '', 'IS_VOTE_IN_PROGRESS': '', 'plugin_init': '\nCalled just after server activation.\n\nGood place to initialize most of the plugin, such as registering\ncvars, commands or forwards, creating data structures for later use, or\ngenerating and loading other required configurations.', 'configureTheExtensionOption': '\nTo allow show the extension option as `Stay Here` and `Extend` and to set the end voting type.', 'configureSpecificGameModFeature': '\nOn the first server start, we do not know whether the color chat is allowedenabled. This is due\nthe register register_dictionary_colored(1) to be called on plugin_init(0) and the settings being\nloaded only at plugin_cfg(0).', 'cmd_maintenanceMode': '\nThe command `gal_maintenance_mode`.', 'sayFragsLeft': '', 'saveGameEndingTypeContext': '', 'test_populateListOnSeries_build': '\nTo prepare the test_populateListOnSeries_loada(0) tests files and settings.', 'helper_mapFileListLoadReplace': '\nTo create a map file list on the specified file path on the disk.\n\n@param replace true if is to replace `[` `]` by `{` `}`, false if not.\n@param mapFileListPath the path to the mapFileList.\n@param mapFileList the variable number of maps.', 'intermission_hold': '', 'saveCurrentTestsTimeStamp': '\nSave a time-stamp when the Unit Tests started to run.', 'IS_MAP_EXTENSION_ALLOWED': '\nDetermine whether there will be a alternate vote option as `Stay Here``Extend Map` or not.\n\n@return true when the map extension is allowed right now, false otherwise', 'TRY_TO_CLEAN': '\nGeneral handler to assist object property applying and keep the code clear. This only need\nto be used with cleaners and creators handlers.\n\n@param objectHandler the object handler to be called for cleaning.\n@param objectIndentifation the object identification number to be used.\n@param objectHandlerCreator the object handler to be called for creation.', 'percent': '', 'MAX_STANDARD_MAP_COUNT': '', 'GET_CURRENT_BASED_DAY': '\nCompute how many days are elapsed since 1st January of 2000.\n\n@param currentDayInteger the current day from this year (1-366).\n@param currentYearInteger the current year (2016).', 'MAX_MESSAGE_LENGHT': '', 'createPlayerNominationKey': '', 'getMapNameIndex': '', 'try_to_manage_map_end': '', 'addMenuMoreBackExitOptions': '', 'IS_THE_ROUND_AVERAGE_TIME_SHORT': '\nWhen there are some rounds played and the round average time is just smaller than the to the vote\ntotal time, we need to try start the voting at the round start on round before the actual point as\nthe voting will extend from one round to the other round.\n\n@return true when the round average time is just smalllowshort, false otherwise', 'runTheServerMapCrashSearch': '', 'getUniqueRandomIntegerBasic': "\nGet unique random positive numbers between 0 until 31. If the `maximum`'s parameter value\nprovided is greater than 31, the generated numbers will not be unique. The range is:\n\n0 <= return value <= maximum <= 31\n\n@param sequence a random positive number to reset the current unique return values.\n@param maximum the upper bound limit, i.e., the maximum value to be sorted.\n\n@return -1 when there are not new unique positive numbers to return.", 'map_announceNomination': '', 'updateNominationsForwardSearch': '', 'loadTheNextMapFile': '', 'resetVoteTypeGlobals': '', 'configureTheRunoffVoting': '', 'tryToSetGameModCvarString': '', 'prevent_map_change': '\nThis need to prevent the map changing at least for the voting time plus 1 minutes when the\n`gal_endonround` feature is enabled and blocking the map end. This is because it allows the\nvoting to start very close, may be even after this blocker function to be called.', 'cancel_player_vote': '', 'restoreServerCvarsFromTesting': '\nThis is executed after all tests executions, to restore the server variables changes.', 'LISTMAPS_LAST_MAP': '', 'IS_NEW_ROUND_EVENT_SUPPORTED': '\nAccordingly to `https://wiki.alliedmods.net/Half-life_1_game_events#HLTV`, only some mods support\nthis game event.', 'destroy_two_dimensional_array': '\nSame as TRY_TO_APPLY(2), but the second argument must to be a two Dimensional Dynamic Array.\n\n@param outerArray a Dynamic Array within several Dynamic Arrays.\n@param isToDestroyTheOuterArray whether to destroy or clear the `outerArray` provided.', 'sayTimeLeftOn': '', 'computeTheTestElapsedTime': "\nCalculates how much time took to run the Unit Tests. For this to work, the stock\n'saveCurrentTestsTimeStamp(0)' must to be called on the beginning of the tests.\n\n@return seconds how much seconds are elapsed, or -1 on when the time-stamp is null.", 'delete_users_menus_care': '', 'howManyRoundsAreRemaining': '\nThis function choose which round round ending type it is and count how many rounds there are.\nThe types are:\n\n1) Per rounds.\n2) Is by mp_winlimit expiration proximity?\n3) Is by mp_maxrounds expiration proximity?\n4) Per minutes.', 'debugIsToLoadNextWhiteListGroup': '', 'HUD_CHANGELEVEL_COUNTDOWN': '', 'map_isTooRecent': '', 'test_setCorrectMenuPage': '\nCreate one case test for the stock setCorrectMenuPage(4) based on its parameters passed\nby the test_setCorrectMenuPage_load(0) loader function.', 'noLongerIsAnEarlyVoting': '', 'loadLangFiles': '', 'announceVoteBlockedMap': '\nAnnounce the Minplayers-Whitelist blocked maps.\n\n@param mapToAnnounce a map which was blocked.\n@param blockedMapsBuffer the output string to be printed.\n\n@note It does not immediately print the called map. The output occurs when the buffer is full.', 'test_whatGameEndingTypeIt_load': '\nTo test the stock whatGameEndingTypeItIs(0).', 'startTheRunoffVoting': '\nAny voting not started by `cvar_endOfMapVoteStart`, `cvar_endOnRound` or ending limit expiration,\nis a forced voting.', 'test_GET_MAP_INFO_load': '\nTests if menu maps informations are being properly loaded into a normalusual map voting menu.', 'inicializeEmptyCycleFeature': '\nInicializes the empty cycle server feature at map starting.', 'setDisplaying': '', 'str_break': '', 'test_endOfMapVotingStart_case4': '\nTests if the end map voting is starting automatically at the end of map due time limit expiration.', 'INSERT_COLOR_TAGS': "\nConvert colored strings codes '!g for green', '!y for yellow', '!t for team'.\n\n@param string[] a string pointer to be converted.", 'removeMapFromTheVotingMenu': '', 'try_to_start_the_RTV': '\nDetermine if there have been enough rocks for a vote yet.\n\n@param rocksNeeded how many RTVs are necessaryrequired to start the voting\n@param silent whether or not to announce by chat how many RTVs are remaining to start the voting', 'IS_TO_ENABLE_RE_HLDS_RE_AMXMODX_SUPPORT': '\nChange this value from 1 to 0, to disable Re-HLDS and Re-Amx Mod X support. If you disable the\nsupport, and you are using the Re-HLDS and Re-Amx Mod X, you server may crash.', 'cacheCvarsValuesIgnored': '\nSome cvars are not registered right after the settings are loaded because these cvars are\nsettings dependents.', 'show_all_players_nominations': '', 'loadRunOffVoteChoices': '', 'handleOneMapAtSecondPosition': '\nThis case is triggered when there is 1 map at the first and another on the second position.', 'loadMapFileListTrie': '', 'saveServerCvarsForTesting': "\nEvery time a cvar is changed during the tests, it must be saved here to a global test variable\nto be restored at the 'restoreServerCvarsFromTesting(0)', which is executed at the end of all\ntests execution.\n\nThis is executed before the first rest run.", 'delete_user_menu': '', 'register_dictionary_colored': '\nConnorMcLeod\'s [Dyn Native] ColorChat v0.3.2 (04 jul 2013) register_dictionary_colored function:\n<a href="https://forums.alliedmods.net/showthread.php?p=851160">ColorChat v0.3.2</a>\n\n@param dictionaryFile the dictionary file name including its file extension.', 'openTheVoteMapActionMenu': "\nThis set up the `say galmenu` final admin's choice builder.", 'IS_MAP_MAPCHANGE_DROP_WEAPONS': '', 'showRecentMapsListMenu': '\nBuild and displays the `say recentmaps` menu.', 'test_unnominatedDisconnected': "\nCreate some nominations the force to remove them by the 'unnominatedDisconnectedPlayer(1)',\nfor manual testing.", 'clearTheVotingMenu': '', 'saveRoundEnding': '', 'configureTheNextMapPlugin': '\nWhen we are setting the `possibleNextMapPosition` to 0, we are restarting the map cycle from its\nfirst position. This happens every time we complete a map cycle full loop.\n\nHowever, this function is only called at the first time the server started, so not setting anything\nimplies on already starting the map cycle from its first position.', 'periodicTimeLeftHandleChecking': '', 'test_GET_MAP_NAME': '\nCreate one case test for the macros GET_MAP_NAME(3) and GET_MAP_INFO(3), based on its parameters\npassed by the test_GET_MAP_NAME_load(0) loader function.', 'LISTMAPS_USERID': '', 'is_map_valid_bsp_check': '\nIf the IS_MAP_VALID check failed, check the end of the string for the `.bsp` extension.', 'RTV_CMD_EXTENSION_WAIT_DISABLE': '', 'test_RTVAndUnRTV_load': '\nTo test the RTV feature.', 'loadWhiteListFileFromFile': '', 'DEBUG_LEVEL_FAKE_VOTES': '', 'fillThePartialNominationMenu': '\nThis menu is pretty expensive and cannot let be running free. If the server has too much maps,\nthis will cause lag if this task is not split along the time when a single menu page is not filled\nuntil the `MAX_NOM_MATCH_COUNT`.', 'vote_addNominations': '', 'handleMoreThanTwoMapsAtFirst': '\nThis case is triggered when there are more than 1 map at the first position.\n\nIt also implements the feature on: https://github.com/addonszz/Galileo/issues/33, for the cvar\n`cvar_runoffMapchoices` on this case.', 'VOTE_TIME_SEC': '', 'setLastEmptyCycleMap': '', 'reshowTheVoteMenu': '', 'restoreOriginalServerMaxSpeed': '', 'test_configureTheNextMap_loade': '\nTest the cvar `gal_srv_move_cursor` set as 10.', 'displayRemainingTime': '', 'test_resetRoundsScores_loader': '\nLoad the test to all cvars on range.\n\n@param defaultCvarValue the default game cvar value to be used.\n@param elapsedValue an elapsed game integer value.\n@param defaultLimiterValue the default limiter cvar value to be used.\n@param aimResult the expected result after the operation to complete.', 'configureTheAlternateSeries': '', 'handleVoteMapActionMenu': "\nThis is the `say galmenu` final admin's choice handler.", 'test_loadNextWhiteListGroupOpen': "\nTo call the general test handler 'test_isToLoadBlacklist_case(3)' using test scenario cases.", 'RTV_CMD_DYNAMIC': '', 'map_isInMenu': '', 'tryToSetGameModCvarNum': '', 'MAX_LONG_STRING': '\nCommon strings sizes used around the plugin.', 'IS_RTV_VOTE': '', 'cmd_nominations': '\nThe command `say nominations`.', 'is_to_block_RTV': '', 'MAP_CHANGES_AT_THE_CURRENT_ROUND_END': '', 'endRoundWatchdog': '\nCalled on the round_end_event(). This is the place to change the map when the variables\n`g_isThePenultGameRound` and `g_isTheLastGameRound` are set to true.', 'test_mapGetNext_cases': "\nTo call the general test handler 'test_mapGetNext_case(4)' using test scenario cases.", 'MIN_INTEGER': '', 'switchEndingGameType': '', 'isAllowedValidMapByTheUnitTests': '\nWhen the global variable `g_test_isToUseStrictValidMaps` is set to, this looks for maps as being\nvalid from the global Trie `g_test_strictValidMapsTrie`.\n\nThis is useful to create any map environment you want to perform the Unit Testing. See the\nfunction helper_loadStrictValidMapsTrie() to load the global Trie `g_test_strictValidMapsTrie`\nwith the maps you want to be valid.', 'IS_TO_RTV_NOT_ALLOW_STAY': '', 'restoreModeFlagFilePath': '\nAfter the settings being loaded, the `gal_mapcyclefile` setting will be overridden and the crash\nsearch will be broken. Then this function restores its correct value.', 'MAX_PLAYERS': '\nDefines the maximum players number, when it is not specified for olders AMXX versions.', 'test_populateListOnSeries': '\nCreate one case test for the stock map_populateListOnSeries(3) based on its parameters passed\nby the test_populateListOnSeries_loada(0) loader function.', 'getRecentMapsAndWhiteList': '', 'AFTER_READ_MAPCYCLE': '', 'team_win_event': '', 'show_my_nominated_maps': '', 'unnominatedDisconnectedPlayer': '', 'addMenuMoreBackButtons': '', 'RTV_CMD_STANDARD': '', 'MAX_PREFIX_SIZE': '', 'areWeRunningAnAlternateSeries': '\nProperly set the map `possibleNextMap` when we are on an valid alternate map series.\n\nReturns true when the current playing map is out of the range of the saved map cycle range and\nrespecting the `IS_TO_LOAD_EXPLICIT_MAP_SERIES` start map rule.\n\nReturns false when the current playing map is inside of the range of the saved map cycle or\nis not respecting the `IS_TO_LOAD_EXPLICIT_MAP_SERIES` start map rule.', 'cancelVoting': '\nImmediately stops any vote in progress. It keeps the `IS_VOTE_OVER` flag to maintain any older\nvoting valid after the cancellation.', 'test_RTVAndUnRTV': '\nCreate one case test for the RTV feature based on its parameters passed by the\ntest_RTVAndUnRTV_load(0) loader function.', 'helper_mapFileListLoadReplace2': '\nTo create a map file list on the specified file path on the disk.\n\n@param replace true if is to replace `[` `]` by `{` `}`, false if not.\n@param mapFileListPath the path to the mapFileList.\n@param mapFileListArray an Dynamic Array within a variable number of maps.', 'getNextMapName': '', 'test_configureTheNextMap_case': '\nCreate one case test for the stock configureTheNextMapSetttings(1) based on its parameters passed\nby the test_configureTheNextMap(0) loader function.\n\nWhen the last played map `lastMap` is equal to to `cmA`, the `posB` will be decremented by 1 unit because\nthis situation only happens at map restart, and as here we are readding the the `posE` which points\nto the next map of the current next map, we need to decrement it to keep the next map from cycling\nthrough all the map cycle just because the server admin is doing the `restart` command.\n\nThe `posE` variable points to the next map of the next map of the current map `cmA`.\n\n@param cmA current map name after to call saveCurrentMapCycleSetting(3).\n@param npE next map name expected after to call saveCurrentMapCycleSetting(3) [Expected Next Map].\n@param posE the map cycle position after to call saveCurrentMapCycleSetting(3) [Expected Position].', 'sayTimeLeft': '', 'blockNewVotingToStart': '\nThere are several folks trying to start the voting, but they are blocked when the voting status is\nset as over, however when the extension option wins, the vote status is not set as over to allow a\nnew voting when the extension time to expires.\n\nTo fix the voting starting right again after the map extension, blocking it by 2 minutes should be\nbig enough to not block the new voting after the map extension time expires.', 'IS_THE_ROUND_TIME_TOO_BIG': '\nVerifies if the round time is too big. If the map time is too big or near zero, makes not sense\nto wait to start the map voting and will probably not to start the voting.\n\n@return true when the round time is too biglongtall, false otherwise', 'isPlayerAbleToSeeTheVoteMenu': '', 'test_loadVoteChoices_check': '\n@see test_loadVoteChoices_case(3)', 'timeRemain': '', 'test_resetRoundsScores_cases': "\nTo call the general test handler 'test_resetRoundsScores_case(4)' using test scenario cases.", 'saveEndGameLimits': '', 'IS_MAP_VALID_BSP': '\nAccept a map as valid, even when they end with `.bsp`.\n\n@param mapName the map name to check\n@return true when the `mapName` is a valid engine map, false otherwise', 'HIDE_AFTER_USER_VOTE_NONE_OPTION': '', 'client_authorized': '', 'MAX_MAPS_TO_SHOW_ON_MAP_POPULATE_LIST': '\nWhen the debug mode `DEBUG_LEVEL` is enabled, the map_populateList(4) will show up to this maps\nloaded from the server.', 'END_OF_MAP_VOTE_NO_ANNOUNCEMENT': '', 'computeVotes': '', 'configure_last_round_HUD': ''}
        , doc_list )















        self.assertEqual(
            {'toShowTheMapStayHud(3) \tgalileo.sma - stock': 'toShowTheMapStayHud(${1:const lang1[]}, ${2:const lang2[]}, ${3:const lang3[]})', 'cmd_cancelVote(3) \tgalileo.sma - public': 'cmd_cancelVote(${1:player_id}, ${2:level}, ${3:cid})', 'delete_users_menus_care(0) \tgalileo.sma - public': 'delete_users_menus_care()', 'SHOW_STATUS_NEVER \tgalileo.sma - define: 0': 'SHOW_STATUS_NEVER', 'addMenuMoreBackButtons(6) \tgalileo.sma - stock': 'addMenuMoreBackButtons(${1:menu}, ${2:player_id}, ${3:menuGeneralItem[]}, ${4:bool:isToEnableMoreButton}, ${5:bool:isToEnableBackButton}, ${6:itemsCount})', 'startVoteMapVoting(1) \tgalileo.sma - stock': 'startVoteMapVoting(${1:player_id})', 'debug_vote_map_selection(10) \tgalileo.sma - stock': 'debug_vote_map_selection(${1:choiceIndex}, ${2:mapName[]}, ${3:useWhitelistOutBlock}, ${4:isWhiteListOutBlock}, ${5:useEqualiCurrentMap}, ${6:unsuccessfulCount}, ${7:currentBlockerStrategy}, ${8:useIsPrefixInMenu}, ${9:useMapIsTooRecent}, ${10:Trie:blockedFillersMapTrie})', 'MAX_SHORT_STRING \tgalileo.sma - define: 64': 'MAX_SHORT_STRING', 'cvar_isEndMapCountdown\t galileo.sma': 'cvar_isEndMapCountdown', 'IS_BY_WINLIMIT \tgalileo.sma - define: 8': 'IS_BY_WINLIMIT', 'SOUND_GET_READY_TO_CHOOSE \tgalileo.sma - define: 1': 'SOUND_GET_READY_TO_CHOOSE', 'g_totalTerroristsWins\t galileo.sma': 'g_totalTerroristsWins', 'g_partialMatchFirstPageItems\t galileo.sma': 'g_partialMatchFirstPageItems', 'getNextMapByPosition(5) \tgalileo.sma - stock': 'getNextMapByPosition(${1:Array:mapcycleFileListArray}, ${2:nextMapName[]}, ${3:&nextMapCyclePosition}, ${4:bool:isUseTheCurrentMapRule=true}, ${5:bool:isToIncrementThePosition=true})', 'test_nomCleaning\t galileo.sma': 'test_nomCleaning', 'cvar_recentNomMapsAllowance\t galileo.sma': 'cvar_recentNomMapsAllowance', 'g_originalTimelimit\t galileo.sma': 'g_originalTimelimit', 'PERIODIC_CHECKING_INTERVAL \tgalileo.sma - define: 15': 'PERIODIC_CHECKING_INTERVAL', 'g_lastRoundCountdown\t galileo.sma': 'g_lastRoundCountdown', 'ANNOUNCE_CHOICE_ADMINS \tgalileo.sma - define: 2': 'ANNOUNCE_CHOICE_ADMINS', 'g_showVoteStatusType\t galileo.sma': 'g_showVoteStatusType', 'test_configureTheNextMap_loadi(1) \tgalileo.sma - stock': 'test_configureTheNextMap_loadi(${1:s})', 'MUTE_MESSAGES_SPAMMING \tgalileo.sma - define: 1': 'MUTE_MESSAGES_SPAMMING', 'g_coloredChatPrefix\t galileo.sma': 'g_coloredChatPrefix', 'cvar_serverStartAction\t galileo.sma': 'cvar_serverStartAction', 'g_configsDirPath\t galileo.sma': 'g_configsDirPath', 'g_votingMapInfos\t galileo.sma': 'g_votingMapInfos', 'test_GET_MAP_INFO(3) \tgalileo.sma - stock': 'test_GET_MAP_INFO(${1:requiredMap[]}, ${2:requiredInfo[]}, ${3:bool:toBe})', 'loadWhiteListFileFromFile(2) \tgalileo.sma - stock': 'loadWhiteListFileFromFile(${1:&Array:whitelistArray}, ${2:whiteListFilePath[]})', 'last_round_countdown(0) \tgalileo.sma - public': 'last_round_countdown()', 'TD_SHOW_SPEAK_VALUES_BELOW \tgalileo.sma - const: 16': 'TD_SHOW_SPEAK_VALUES_BELOW', 'g_voteNorPlayerFillerPathsArray\t galileo.sma': 'g_voteNorPlayerFillerPathsArray', 'g_isDayOfDefeat\t galileo.sma': 'g_isDayOfDefeat', 'nominationAttemptWithNameHook(1) \tgalileo.sma - public': 'nominationAttemptWithNameHook(${1:parameters[]})', 'map_nominate(2) \tgalileo.sma - stock': 'map_nominate(${1:player_id}, ${2:mapIndex})', 'helper_mapFileListLoadReplace(3) \tgalileo.sma - stock': 'helper_mapFileListLoadReplace(${1:bool:replace}, ${2:mapFileListPath[]}, ${3:...})', 'g_isGameEndingTypeContextSaved\t galileo.sma': 'g_isGameEndingTypeContextSaved', 'printUntilTheNthLoadedMap(2) \tgalileo.sma - stock': 'printUntilTheNthLoadedMap(${1:mapIndex}, ${2:mapName[]})', 'cvar_endOfMapVote\t galileo.sma': 'cvar_endOfMapVote', 'MAX_NON_SEQUENCIAL_MAPS_ON_THE_SERIE \tgalileo.sma - define: 3': 'MAX_NON_SEQUENCIAL_MAPS_ON_THE_SERIE', 'g_maxRoundsNumber\t galileo.sma': 'g_maxRoundsNumber', 'test_voteWhiteListMapFilePath\t galileo.sma': 'test_voteWhiteListMapFilePath', 'LISTMAPS_LAST_MAP \tgalileo.sma - define: 1': 'LISTMAPS_LAST_MAP', 'mp_fraglimitCvarSupport(0) \tgalileo.sma - stock': 'mp_fraglimitCvarSupport()', 'loadMapsFolderDirectoryTrie(2) \tgalileo.sma - stock': 'loadMapsFolderDirectoryTrie(${1:directoryDescriptor}, ${2:Trie:fillerMapTrie})', 'cvar_nomPrefixes\t galileo.sma': 'cvar_nomPrefixes', 'sayTimeLeftOn(1) \tgalileo.sma - stock': 'sayTimeLeftOn(${1:id})', 'generateGameCrashActionFilePath(2) \tgalileo.sma - stock': 'generateGameCrashActionFilePath(${1:gameCrashActionFilePath[]}, ${2:charsmaxGameCrashActionFilePath})', 'determineTheVotingFirstChoices(4) \tgalileo.sma - stock': 'determineTheVotingFirstChoices(${1:firstPlaceChoices[]}, ${2:secondPlaceChoices[]}, ${3:&numberOfMapsAtFirstPosition}, ${4:&numberOfMapsAtSecondPosition})', 'MAX_MAPNAME_LENGHT \tgalileo.sma - define: 64': 'MAX_MAPNAME_LENGHT', 'show_delayed_results(0) \tgalileo.sma - public': 'show_delayed_results()', '__g_getMapNameInputLine\t galileo.sma': '__g_getMapNameInputLine', 'test_nomQtyUsed\t galileo.sma': 'test_nomQtyUsed', 'IS_WHITELIST_ENABLED(1) \tgalileo.sma - define: ( get_pcvar_num( cvar_whitelistMinPlayers ) == 1 || get_real_players_number() < get_pcvar_num( cvar_whitelistMinPlayers ) )': 'IS_WHITELIST_ENABLED(${1:param1})', 'clearTheVotingMenu(0) \tgalileo.sma - stock': 'clearTheVotingMenu()', 'compute_the_RTV_vote(1) \tgalileo.sma - stock': 'compute_the_RTV_vote(${1:player_id})', 'g_winLimitContextSaved\t galileo.sma': 'g_winLimitContextSaved', 'test_mapGetNext_cases(0) \tgalileo.sma - stock': 'test_mapGetNext_cases()', 'g_totalRoundsPlayed\t galileo.sma': 'g_totalRoundsPlayed', 'TRY_TO_APPLY(2) \tgalileo.sma - define: { LOG( 128, "I AM ENTERING ON TRY_TO_APPLY(2) objectIndentifation: %d", %2 ) if( %2 ) { %1( %2 ); } }': 'TRY_TO_APPLY(${1:param1}, ${2:param2})', 'test_endOfMapVotingStop_case5(1) \tgalileo.sma - public': 'test_endOfMapVotingStop_case5(${1:s})', 'NOMINATION_FIRST_PAGE_ITEMS_COUNTING \tgalileo.sma - define: 1': 'NOMINATION_FIRST_PAGE_ITEMS_COUNTING', 'cvar_rtvWaitFrags\t galileo.sma': 'cvar_rtvWaitFrags', 'IS_NEW_ROUND_EVENT_SUPPORTED(1) \tgalileo.sma - define: ( g_isColorChatSupported || g_isDayOfDefeat )': 'IS_NEW_ROUND_EVENT_SUPPORTED(${1:param1})', 'howManyRoundsAreRemaining(2) \tgalileo.sma - stock': 'howManyRoundsAreRemaining(${1:secondsRemaining}, ${2:GameEndingType:whatGameEndingType})', 'moveTheCursorToTheLastMap(3) \tgalileo.sma - stock': 'moveTheCursorToTheLastMap(${1:Array:mapcycleFileListArray}, ${2:const defaultCurrentMapNameClean[]}, ${3:&defaultNextMapCyclePosition})', 'g_rockedVoteCount\t galileo.sma': 'g_rockedVoteCount', 'cmd_listrecent(1) \tgalileo.sma - public': 'cmd_listrecent(${1:player_id})', 'g_fragLimitNumber\t galileo.sma': 'g_fragLimitNumber', 'g_isGameFinalVoting\t galileo.sma': 'g_isGameFinalVoting', 'MAPFILETYPE_GROUPS \tgalileo.sma - define: 2': 'MAPFILETYPE_GROUPS', 'setTheNextMapCvarFlag(1) \tgalileo.sma - stock': 'setTheNextMapCvarFlag(${1:nextMapName[]})', 'ARE_WE_RUNNING_UNIT_TESTS \tgalileo.sma - define: ( DEBUG_LEVEL & ( DEBUG_LEVEL_UNIT_TEST_NORMAL | DEBUG_LEVEL_MANUAL_TEST_START | DEBUG_LEVEL_UNIT_TEST_DELAYED ) )': 'ARE_WE_RUNNING_UNIT_TESTS', 'vote_display(1) \tgalileo.sma - public': 'vote_display(${1:argument[ 2 ]})', 'test_negativeRTVValues(2) \tgalileo.sma - stock': 'test_negativeRTVValues(${1:playerToDisconnect}, ${2:aimRtvCount})', 'g_original_sv_maxspeed\t galileo.sma': 'g_original_sv_maxspeed', 'START_VOTING_BY_MIDDLE_ROUND_DELAY(1) \tgalileo.sma - define: set_task( float( ROUND_VOTING_START_SECONDS_DELAY() ), %1, TASKID_START_VOTING_DELAYED );': 'START_VOTING_BY_MIDDLE_ROUND_DELAY(${1:param1})', 'cvar_listmapsPaginate\t galileo.sma': 'cvar_listmapsPaginate', 'openTheVoteMapActionMenu(0) \tgalileo.sma - stock': 'openTheVoteMapActionMenu()', 'loadTheWhiteListFeature(0) \tgalileo.sma - stock': 'loadTheWhiteListFeature()', 'handleVoteMapActionMenu(2) \tgalileo.sma - public': 'handleVoteMapActionMenu(${1:player_id}, ${2:pressedKeyCode})', 'cmd_maintenanceMode(3) \tgalileo.sma - public': 'cmd_maintenanceMode(${1:player_id}, ${2:level}, ${3:cid})', 'cvar_rtvRocks\t galileo.sma': 'cvar_rtvRocks', 'loadOnlyNominationVoteChoices(0) \tgalileo.sma - stock': 'loadOnlyNominationVoteChoices()', 'isAllowedValidMapByTheUnitTests(1) \tgalileo.sma - stock': 'isAllowedValidMapByTheUnitTests(${1:mapName[]})', 'MAX_PLAYERS \tgalileo.sma - define: 32': 'MAX_PLAYERS', 'IS_END_OF_MAP_VOTING_GOING_ON(1) \tgalileo.sma - define: ( g_voteStatus & ( IS_VOTE_IN_PROGRESS | IS_VOTE_OVER ) )': 'IS_END_OF_MAP_VOTING_GOING_ON(${1:param1})', 'HUD_CHANGELEVEL_ANNOUNCE \tgalileo.sma - define: 4': 'HUD_CHANGELEVEL_ANNOUNCE', 'test_announceVoteBlockedMap_c(0) \tgalileo.sma - stock': 'test_announceVoteBlockedMap_c()', 'g_dummy_value\t galileo.sma': 'g_dummy_value', 'g_TimeSet\t galileo.sma': 'g_TimeSet', 'test_configureTheNextMap_loadh(1) \tgalileo.sma - stock': 'test_configureTheNextMap_loadh(${1:s})', 'writeRecentMapsBanList(1) \tgalileo.sma - stock': 'writeRecentMapsBanList(${1:loadedMapsCount})', 'is_map_valid_bsp_check(1) \tgalileo.sma - stock': 'is_map_valid_bsp_check(${1:mapName[]})', 'startVotingByGameEngineCall(0) \tgalileo.sma - public': 'startVotingByGameEngineCall()', 'test_RTVAndUnRTV_load(0) \tgalileo.sma - stock': 'test_RTVAndUnRTV_load()', 'noLongerIsAnEarlyVoting(0) \tgalileo.sma - stock': 'noLongerIsAnEarlyVoting()', 'test_nominateAndUnnominate_load(0) \tgalileo.sma - stock': 'test_nominateAndUnnominate_load()', 'g_whitelistArray\t galileo.sma': 'g_whitelistArray', 'cvar_isToStopEmptyCycle\t galileo.sma': 'cvar_isToStopEmptyCycle', 'SOUND_TIME_TO_CHOOSE \tgalileo.sma - define: 4': 'SOUND_TIME_TO_CHOOSE', 'print_all_tests_executed(1) \tgalileo.sma - stock': 'print_all_tests_executed(${1:bool:isToPrintAllTests = true})', 'TASKID_MAP_CHANGE \tgalileo.sma - enum': 'TASKID_MAP_CHANGE', 'cvar_voteMidPlayers\t galileo.sma': 'cvar_voteMidPlayers', 'color_chat(3) \tgalileo.sma - stock': 'color_chat(${1:const player_id}, ${2:const lang_formatting[]}, ${3:any:...})', 'cvar_nextMapChangeAnnounce\t galileo.sma': 'cvar_nextMapChangeAnnounce', 'helper_mapFileListLoadReplace2(3) \tgalileo.sma - stock': 'helper_mapFileListLoadReplace2(${1:bool:replace=false}, ${2:mapFileListPath[]}, ${3:Array:mapFileListArray})', 'startNonForcedVoting(0) \tgalileo.sma - public': 'startNonForcedVoting()', 'VOTE_WAIT_FOR_ROUND_END \tgalileo.sma - define: 2': 'VOTE_WAIT_FOR_ROUND_END', 'get_intermission_chattime(0) \tgalileo.sma - stock': 'get_intermission_chattime()', 'g_extendmapAllowStayType\t galileo.sma': 'g_extendmapAllowStayType', 'IS_TO_ENABLE_RE_HLDS_RE_AMXMODX_SUPPORT \tgalileo.sma - define: 1': 'IS_TO_ENABLE_RE_HLDS_RE_AMXMODX_SUPPORT', 'printDynamicArrayMaps(2) \tgalileo.sma - stock': 'printDynamicArrayMaps(${1:Array:populatedArray}, ${2:debugLevel})', 'computeUndoButton(5) \tgalileo.sma - stock': 'computeUndoButton(${1:player_id}, ${2:bool:isToShowUndo}, ${3:bool:isVoteOver}, ${4:noneOption[]}, ${5:noneOptionSize})', 'g_chooseMapQuestionMenuId\t galileo.sma': 'g_chooseMapQuestionMenuId', 'computeVotes(0) \tgalileo.sma - public': 'computeVotes()', 'cvar_voteDuration\t galileo.sma': 'cvar_voteDuration', 'HIDE_AFTER_USER_VOTE_NONE_OPTION \tgalileo.sma - define: 0': 'HIDE_AFTER_USER_VOTE_NONE_OPTION', 'test_registerSeriesNaming(2) \tgalileo.sma - stock': 'test_registerSeriesNaming(${1:seriesName[]}, ${2:newSeries = 0})', 'test_loadCurrentBlackList_load(1) \tgalileo.sma - stock': 'test_loadCurrentBlackList_load(${1:bool:replace})', 'IS_MAP_EXTENSION_ALLOWED(1) \tgalileo.sma - define: ( ( g_isMapExtensionAllowed && g_isGameFinalVoting ) || ( g_isExtendmapAllowStay && !g_isGameFinalVoting ) )': 'IS_MAP_EXTENSION_ALLOWED(${1:param1})', 'g_arrayOfMapsWithVotesNumber\t galileo.sma': 'g_arrayOfMapsWithVotesNumber', 'cvar_nomQtyUsed\t galileo.sma': 'cvar_nomQtyUsed', 'TASK_TIMEREMAIN_SHORT \tgalileo.sma - const: 8648458': 'TASK_TIMEREMAIN_SHORT', 'debugMesssageLogger(3) \tgalileo.sma - stock': 'debugMesssageLogger(${1:const mode}, ${2:const message[] = ""}, ${3:any:...})', 'cvar_nomMinPlayersControl\t galileo.sma': 'cvar_nomMinPlayersControl', 'test_getUniqueRandomIntBasic(2) \tgalileo.sma - stock': 'test_getUniqueRandomIntBasic(${1:max_value}, ${2:Array:holder = Invalid_Array})', 'IS_EARLY_VOTE \tgalileo.sma - define: 16': 'IS_EARLY_VOTE', 'g_isToShowVoteCounter\t galileo.sma': 'g_isToShowVoteCounter', 'isAValidMap(1) \tgalileo.sma - stock': 'isAValidMap(${1:mapname[]})', 'saveEndGameLimits(0) \tgalileo.sma - stock': 'saveEndGameLimits()', 'rtv_remind(1) \tgalileo.sma - public': 'rtv_remind(${1:param})', 'cvar_voteMinimun\t galileo.sma': 'cvar_voteMinimun', 'test_loadCurrentBlacklistMapsCl(2) \tgalileo.sma - stock': 'test_loadCurrentBlacklistMapsCl(${1:s}, ${2:bool:isBlackList})', 'createMapFileFromAllServerMaps(2) \tgalileo.sma - stock': 'createMapFileFromAllServerMaps(${1:player_id}, ${2:mapFilePath[]})', 'SERVER_GAME_CRASH_ACTION_RATIO_DIVISOR \tgalileo.sma - define: 2': 'SERVER_GAME_CRASH_ACTION_RATIO_DIVISOR', 'test_configureTheNextMap_loadf(1) \tgalileo.sma - stock': 'test_configureTheNextMap_loadf(${1:s})', 'test_negativeRTVValues_load(0) \tgalileo.sma - stock': 'test_negativeRTVValues_load()', 'addExtensionOption(6) \tgalileo.sma - stock': 'addExtensionOption(${1:player_id}, ${2:copiedChars}, ${3:voteStatus[]}, ${4:voteStatusLenght}, ${5:menuKeys}, ${6:bool:isToAddResults = true})', 'TASKID_NOMINATION_PARTIAL \tgalileo.sma - enum': 'TASKID_NOMINATION_PARTIAL', 'IS_MAP_VALID(1) \tgalileo.sma - define: ( IS_MAP_VALID_BSP( %1 ) )': 'IS_MAP_VALID(${1:param1})', 'test_unnominatedDisconnected(1) \tgalileo.sma - stock': 'test_unnominatedDisconnected(${1:player_id})', 'isHandledGameCrashAction(1) \tgalileo.sma - public': 'isHandledGameCrashAction(${1:&startAction})', 'test_registerTest(0) \tgalileo.sma - stock': 'test_registerTest()', 'IS_TO_ADD_VOTE_MENU_UNDO_BUTTON(1) \tgalileo.sma - define: ( ( player_id > 0 ) && ( g_voteShowNoneOptionType == CONVERT_NONE_OPTION_TO_CANCEL_LAST_VOTE ) && ( g_isPlayerVoted[ player_id ] ) && ( !g_isPlayerCancelledVote[ player_id ] ) )': 'IS_TO_ADD_VOTE_MENU_UNDO_BUTTON(${1:param1})', 'SERVER_START_CURRENTMAP \tgalileo.sma - define: 1': 'SERVER_START_CURRENTMAP', 'test_galileo_lastmap\t galileo.sma': 'test_galileo_lastmap', 'cvar_mp_chattime\t galileo.sma': 'cvar_mp_chattime', 'VOTE_MIDDLE_PLAYERS_REQUIRED \tgalileo.sma - define: 2': 'VOTE_MIDDLE_PLAYERS_REQUIRED', 'printTheUnitTestsResults(0) \tgalileo.sma - stock': 'printTheUnitTestsResults()', 'configureTheVotingMenus(0) \tgalileo.sma - stock': 'configureTheVotingMenus()', 'cvar_whitelistType\t galileo.sma': 'cvar_whitelistType', 'g_isPlayerSeeingTheVoteMenu\t galileo.sma': 'g_isPlayerSeeingTheVoteMenu', 'cmd_HL1_listmaps(1) \tgalileo.sma - public': 'cmd_HL1_listmaps(${1:player_id})', 'plugin_end(0) \tgalileo.sma - public': 'plugin_end()', 'TASKID_DISPLAY_REMAINING_TIME \tgalileo.sma - enum': 'TASKID_DISPLAY_REMAINING_TIME', 'map_getMinutesElapsed(0) \tgalileo.sma - stock': 'map_getMinutesElapsed()', 'MAX_SAVED_ROUNDS_FOR_AVERAGE \tgalileo.sma - define: 5': 'MAX_SAVED_ROUNDS_FOR_AVERAGE', 'test_lastmapcycle\t galileo.sma': 'test_lastmapcycle', 'sort_stringsi(5) \tgalileo.sma - public': 'sort_stringsi(${1:Array:array}, ${2:elem1}, ${3:elem2}, ${4:data[]}, ${5:data_size})', 'IS_TO_LOAD_ALL_THE_MAP_SERIES \tgalileo.sma - define: 2': 'IS_TO_LOAD_ALL_THE_MAP_SERIES', 'IS_TO_ADD_VOTE_MENU_NEW_LINE(1) \tgalileo.sma - define: ( ( g_voteStatus & IS_RUNOFF_VOTE ) || !IS_MAP_EXTENSION_ALLOWED() || ( g_totalVoteOptions == 1 && !g_isRunOffNeedingKeepCurrentMap ) )': 'IS_TO_ADD_VOTE_MENU_NEW_LINE(${1:param1})', 'test_convertNumericBase(4) \tgalileo.sma - stock': 'test_convertNumericBase(${1:origin_number}, ${2:origin_base}, ${3:destiny_base}, ${4:expected})', 'loadMapFileListOnSeries(3) \tgalileo.sma - stock': 'loadMapFileListOnSeries(${1:Array:mapArray}, ${2:Trie:mapTrie}, ${3:mapFilePath[]})', 'g_voteStatus_symbol\t galileo.sma': 'g_voteStatus_symbol', 'IS_TO_RTV_NOT_ALLOW_STAY \tgalileo.sma - define: 2': 'IS_TO_RTV_NOT_ALLOW_STAY', 'doTheActualMapExtension(0) \tgalileo.sma - stock': 'doTheActualMapExtension()', 'test_GET_MAP_INFO_check(4) \tgalileo.sma - stock': 'test_GET_MAP_INFO_check(${1:test_id}, ${2:textToCheck[]}, ${3:bool:is}, ${4:bool:toBe})', 'test_configureTheNextMap_loadd(1) \tgalileo.sma - stock': 'test_configureTheNextMap_loadd(${1:s})', 'cvar_extendmapStepFrags\t galileo.sma': 'cvar_extendmapStepFrags', 'displayRemainingTime(0) \tgalileo.sma - public': 'displayRemainingTime()', 'DEBUG_LEVEL_CRITICAL_MODE \tgalileo.sma - define: 16': 'DEBUG_LEVEL_CRITICAL_MODE', 'LAST_CHANGE_MAP_FILE_NAME\t galileo.sma': 'LAST_CHANGE_MAP_FILE_NAME', 'TD_USE_VOICE \tgalileo.sma - const: 2': 'TD_USE_VOICE', 'GAME_ENDING_CONTEXT_SAVED(2) \tgalileo.sma - define: ( ( g_isGameEndingTypeContextSaved ) ? ( %1 ) : ( %2 ) )': 'GAME_ENDING_CONTEXT_SAVED(${1:param1}, ${2:param2})', 'MAX_STANDARD_MAP_COUNT \tgalileo.sma - define: 25': 'MAX_STANDARD_MAP_COUNT', 'writeToTheDebugFile(2) \tgalileo.sma - stock': 'writeToTheDebugFile(${1:const log_file[]}, ${2:const formatted_message[]})', 'END_OF_MAP_VOTE_NO_ANNOUNCEMENT \tgalileo.sma - define: 8': 'END_OF_MAP_VOTE_NO_ANNOUNCEMENT', 'SECOND_SERVER_START \tgalileo.sma - define: 1': 'SECOND_SERVER_START', 'loadMapsFolderDirectoryComplete(3) \tgalileo.sma - stock': 'loadMapsFolderDirectoryComplete(${1:directoryDescriptor}, ${2:Array:mapArray}, ${3:Trie:fillerMapTrie})', 'nomination_cancel(2) \tgalileo.sma - stock': 'nomination_cancel(${1:player_id}, ${2:mapIndex})', 'g_reverseSearchNominationsTrie\t galileo.sma': 'g_reverseSearchNominationsTrie', 'show_all_players_nominations(0) \tgalileo.sma - stock': 'show_all_players_nominations()', 'countPlayerNominations(2) \tgalileo.sma - stock': 'countPlayerNominations(${1:player_id}, ${2:&openNominationIndex})', 'cvar_maxMapExtendTime\t galileo.sma': 'cvar_maxMapExtendTime', 'g_dataDirPath\t galileo.sma': 'g_dataDirPath', 'startEmptyCycleCountdown(0) \tgalileo.sma - stock': 'startEmptyCycleCountdown()', 'RTV_CMD_SINGLE_PLAYER_DISABLE \tgalileo.sma - define: 8': 'RTV_CMD_SINGLE_PLAYER_DISABLE', 'g_test_gameElapsedTime\t galileo.sma': 'g_test_gameElapsedTime', 'g_test_startDayInteger\t galileo.sma': 'g_test_startDayInteger', 'END_AT_THE_NEXT_ROUND_END \tgalileo.sma - define: 2': 'END_AT_THE_NEXT_ROUND_END', 'displayVoteMapMenuHook(1) \tgalileo.sma - public': 'displayVoteMapMenuHook(${1:player_id})', 'client_authorized(1) \tgalileo.sma - public': 'client_authorized(${1:player_id})', 'cvar_serverWinlimitRestart\t galileo.sma': 'cvar_serverWinlimitRestart', 'cvar_nomPlayerAllowance\t galileo.sma': 'cvar_nomPlayerAllowance', 'DEBUG_LEVEL_DISABLE_TEST_LOGS \tgalileo.sma - define: 64': 'DEBUG_LEVEL_DISABLE_TEST_LOGS', 'resetTheRtvWaitTime(0) \tgalileo.sma - stock': 'resetTheRtvWaitTime()', 'configureTheMidPlayersFeature(1) \tgalileo.sma - stock': 'configureTheMidPlayersFeature(${1:mapFilerFilePath[]})', 'test_configureTheNextMap_case(5) \tgalileo.sma - stock': 'test_configureTheNextMap_case(${1:s}, ${2:cmA[]}, ${3:npE[]}, ${4:posE}, ${5:expectedSize})', 'FIRST_SERVER_START \tgalileo.sma - define: 2': 'FIRST_SERVER_START', 'handleOneMapAtSecondPosition(2) \tgalileo.sma - stock': 'handleOneMapAtSecondPosition(${1:firstPlaceChoices[]}, ${2:secondPlaceChoices[]})', 'isToLoadNextWhiteListGroupOpen(4) \tgalileo.sma - stock': 'isToLoadNextWhiteListGroupOpen(${1:currentHour}, ${2:startHour}, ${3:endHour}, ${4:bool:isBlackList = false})', 'g_showVoteStatus\t galileo.sma': 'g_showVoteStatus', 'g_rtvWaitFrags\t galileo.sma': 'g_rtvWaitFrags', 'startNominationMenuVariables(1) \tgalileo.sma - define: new      mapIndex; new bool:isRecentMapNomBlocked; new bool:isWhiteListNomBlock; getRecentMapsAndWhiteList( %1, isRecentMapNomBlocked, isWhiteListNomBlock )': 'startNominationMenuVariables(${1:param1})', 'loadMapFiles(1) \tgalileo.sma - stock': 'loadMapFiles(${1:bool:readMapCycle = true})', 'g_originalWinLimit\t galileo.sma': 'g_originalWinLimit', 'loadMapGroupsFeature(0) \tgalileo.sma - stock': 'loadMapGroupsFeature()', 'configureTheRunoffVoting(4) \tgalileo.sma - stock': 'configureTheRunoffVoting(${1:firstPlaceChoices[]}, ${2:secondPlaceChoices[]}, ${3:numberOfMapsAtFirstPosition}, ${4:numberOfMapsAtSecondPosition})', 'IS_TO_LOAD_THE_FIRST_MAP_SERIES \tgalileo.sma - define: 1': 'IS_TO_LOAD_THE_FIRST_MAP_SERIES', 'g_test_lastTimeStamp\t galileo.sma': 'g_test_lastTimeStamp', 'TASKID_RTV_REMINDER \tgalileo.sma - enum': 'TASKID_RTV_REMINDER', 'IS_NOMINATION_MININUM_PLAYERS_CONTROL_ENABLED(1) \tgalileo.sma - define: ( get_real_players_number() < get_pcvar_num( cvar_voteMinPlayers ) && get_pcvar_num( cvar_nomMinPlayersControl ) )': 'IS_NOMINATION_MININUM_PLAYERS_CONTROL_ENABLED(${1:param1})', 'CHOOSE_MAP_MENU_QUESTION\t galileo.sma': 'CHOOSE_MAP_MENU_QUESTION', 'test_mp_fraglimitCvarSupport\t galileo.sma': 'test_mp_fraglimitCvarSupport', 'RUNOFF_ENABLED \tgalileo.sma - define: 1': 'RUNOFF_ENABLED', 'cvar_rtvCommands\t galileo.sma': 'cvar_rtvCommands', 'cmd_rockthevote(1) \tgalileo.sma - public': 'cmd_rockthevote(${1:player_id})', 'cvar_isExtendmapOrderAllowed\t galileo.sma': 'cvar_isExtendmapOrderAllowed', 'cvar_serverMoveCursor\t galileo.sma': 'cvar_serverMoveCursor', 'cvar_nomMapFilePath\t galileo.sma': 'cvar_nomMapFilePath', 'cvar_voteMapChoiceCount\t galileo.sma': 'cvar_voteMapChoiceCount', 'TASKID_PROCESS_LAST_ROUNDCHANGE \tgalileo.sma - enum': 'TASKID_PROCESS_LAST_ROUNDCHANGE', 'g_isThePenultGameRound\t galileo.sma': 'g_isThePenultGameRound', 'test_isInEmptyCycle(0) \tgalileo.sma - stock': 'test_isInEmptyCycle()', 'test_loadVoteChoices_serie_c(0) \tgalileo.sma - stock': 'test_loadVoteChoices_serie_c()', 'cmd_quit2(0) \tgalileo.sma - public': 'cmd_quit2()', 'IS_MAP_VALID(1) \tgalileo.sma - define: ( isAllowedValidMapByTheUnitTests(%1) || !g_test_isToUseStrictValidMaps && IS_MAP_VALID_BSP( %1 ) )': 'IS_MAP_VALID(${1:param1})', 'cvar_isOnlyRecentMapcycleMaps\t galileo.sma': 'cvar_isOnlyRecentMapcycleMaps', 'displaysLastTestOk(0) \tgalileo.sma - stock': 'displaysLastTestOk()', 'addMapToTheVotingMenu(2) \tgalileo.sma - stock': 'addMapToTheVotingMenu(${1:mapName[]}, ${2:mapInfo[]})', 'COLOR_WHITE\t galileo.sma': 'COLOR_WHITE', 'INFINITY_VOTING_TIME_VALUE \tgalileo.sma - define: 20': 'INFINITY_VOTING_TIME_VALUE', 'test_loadVoteChoices_cases(0) \tgalileo.sma - stock': 'test_loadVoteChoices_cases()', 'runTests(0) \tgalileo.sma - public': 'runTests()', 'TASKID_VOTE_EXPIRE \tgalileo.sma - enum': 'TASKID_VOTE_EXPIRE', 'getLastNextMapFromServerStart(3) \tgalileo.sma - stock': 'getLastNextMapFromServerStart(${1:Array:mapcycleFileListArray}, ${2:nextMapName[]}, ${3:&nextMapCyclePosition})', 'cvar_runoffDuration\t galileo.sma': 'cvar_runoffDuration', 'loadPluginSetttings(0) \tgalileo.sma - stock': 'loadPluginSetttings()', 'announcerockFailToosoon(2) \tgalileo.sma - stock': 'announcerockFailToosoon(${1:player_id}, ${2:Float:minutesElapsed})', 'TASKID_START_VOTING_DELAYED \tgalileo.sma - enum': 'TASKID_START_VOTING_DELAYED', 'start_rtvVote(0) \tgalileo.sma - stock': 'start_rtvVote()', 'sayWinLimitLeft(1) \tgalileo.sma - stock': 'sayWinLimitLeft(${1:id})', 'getRestartsOnTheCurrentMap(1) \tgalileo.sma - stock': 'getRestartsOnTheCurrentMap(${1:const mapToChange[]})', 'MAPS_WHERE_THE_SERVER_CRASHED\t galileo.sma': 'MAPS_WHERE_THE_SERVER_CRASHED', 'show_last_round_HUD(0) \tgalileo.sma - public': 'show_last_round_HUD()', 'test_loadNextWhiteListGroupClos(2) \tgalileo.sma - stock': 'test_loadNextWhiteListGroupClos(${1:s}, ${2:bool:t})', 'updateNominationsReverseSearch(4) \tgalileo.sma - stock': 'updateNominationsReverseSearch(${1:player_id}, ${2:nominationIndex}, ${3:mapIndex}, ${4:originalMapIndex})', 'intermission_processing(1) \tgalileo.sma - stock': 'intermission_processing(${1:bool:isCountDownAllowed = true})', 'loadLangFiles(0) \tgalileo.sma - stock': 'loadLangFiles()', 'test_mp_maxrounds\t galileo.sma': 'test_mp_maxrounds', 'cvar_soundsMute\t galileo.sma': 'cvar_soundsMute', 'register_vote(2) \tgalileo.sma - stock': 'register_vote(${1:player_id}, ${2:pressedKeyCode})', 'stayHereWon(1) \tgalileo.sma - stock': 'stayHereWon(${1:const reason[]})', 'nomination_getPlayer(1) \tgalileo.sma - stock': 'nomination_getPlayer(${1:mapIndex})', 'test_resetRoundsScores_case(6) \tgalileo.sma - stock': 'test_resetRoundsScores_case(${1:limiterCvarPointer}, ${2:serverCvarPointer}, ${3:elapsedValue}, ${4:aimResult}, ${5:defaultCvarValue}, ${6:defaultLimiterValue})', 'test_setCorrectMenuPage_load(0) \tgalileo.sma - stock': 'test_setCorrectMenuPage_load()', 'debugLoadedGroupMapFileFrom(2) \tgalileo.sma - stock': 'debugLoadedGroupMapFileFrom(${1:&Array:playerFillerMapsArray}, ${2:&Array:maxMapsPerGroupToUseArray})', 'cvar_sv_maxspeed\t galileo.sma': 'cvar_sv_maxspeed', 'cvar_voteWeight\t galileo.sma': 'cvar_voteWeight', 'configureTheAlternateSeries(2) \tgalileo.sma - stock': 'configureTheAlternateSeries(${1:Array:mapcycleFileListArray}, ${2:&nextMapCyclePosition})', 'g_playerVotedWeight\t galileo.sma': 'g_playerVotedWeight', 'IS_MAP_MAPCHANGE_COUNTDOWN \tgalileo.sma - define: 1': 'IS_MAP_MAPCHANGE_COUNTDOWN', 'g_test_failureIdsArray\t galileo.sma': 'g_test_failureIdsArray', 'test_configureTheNextMap_loadg(1) \tgalileo.sma - stock': 'test_configureTheNextMap_loadg(${1:s})', 'g_rtvWaitMinutes\t galileo.sma': 'g_rtvWaitMinutes', 'LISTMAPS_USERID \tgalileo.sma - define: 0': 'LISTMAPS_USERID', 'TD_NO_REMAINING_VOICE \tgalileo.sma - const: 4': 'TD_NO_REMAINING_VOICE', 'print_tests_failure(0) \tgalileo.sma - stock': 'print_tests_failure()', 'g_rtvWaitAdminNumber\t galileo.sma': 'g_rtvWaitAdminNumber', 'CHOOSE_VOTEMAP_MENU_QUESTION\t galileo.sma': 'CHOOSE_VOTEMAP_MENU_QUESTION', 'test_loadCurrentBlacklist_case(5) \tgalileo.sma - stock': 'test_loadCurrentBlacklist_case(${1:s}, ${2:bool:isBlackList}, ${3:currentHour}, ${4:not_existent[]}, ${5:map_existent[]})', 'SaveRoundEnding_VotingEnd \tgalileo.sma - enum': 'SaveRoundEnding_VotingEnd', 'plugin_init(0) \tgalileo.sma - public': 'plugin_init()', 'vote_addNominations(2) \tgalileo.sma - stock': 'vote_addNominations(${1:blockedMapsBuffer[]}, ${2:&announcementShowedTimes = 0})', 'g_debug_level\t galileo.sma': 'g_debug_level', 'setTimeVoice(4) \tgalileo.sma - stock': 'setTimeVoice(${1:text[]}, ${2:len}, ${3:flags}, ${4:tmlf})', 'MAX_OPTIONS_IN_VOTE \tgalileo.sma - define: 9': 'MAX_OPTIONS_IN_VOTE', 'g_voteMapInvokerPlayerId\t galileo.sma': 'g_voteMapInvokerPlayerId', 'TASKID_SHOW_LAST_ROUND_HUD \tgalileo.sma - enum': 'TASKID_SHOW_LAST_ROUND_HUD', 'str_token \tgalileo.sma - define: strtok': 'str_token', 'map_change_stays(0) \tgalileo.sma - public': 'map_change_stays()', 'test_loadVoteChoices_check(3) \tgalileo.sma - stock': 'test_loadVoteChoices_check(${1:newSeries}, ${2:mapToCheck[]}, ${3:bool:isToBePresent})', 'g_extendmapStepFrags\t galileo.sma': 'g_extendmapStepFrags', 'plugin_cfg(0) \tgalileo.sma - public': 'plugin_cfg()', 'g_voteStatusClean\t galileo.sma': 'g_voteStatusClean', 'closeVoting(0) \tgalileo.sma - public': 'closeVoting()', 'print_tests_results_count(0) \tgalileo.sma - stock': 'print_tests_results_count()', 'try_to_start_the_RTV(2) \tgalileo.sma - stock': 'try_to_start_the_RTV(${1:rocksNeeded}, ${2:bool:silent=false})', 'cvar_mp_friendlyfire\t galileo.sma': 'cvar_mp_friendlyfire', 'g_voteMapStatus\t galileo.sma': 'g_voteMapStatus', 'SHOW_STATUS_AT_END \tgalileo.sma - define: 2': 'SHOW_STATUS_AT_END', 'g_answeredForEndOfMapVote\t galileo.sma': 'g_answeredForEndOfMapVote', 'printVotingMaps(3) \tgalileo.sma - stock': 'printVotingMaps(${1:mapNames[][]}, ${2:mapInfos[][]}, ${3:votingMapsCount = MAX_OPTIONS_IN_VOTE})', 'nomination_menu(1) \tgalileo.sma - stock': 'nomination_menu(${1:player_id})', 'COMMAND_LISTMAPS_DISABLED \tgalileo.sma - define: 1': 'COMMAND_LISTMAPS_DISABLED', 'sayFragsLeft(1) \tgalileo.sma - stock': 'sayFragsLeft(${1:id})', 'TASKID_PROCESS_LAST_ROUND_COUNT \tgalileo.sma - enum': 'TASKID_PROCESS_LAST_ROUND_COUNT', 'addMenuMoreBackStartOptions(6) \tgalileo.sma - stock': 'addMenuMoreBackStartOptions(${1:menu}, ${2:player_id}, ${3:disabledReason[]}, ${4:bool:isToEnableMoreButton}, ${5:bool:isToEnableBackButton}, ${6:itemsCount})', 'saveCurrentMapCycleSetting(3) \tgalileo.sma - stock': 'saveCurrentMapCycleSetting(${1:const currentMapName[]}, ${2:const mapcycleFilePath[]}, ${3:nextMapCyclePosition})', 'test_loadVoteChoices_serie_b(0) \tgalileo.sma - stock': 'test_loadVoteChoices_serie_b()', 'initializeTheVoteDisplay(0) \tgalileo.sma - stock': 'initializeTheVoteDisplay()', 'MAX_PREFIX_SIZE \tgalileo.sma - define: 16': 'MAX_PREFIX_SIZE', 'try_to_process_last_round(1) \tgalileo.sma - stock': 'try_to_process_last_round(${1:bool:isFragLimitEnd = false})', 'g_isTheRoundEnded\t galileo.sma': 'g_isTheRoundEnded', 'g_roundStartTime\t galileo.sma': 'g_roundStartTime', 'cvar_isToShowNoneOption\t galileo.sma': 'cvar_isToShowNoneOption', 'cvar_isToShowVoteCounter\t galileo.sma': 'cvar_isToShowVoteCounter', 'g_isTimeToRestart\t galileo.sma': 'g_isTimeToRestart', 'setTheCurrentAndNextMapSettings(0) \tgalileo.sma - stock': 'setTheCurrentAndNextMapSettings()', 'g_fragLimitContextSaved\t galileo.sma': 'g_fragLimitContextSaved', 'MAX_COLOR_MESSAGE \tgalileo.sma - define: 190': 'MAX_COLOR_MESSAGE', 'g_mapcycleFileListTrie\t galileo.sma': 'g_mapcycleFileListTrie', 'vote_unrockTheVote(1) \tgalileo.sma - stock': 'vote_unrockTheVote(${1:player_id})', 'IS_ABLE_TO_PERFORM_A_MAP_CHANGE(1) \tgalileo.sma - define: ( !task_exists( TASKID_PROCESS_LAST_ROUND_COUNT ) || !task_exists( TASKID_INTERMISSION_HOLD ) || !( g_voteStatus & IS_VOTE_IN_PROGRESS ) || !g_isTheRoundEndWhileVoting )': 'IS_ABLE_TO_PERFORM_A_MAP_CHANGE(${1:param1})', 'cvar_maxMapExtendRounds\t galileo.sma': 'cvar_maxMapExtendRounds', 'GAME_CRASH_RECREATION_FLAG_FILE\t galileo.sma': 'GAME_CRASH_RECREATION_FLAG_FILE', 'createPlayerNominationKey(3) \tgalileo.sma - stock': 'createPlayerNominationKey(${1:player_id}, ${2:trieKey[]}, ${3:trieKeyLength})', 'handleDisplayVoteMap(3) \tgalileo.sma - public': 'handleDisplayVoteMap(${1:player_id}, ${2:menu}, ${3:item})', 'tryToGetGameModCvar(2) \tgalileo.sma - stock': 'tryToGetGameModCvar(${1:&cvar_to_get}, ${2:cvar_name[]})', 'display_menu_clean(2) \tgalileo.sma - stock': 'display_menu_clean(${1:player_id}, ${2:menuKeys})', 'COMMAND_VOTEMAP_DISABLED \tgalileo.sma - define: 1': 'COMMAND_VOTEMAP_DISABLED', 'map_listAll(1) \tgalileo.sma - public': 'map_listAll(${1:player_id})', 'test_functionNameExample(0) \tgalileo.sma - stock': 'test_functionNameExample()', 'test_serverTimeLimitRestart\t galileo.sma': 'test_serverTimeLimitRestart', 'test_configureTheNextMap(0) \tgalileo.sma - stock': 'test_configureTheNextMap()', 'g_test_minPlayersFilePath\t galileo.sma': 'g_test_minPlayersFilePath', 'g_isPlayerSeeingTheSubMenu\t galileo.sma': 'g_isPlayerSeeingTheSubMenu', 'register_dictionary_colored(1) \tgalileo.sma - stock': 'register_dictionary_colored(${1:const dictionaryFile[]})', 'DELAY_TO_WAIT_THE_SERVER_CVARS_TO_BE_LOADED \tgalileo.sma - define: 50.0': 'DELAY_TO_WAIT_THE_SERVER_CVARS_TO_BE_LOADED', 'cvar_serverTimeLimitRestart\t galileo.sma': 'cvar_serverTimeLimitRestart', 'try_to_add_the_nomination(3) \tgalileo.sma - stock': 'try_to_add_the_nomination(${1:player_id}, ${2:mapIndex}, ${3:mapName[]})', 'add_my_nomination(3) \tgalileo.sma - stock': 'add_my_nomination(${1:player_id}, ${2:mapIndex}, ${3:mapName[]})', 'restartEmptyCycle(0) \tgalileo.sma - stock': 'restartEmptyCycle()', 'configureTheNextMapSetttings(1) \tgalileo.sma - stock': 'configureTheNextMapSetttings(${1:currentMapcycleFilePath[]})', 'cvar_mp_winlimit\t galileo.sma': 'cvar_mp_winlimit', 'nomination_handlePartialMatch(3) \tgalileo.sma - public': 'nomination_handlePartialMatch(${1:player_id}, ${2:menu}, ${3:item})', 'test_loadNextWhiteListGroupOpen(2) \tgalileo.sma - stock': 'test_loadNextWhiteListGroupOpen(${1:s}, ${2:bool:t})', 'END_OF_MAP_VOTE_ASK \tgalileo.sma - define: 1': 'END_OF_MAP_VOTE_ASK', 'test_setCorrectMenuPage(3) \tgalileo.sma - stock': 'test_setCorrectMenuPage(${1:pageString[]}, ${2:pagesCount}, ${3:expectedPage})', 'test_serverMaxroundsRestart\t galileo.sma': 'test_serverMaxroundsRestart', 'loadMapsFolderDirectoryArray(2) \tgalileo.sma - stock': 'loadMapsFolderDirectoryArray(${1:directoryDescriptor}, ${2:Array:mapArray})', 'test_getUniqueRandomInt_load(0) \tgalileo.sma - stock': 'test_getUniqueRandomInt_load()', 'loadTheBanRecentMapsFeature(1) \tgalileo.sma - stock': 'loadTheBanRecentMapsFeature(${1:maximumLoadMapsCount})', 'cvar_nextMapChangeVotemap\t galileo.sma': 'cvar_nextMapChangeVotemap', 'cvar_cmdListmaps\t galileo.sma': 'cvar_cmdListmaps', 'SHOW_STATUS_ALWAYS_UNTIL_VOTE \tgalileo.sma - define: 4': 'SHOW_STATUS_ALWAYS_UNTIL_VOTE', 'test_g_nextMapName\t galileo.sma': 'test_g_nextMapName', 'g_mapcycleFileListArray\t galileo.sma': 'g_mapcycleFileListArray', 'restoreOriginalServerMaxSpeed(0) \tgalileo.sma - stock': 'restoreOriginalServerMaxSpeed()', 'getNextMapName(2) \tgalileo.sma - stock': 'getNextMapName(${1:nextMapName[]}, ${2:maxChars})', 'isToLoadNextWhiteListEndProcess(4) \tgalileo.sma - stock': 'isToLoadNextWhiteListEndProcess(${1:currentHour}, ${2:startHour}, ${3:endHour}, ${4:bool:isBlackList})', 'g_forwardSearchNominationsTrie\t galileo.sma': 'g_forwardSearchNominationsTrie', 'test_NomMinPlayersControl\t galileo.sma': 'test_NomMinPlayersControl', 'cvar_cmdVotemap\t galileo.sma': 'cvar_cmdVotemap', 'cvar_rtvWaitMinutes\t galileo.sma': 'cvar_rtvWaitMinutes', 'COLOR_YELLOW\t galileo.sma': 'COLOR_YELLOW', 'chooseRandomVotingWinner(0) \tgalileo.sma - stock': 'chooseRandomVotingWinner()', 'STATUS_TYPE_PERCENTAGE \tgalileo.sma - define: 2': 'STATUS_TYPE_PERCENTAGE', 'map_loadEmptyCycleList(1) \tgalileo.sma - stock': 'map_loadEmptyCycleList(${1:emptyCycleFilePath[]})', 'helper_unnominated_nomsLoad(2) \tgalileo.sma - stock': 'helper_unnominated_nomsLoad(${1:player_id}, ${2:...})', 'SERVER_START_NEXTMAP \tgalileo.sma - define: 2': 'SERVER_START_NEXTMAP', 'test_endOfMapVotingStop_case7(1) \tgalileo.sma - public': 'test_endOfMapVotingStop_case7(${1:s})', 'SERVER_START_MAPVOTE \tgalileo.sma - define: 3': 'SERVER_START_MAPVOTE', 'cacheCvarsValuesPublic(0) \tgalileo.sma - public': 'cacheCvarsValuesPublic()', 'serverChangeLevel(1) \tgalileo.sma - public': 'serverChangeLevel(${1:mapName[]})', 'g_test_idsAndNamesArray\t galileo.sma': 'g_test_idsAndNamesArray', 'getVoteAnnouncementTime(1) \tgalileo.sma - stock': 'getVoteAnnouncementTime(${1:isToAskForEndOfTheMapVote})', 'dispaly_the_vote_sub_menu(1) \tgalileo.sma - stock': 'dispaly_the_vote_sub_menu(${1:player_id})', 'g_isTheRoundEndWhileVoting\t galileo.sma': 'g_isTheRoundEndWhileVoting', 'TASKID_DELETE_USERS_MENUS_CARE \tgalileo.sma - enum': 'TASKID_DELETE_USERS_MENUS_CARE', 'DEBUG_LEVEL_MANUAL_TEST_START \tgalileo.sma - define: 32': 'DEBUG_LEVEL_MANUAL_TEST_START', 'getTheCurrentSerieForTheMap(1) \tgalileo.sma - stock': 'getTheCurrentSerieForTheMap(${1:mapNameClean[]})', 'map_getMinutesElapsedInteger(0) \tgalileo.sma - stock': 'map_getMinutesElapsedInteger()', 'TASK_TIMEREMAIN_LARGE \tgalileo.sma - const: 34543': 'TASK_TIMEREMAIN_LARGE', 'MIN_VOTE_START_ROUNDS_DELAY \tgalileo.sma - define: 1': 'MIN_VOTE_START_ROUNDS_DELAY', 'GET_CURRENT_BASED_DAY(2) \tgalileo.sma - define: ( ( %2 - 2000 ) * 366 + %1 )': 'GET_CURRENT_BASED_DAY(${1:param1}, ${2:param2})', 'handleEndOfTheMapVoteChoice(2) \tgalileo.sma - public': 'handleEndOfTheMapVoteChoice(${1:player_id}, ${2:pressedKeyCode})', 'g_isRunningSvenCoop\t galileo.sma': 'g_isRunningSvenCoop', 'GAL_VOTEMAP_MENU_COMMAND\t galileo.sma': 'GAL_VOTEMAP_MENU_COMMAND', 'test_loadCurrentBlacklist_caseT(5) \tgalileo.sma - stock': 'test_loadCurrentBlacklist_caseT(${1:serie}, ${2:bool:isBlackList}, ${3:currentHour}, ${4:map_existent[]}, ${5:not_existent[]})', 'SaveRoundEnding_RestartTime \tgalileo.sma - enum': 'SaveRoundEnding_RestartTime', 'FRAGS_BY_ROUND_AVERAGE \tgalileo.sma - define: 7': 'FRAGS_BY_ROUND_AVERAGE', 'g_Switch\t galileo.sma': 'g_Switch', 'cvar_amx_nextmap\t galileo.sma': 'cvar_amx_nextmap', 'print_logger(2) \tgalileo.sma - stock': 'print_logger(${1:const message[] = ""}, ${2:any:...})', 'loadMapGroupsFeatureFile(3) \tgalileo.sma - stock': 'loadMapGroupsFeatureFile(${1:mapFilerFilePath[]}, ${2:&Array:mapFilersPathArray}, ${3:&Array:maxMapsPerGroupToUse})', 'cmd_say(1) \tgalileo.sma - public': 'cmd_say(${1:player_id})', 'areWeRunningAnAlternateSeries(3) \tgalileo.sma - stock': 'areWeRunningAnAlternateSeries(${1:const currentMapNameClean[]}, ${2:currentMapSerie}, ${3:possibleNextMap[]})', 'timeleftPluginInit(0) \tgalileo.sma - public': 'timeleftPluginInit()', 'cvar_voteAnnounceChoice\t galileo.sma': 'cvar_voteAnnounceChoice', 'display_vote_menu(4) \tgalileo.sma - stock': 'display_vote_menu(${1:bool:menuType}, ${2:player_id}, ${3:menuBody[]}, ${4:menuKeys})', 'debugWhatGameEndingTypeItIs(5) \tgalileo.sma - stock': 'debugWhatGameEndingTypeItIs(${1:rounds_left_by_maxrounds}, ${2:rounds_left_by_time}, ${3:rounds_left_by_winlimit}, ${4:rounds_left_by_frags}, ${5:debugLevel})', 'TASKID_INTERMISSION_HOLD \tgalileo.sma - enum': 'TASKID_INTERMISSION_HOLD', 'MAX_LONG_STRING \tgalileo.sma - define: 256': 'MAX_LONG_STRING', 'g_voteWeightFlags\t galileo.sma': 'g_voteWeightFlags', 'TASKID_EMPTYSERVER \tgalileo.sma - enum': 'TASKID_EMPTYSERVER', 'IS_BY_FRAGS \tgalileo.sma - define: 2': 'IS_BY_FRAGS', 'g_chooseVoteMapQuestionMenuId\t galileo.sma': 'g_chooseVoteMapQuestionMenuId', 'debugRtvVote(0) \tgalileo.sma - stock': 'debugRtvVote()', 'cvar_endOfMapVoteStart\t galileo.sma': 'cvar_endOfMapVoteStart', 'cvar_isWhiteListBlockOut\t galileo.sma': 'cvar_isWhiteListBlockOut', 'sayHandlerForTwoNomWords(3) \tgalileo.sma - stock': 'sayHandlerForTwoNomWords(${1:player_id}, ${2:firstWord[]}, ${3:secondWord[]})', 'VOTE_TIME_HUD2 \tgalileo.sma - define: 5.0': 'VOTE_TIME_HUD2', 'MAPFILETYPE_SINGLE \tgalileo.sma - define: 1': 'MAPFILETYPE_SINGLE', 'tryToStartTheVotingOnThisRound(1) \tgalileo.sma - stock': 'tryToStartTheVotingOnThisRound(${1:startDelay})', 'voteMapMenuBuilder(1) \tgalileo.sma - stock': 'voteMapMenuBuilder(${1:player_id})', 'test_handleServerStart_case(6) \tgalileo.sma - stock': 'test_handleServerStart_case(${1:const sA}, ${2:const cmnE[]}, ${3:const nmnE[]}, ${4:const nmpE}, ${5:const iA=false}, ${6:const iP=2})', 'test_loadTheNextMapPluginMaps(1) \tgalileo.sma - stock': 'test_loadTheNextMapPluginMaps(${1:expectedSize})', 'tryToSetGameModCvarFloat(2) \tgalileo.sma - stock': 'tryToSetGameModCvarFloat(${1:cvarPointer}, ${2:Float:value})', 'LAST_EMPTY_CYCLE_FILE_NAME\t galileo.sma': 'LAST_EMPTY_CYCLE_FILE_NAME', 'test_loadCurrentBlackList_cases(0) \tgalileo.sma - stock': 'test_loadCurrentBlackList_cases()', 'g_totalVoteOptions\t galileo.sma': 'g_totalVoteOptions', 'chooseTheVotingMapWinner(2) \tgalileo.sma - stock': 'chooseTheVotingMapWinner(${1:firstPlaceChoices[]}, ${2:numberOfMapsAtFirstPosition})', 'END_OF_MAP_VOTE_ANNOUNCE2 \tgalileo.sma - define: 4': 'END_OF_MAP_VOTE_ANNOUNCE2', 'TD_BOTTOM_WHITE_TEXT \tgalileo.sma - const: 1': 'TD_BOTTOM_WHITE_TEXT', 'isTimeToStartTheEndOfMapVoting(1) \tgalileo.sma - stock': 'isTimeToStartTheEndOfMapVoting(${1:endOfMapVote})', 'configureTheWhiteListFeature(1) \tgalileo.sma - stock': 'configureTheWhiteListFeature(${1:mapFilerFilePath[]})', 'enableNewVoting(0) \tgalileo.sma - stock': 'enableNewVoting()', 'setup_last_round_HUD(0) \tgalileo.sma - public': 'setup_last_round_HUD()', 'approveTheRunoffVotingStart(0) \tgalileo.sma - stock': 'approveTheRunoffVotingStart()', 'inGameTestsToExecute(1) \tgalileo.sma - public': 'inGameTestsToExecute(${1:player_id})', 'g_timeLeftContextSaved\t galileo.sma': 'g_timeLeftContextSaved', 'vote_handleDisplay(0) \tgalileo.sma - public': 'vote_handleDisplay()', 'MAX_CELL_LENGHT \tgalileo.sma - define: 20': 'MAX_CELL_LENGHT', 'checkIfThereEnoughMapPopulated(3) \tgalileo.sma - stock': 'checkIfThereEnoughMapPopulated(${1:mapCount}, ${2:mapFileDescriptor}, ${3:mapFilePath[]})', 'cvar_mp_nextmap_cycle\t galileo.sma': 'cvar_mp_nextmap_cycle', 'no_color_console(3) \tgalileo.sma - stock': 'no_color_console(${1:const player_id}, ${2:const message[]}, ${3:any:...})', 'fillersFilePaths_NormalPlayers \tgalileo.sma - enum': 'fillersFilePaths_NormalPlayers', 'test_getUniqueRandomInteger(3) \tgalileo.sma - stock': 'test_getUniqueRandomInteger(${1:Array:holder}, ${2:min_value}, ${3:max_value})', 'g_isToRestoreFriendlyFire\t galileo.sma': 'g_isToRestoreFriendlyFire', 'client_death_event(0) \tgalileo.sma - public': 'client_death_event()', 'g_recentListMapsArray\t galileo.sma': 'g_recentListMapsArray', 'g_isThePenultGameRoundContext\t galileo.sma': 'g_isThePenultGameRoundContext', 'IS_TO_MUTE(1) \tgalileo.sma - define: ( ( %1 && ( get_pcvar_num( cvar_generalOptions ) & MUTE_MESSAGES_SPAMMING ) ) ? PLUGIN_HANDLED : PLUGIN_CONTINUE )': 'IS_TO_MUTE(${1:param1})', 'cvar_isToAskForEndOfTheMapVote\t galileo.sma': 'cvar_isToAskForEndOfTheMapVote', 'g_votingSecondsRemaining\t galileo.sma': 'g_votingSecondsRemaining', 'g_maxRoundsContextSaved\t galileo.sma': 'g_maxRoundsContextSaved', 'TASKID_PENDING_VOTE_COUNTDOWN \tgalileo.sma - enum': 'TASKID_PENDING_VOTE_COUNTDOWN', 'configureTheExtensionOption(1) \tgalileo.sma - stock': 'configureTheExtensionOption(${1:bool:is_forced_voting})', 'getNextMapLocalInfoToken(1) \tgalileo.sma - stock': 'getNextMapLocalInfoToken(${1:currentMapcycleFilePath[]})', 'TRY_TO_CLEAN(3) \tgalileo.sma - define: { LOG( 128, "I AM ENTERING ON TRY_TO_CLEAN(3) objectIndentifation: %d", %2 ) if( %2 ) { %1( %2 ); } else { %2 = %3; } }': 'TRY_TO_CLEAN(${1:param1}, ${2:param2}, ${3:param3})', 'MAX_NOMINATION_TRIE_KEY_SIZE \tgalileo.sma - define: 48': 'MAX_NOMINATION_TRIE_KEY_SIZE', 'g_voteMidPlayerFillerPathsArray\t galileo.sma': 'g_voteMidPlayerFillerPathsArray', 'loadNominationList(1) \tgalileo.sma - public': 'loadNominationList(${1:nomMapFilePath[]})', 'g_isPlayerClosedTheVoteMenu\t galileo.sma': 'g_isPlayerClosedTheVoteMenu', 'cvar_runoffEnabled\t galileo.sma': 'cvar_runoffEnabled', 'g_rtvCommands\t galileo.sma': 'g_rtvCommands', 'MAX_VOTING_CHOICES(1) \tgalileo.sma - define: ( IS_MAP_EXTENSION_ALLOWED() ? ( g_maxVotingChoices >= MAX_OPTIONS_IN_VOTE ? g_maxVotingChoices - 1 : g_maxVotingChoices ) : g_maxVotingChoices )': 'MAX_VOTING_CHOICES(${1:param1})', 'test_serverPlayersCount\t galileo.sma': 'test_serverPlayersCount', 'cvar_showVoteStatus\t galileo.sma': 'cvar_showVoteStatus', 'cvar_isFirstServerStart\t galileo.sma': 'cvar_isFirstServerStart', 'speakRemainingInterger(2) \tgalileo.sma - stock': 'speakRemainingInterger(${1:id}, ${2:integer})', 'MAX_PREFIX_COUNT \tgalileo.sma - define: 32': 'MAX_PREFIX_COUNT', 'register_test(2) \tgalileo.sma - stock': 'register_test(${1:max_delay_result}, ${2:test_name[]})', 'getMapIndexBefore(3) \tgalileo.sma - stock': 'getMapIndexBefore(${1:Array:mapcycleFileListArray}, ${2:nextMapCyclePosition}, ${3:shifting})', "GET_MAP_INFO_RIGHT(2) \tgalileo.sma - define: { str_token( %2, __g_getMapNameRightToken, MAX_MAPNAME_LENGHT - 1, %3                          , MAX_MAPNAME_LENGHT - 1, ' ' ); }": 'GET_MAP_INFO_RIGHT(${1:param1}, ${2:param2})', 'loadMapFileList(4) \tgalileo.sma - stock': 'loadMapFileList(${1:Array:mapArray}, ${2:mapFilePath[]}, ${3:Trie:fillerMapTrie}, ${4:Trie:duplicatedMaps})', 'setTimeText(4) \tgalileo.sma - stock': 'setTimeText(${1:text[]}, ${2:len}, ${3:tmlf}, ${4:id})', 'cvar_runoffMapchoices\t galileo.sma': 'cvar_runoffMapchoices', 'test_nomMapFilePath\t galileo.sma': 'test_nomMapFilePath', 'cvar_voteWhiteListMapFilePath\t galileo.sma': 'cvar_voteWhiteListMapFilePath', 'test_strictValidMapsTrie(2) \tgalileo.sma - stock': 'test_strictValidMapsTrie(${1:mapName[]}, ${2:bool:isNotToBe = false})', 'announceRegistedVote(2) \tgalileo.sma - stock': 'announceRegistedVote(${1:player_id}, ${2:pressedKeyCode})', 'g_lastNormalTestToExecuteId\t galileo.sma': 'g_lastNormalTestToExecuteId', 'DEBUG_LEVEL_UNIT_TEST_NORMAL \tgalileo.sma - define: 2': 'DEBUG_LEVEL_UNIT_TEST_NORMAL', 'approveTheVotingStartLight(0) \tgalileo.sma - stock': 'approveTheVotingStartLight()', 'MAX_MAPS_TO_SHOW_ON_MAP_POPULATE_LIST \tgalileo.sma - define: 10': 'MAX_MAPS_TO_SHOW_ON_MAP_POPULATE_LIST', 'g_whitelistFileArray\t galileo.sma': 'g_whitelistFileArray', 'debugPrintRecentBanFile(1) \tgalileo.sma - stock': 'debugPrintRecentBanFile(${1:recentMapsFilePath[]})', 'test_serverWinlimitRestart\t galileo.sma': 'test_serverWinlimitRestart', 'process_last_round(2) \tgalileo.sma - stock': 'process_last_round(${1:bool:isToImmediatelyChangeLevel}, ${2:bool:isCountDownAllowed = true})', 'FAKE_PLAYERS_NUMBER_FOR_DEBUGGING \tgalileo.sma - define: 3': 'FAKE_PLAYERS_NUMBER_FOR_DEBUGGING', 'GET_MAP_NAME(3) \tgalileo.sma - define: { ArrayGetString( %1, %2, __g_getMapNameInputLine, MAX_MAPNAME_LENGHT - 1 ); GET_MAP_NAME_LEFT( __g_getMapNameInputLine, %3 ) }': 'GET_MAP_NAME(${1:param1}, ${2:param2}, ${3:param3})', 'cmd_lookForCrashes(3) \tgalileo.sma - public': 'cmd_lookForCrashes(${1:player_id}, ${2:level}, ${3:cid})', 'IS_MAP_MAPCHANGE_FRIENDLY_FIRE \tgalileo.sma - define: 16': 'IS_MAP_MAPCHANGE_FRIENDLY_FIRE', 'getRoundsRemainingBy(2) \tgalileo.sma - stock': 'getRoundsRemainingBy(${1:&by_time = 0}, ${2:&by_frags = 0})', 'g_invokerVoteMapNameToDecide\t galileo.sma': 'g_invokerVoteMapNameToDecide', 'restoreModeFlagFilePath(0) \tgalileo.sma - stock': 'restoreModeFlagFilePath()', 'cvar_coloredChatEnabled\t galileo.sma': 'cvar_coloredChatEnabled', 'VOTE_TIME_ANNOUNCE1 \tgalileo.sma - define: 10.0': 'VOTE_TIME_ANNOUNCE1', 'test_isToLoadBlacklist_case(7) \tgalileo.sma - stock': 'test_isToLoadBlacklist_case(${1:s}, ${2:bool:isBlackList}, ${3:bool:isClose}, ${4:bool:isToLoad}, ${5:currentHour}, ${6:startHour}, ${7:endHour})', 'fillThePartialNominationMenu(1) \tgalileo.sma - public': 'fillThePartialNominationMenu(${1:argumentsIn[]})', 'configureTheNorPlayersFeature(1) \tgalileo.sma - stock': 'configureTheNorPlayersFeature(${1:mapFilerFilePath[]})', 'tryToSetGameModCvarNum(2) \tgalileo.sma - stock': 'tryToSetGameModCvarNum(${1:cvarPointer}, ${2:num})', 'g_amx_timeleft\t galileo.sma': 'g_amx_timeleft', 'g_originalMaxRounds\t galileo.sma': 'g_originalMaxRounds', 'test_whatGameEndingTypeIt_load(0) \tgalileo.sma - stock': 'test_whatGameEndingTypeIt_load()', 'resetVoteTypeGlobals(0) \tgalileo.sma - stock': 'resetVoteTypeGlobals()', 'test_SortCustomSynced2D_case(5) \tgalileo.sma - stock': 'test_SortCustomSynced2D_case(${1:expectedPosition}, ${2:expectedMap[]}, ${3:expectedInfo[]}, ${4:votingMaps[][]}, ${5:votingInfos[][]})', 'helper_clearNominationsData(0) \tgalileo.sma - stock': 'helper_clearNominationsData()', 'test_RTVAndUnRTV(3) \tgalileo.sma - stock': 'test_RTVAndUnRTV(${1:player_id}, ${2:total_RTVs}, ${3:action})', 'helper_loadStrictValidMapsTrie(1) \tgalileo.sma - stock': 'helper_loadStrictValidMapsTrie(${1:...})', 'configureTheMinPlayersFeature(1) \tgalileo.sma - stock': 'configureTheMinPlayersFeature(${1:mapFilerFilePath[]})', 'g_test_lastMaxDelayResult\t galileo.sma': 'g_test_lastMaxDelayResult', 'getUniqueRandomInteger(4) \tgalileo.sma - stock': 'getUniqueRandomInteger(${1:Array:holder}, ${2:minimum = MIN_INTEGER}, ${3:maximum = MIN_INTEGER}, ${4:restart = true})', 'IS_FORCED_VOTE \tgalileo.sma - define: 2': 'IS_FORCED_VOTE', 'create_game_crash_recreation(1) \tgalileo.sma - stock': 'create_game_crash_recreation(${1:secondsLeft})', 'g_voteMinPlayerFillerPathsArray\t galileo.sma': 'g_voteMinPlayerFillerPathsArray', 'handleMoreThanTwoMapsAtFirst(2) \tgalileo.sma - stock': 'handleMoreThanTwoMapsAtFirst(${1:firstPlaceChoices[]}, ${2:numberOfMapsAtFirstPosition})', 'CALCULATE_NEW_GAME_LIMIT(3) \tgalileo.sma - define: { serverLimiterValue = get_pcvar_num( %1 ); if( serverLimiterValue ) { new serverCvarValue = get_pcvar_num( %2 ); if( serverCvarValue ) { serverCvarValue = serverCvarValue - %3 + serverLimiterValue - 1; if( serverCvarValue > 0 ) { saveEndGameLimits(); tryToSetGameModCvarNum( %2, serverCvarValue ); } } } }': 'CALCULATE_NEW_GAME_LIMIT(${1:param1}, ${2:param2}, ${3:param3})', 'setPlayerNominationMapIndex(3) \tgalileo.sma - stock': 'setPlayerNominationMapIndex(${1:player_id}, ${2:nominationIndex}, ${3:mapIndex})', 'g_roundAverageTime\t galileo.sma': 'g_roundAverageTime', 'test_nomPlayerAllowance\t galileo.sma': 'test_nomPlayerAllowance', 'g_CountDown\t galileo.sma': 'g_CountDown', 'g_isPlayerCancelledVote\t galileo.sma': 'g_isPlayerCancelledVote', 'cvar_generalOptions\t galileo.sma': 'cvar_generalOptions', 'loadMapsFolderDirectory(2) \tgalileo.sma - stock': 'loadMapsFolderDirectory(${1:Array:mapArray}, ${2:Trie:fillerMapTrie})', 'MAX_PLAYERS_COUNT \tgalileo.sma - define: MAX_PLAYERS + 1': 'MAX_PLAYERS_COUNT', 'cvar_endOnRoundMininum\t galileo.sma': 'cvar_endOnRoundMininum', 'cvar_rtvRatio\t galileo.sma': 'cvar_rtvRatio', 'INSERT_COLOR_TAGS(1) \tgalileo.sma - define: { replace_all( %1, MAX_COLOR_MESSAGE - 1, "!g", "^4" ); replace_all( %1, MAX_COLOR_MESSAGE - 1, "!t", "^3" ); replace_all( %1, MAX_COLOR_MESSAGE - 1, "!n", "^1" ); replace_all( %1, MAX_COLOR_MESSAGE - 1, "!y", "^1" ); }': 'INSERT_COLOR_TAGS(${1:param1})', 'g_isSawPartialMatchFirstPage\t galileo.sma': 'g_isSawPartialMatchFirstPage', 'announceVoteBlockedMap(4) \tgalileo.sma - stock': 'announceVoteBlockedMap(${1:mapToAnnounce[]}, ${2:blockedMapsBuffer[]}, ${3:flushAnnouncement[]}, ${4:&announcementShowedTimes})', 'test_loadVoteChoices_case(3) \tgalileo.sma - stock': 'test_loadVoteChoices_case(${1:requiredMap[]}, ${2:blockedMap[]}, ${3:newSeries = 0})', 'client_authorized_stock(1) \tgalileo.sma - stock': 'client_authorized_stock(${1:player_id})', 'RECENT_BAN_MAPS_FILE_NAME\t galileo.sma': 'RECENT_BAN_MAPS_FILE_NAME', 'setTestFailure(3) \tgalileo.sma - stock': 'setTestFailure(${1:test_id}, ${2:bool:isFailure}, ${3:failure_reason[]})', 'g_amx_time_voice\t galileo.sma': 'g_amx_time_voice', 'configureEndGameCvars(0) \tgalileo.sma - stock': 'configureEndGameCvars()', 'nomination_list(0) \tgalileo.sma - public': 'nomination_list()', 'IS_VOTE_EXPIRED \tgalileo.sma - define: 32': 'IS_VOTE_EXPIRED', 'COLOR_RED\t galileo.sma': 'COLOR_RED', 'fillersFilePaths_MiddlePlayers \tgalileo.sma - enum': 'fillersFilePaths_MiddlePlayers', 'cvar_showVoteStatusType\t galileo.sma': 'cvar_showVoteStatusType', 'convert_numeric_base(3) \tgalileo.sma - stock': 'convert_numeric_base(${1:origin_number}, ${2:origin_base}, ${3:destiny_base})', 'cmd_createMapFile(3) \tgalileo.sma - public': 'cmd_createMapFile(${1:player_id}, ${2:level}, ${3:cid})', 'clear_two_dimensional_array(1) \tgalileo.sma - define: destroy_two_dimensional_array( %1, false )': 'clear_two_dimensional_array(${1:param1})', 'showRecentMapsListMenu(1) \tgalileo.sma - public': 'showRecentMapsListMenu(${1:player_id})', 'isToStartTheVotingOnThisRound(2) \tgalileo.sma - stock': 'isToStartTheVotingOnThisRound(${1:secondsRemaining}, ${2:GameEndingType:gameEndingType})', 'TASKID_START_THE_VOTING \tgalileo.sma - enum': 'TASKID_START_THE_VOTING', 'IS_TO_LOAD_EXPLICIT_MAP_SERIES \tgalileo.sma - define: 4': 'IS_TO_LOAD_EXPLICIT_MAP_SERIES', 'cvar_voteMidPlayersMapFilePath\t galileo.sma': 'cvar_voteMidPlayersMapFilePath', 'cvar_isWhiteListNomBlock\t galileo.sma': 'cvar_isWhiteListNomBlock', 'doAmxxLog(2) \tgalileo.sma - stock': 'doAmxxLog(${1:const message[] = ""}, ${2:any:...})', 'HELPER_MAP_FILE_LIST_LOAD2(1) \tgalileo.sma - define: helper_mapFileListLoadReplace2( false, %1 );': 'HELPER_MAP_FILE_LIST_LOAD2(${1:param1})', 'END_AT_RIGHT_NOW \tgalileo.sma - define: 0': 'END_AT_RIGHT_NOW', 'normalTestsToExecute(0) \tgalileo.sma - stock': 'normalTestsToExecute()', 'cvar_maxMapExtendFrags\t galileo.sma': 'cvar_maxMapExtendFrags', 'GET_USER_NAME(2) \tgalileo.sma - define: { if( is_user_connected( %1 ) ) { get_user_name( %1, %2, charsmax( %2 ) ); } else { copy( %2, charsmax( %2 ), "Unknown Dude" ); } }': 'GET_USER_NAME(${1:param1}, ${2:param2})', 'isToLoadNextWhiteListGroupClose(4) \tgalileo.sma - stock': 'isToLoadNextWhiteListGroupClose(${1:currentHour}, ${2:startHour}, ${3:endHour}, ${4:bool:isBlackList = false})', 'test_mp_fraglimit\t galileo.sma': 'test_mp_fraglimit', 'VOTE_MININUM_PLAYERS_REQUIRED \tgalileo.sma - define: 1': 'VOTE_MININUM_PLAYERS_REQUIRED', 'TASKID_SERVER_CHANGE_LEVEL \tgalileo.sma - enum': 'TASKID_SERVER_CHANGE_LEVEL', 'g_isToChangeMapOnVotingEnd\t galileo.sma': 'g_isToChangeMapOnVotingEnd', 'HUD_CHANGELEVEL_COUNTDOWN \tgalileo.sma - define: 1': 'HUD_CHANGELEVEL_COUNTDOWN', 'test_isMapExtensionAvowed_case1(1) \tgalileo.sma - stock': 'test_isMapExtensionAvowed_case1(${1:s})', 'getUniqueRandomIntegerBasic(2) \tgalileo.sma - stock': 'getUniqueRandomIntegerBasic(${1:sequence}, ${2:maximum})', 'g_isUsingEmptyCycle\t galileo.sma': 'g_isUsingEmptyCycle', 'g_chooseMapMenuId\t galileo.sma': 'g_chooseMapMenuId', 'g_test_failureReasonsArray\t galileo.sma': 'g_test_failureReasonsArray', 'cvar_voteMapFilePath\t galileo.sma': 'cvar_voteMapFilePath', 'cvar_extendmapStepMinutes\t galileo.sma': 'cvar_extendmapStepMinutes', 'MAP_CHANGES_AT_THE_NEXT_ROUND_START \tgalileo.sma - define: 0': 'MAP_CHANGES_AT_THE_NEXT_ROUND_START', 'cmd_voteMap(3) \tgalileo.sma - public': 'cmd_voteMap(${1:player_id}, ${2:level}, ${3:cid})', 'test_loadCurrentBlacklistMapsOp(2) \tgalileo.sma - stock': 'test_loadCurrentBlacklistMapsOp(${1:s}, ${2:bool:isBlackList})', 'START_VOTEMAP_MIN_TIME \tgalileo.sma - define: ( g_totalVoteTime + PERIODIC_CHECKING_INTERVAL + 3 )': 'START_VOTEMAP_MIN_TIME', 'MAX_NOM_MATCH_COUNT \tgalileo.sma - define: 1000': 'MAX_NOM_MATCH_COUNT', 'map_populateList(5) \tgalileo.sma - stock': 'map_populateList(${1:Array:mapArray=Invalid_Array}, ${2:mapFilePath[]}, ${3:Trie:fillerMapTrie=Invalid_Trie}, ${4:bool:isToClearTheTrie=true}, ${5:bool:isToLoadDuplicatedMaps=true})', '__g_getMapNameRightToken\t galileo.sma': '__g_getMapNameRightToken', 'configureTheRTVFeature(1) \tgalileo.sma - stock': 'configureTheRTVFeature(${1:mapFilerFilePath[]})', 'test_convertNumericBase_load(0) \tgalileo.sma - stock': 'test_convertNumericBase_load()', 'AFTER_READ_MAPCYCLE \tgalileo.sma - define: 0': 'AFTER_READ_MAPCYCLE', 'get_real_players_number(0) \tgalileo.sma - stock': 'get_real_players_number()', 'test_runoffDuration\t galileo.sma': 'test_runoffDuration', 'test_nextMapChangeVotemap\t galileo.sma': 'test_nextMapChangeVotemap', 'cvar_fragLimitSupport\t galileo.sma': 'cvar_fragLimitSupport', 'restoreTheChatTime(0) \tgalileo.sma - stock': 'restoreTheChatTime()', 'intermission_effects(2) \tgalileo.sma - stock': 'intermission_effects(${1:endGameType}, ${2:Float:mp_chattime})', 'g_whitelistNomBlockTime\t galileo.sma': 'g_whitelistNomBlockTime', 'buildNominationPartNameAttempt(2) \tgalileo.sma - stock': 'buildNominationPartNameAttempt(${1:player_id}, ${2:secondWord[]})', 'test_mapcyclefile\t galileo.sma': 'test_mapcyclefile', 'test_mp_timelimit\t galileo.sma': 'test_mp_timelimit', 'IS_MAP_MAPCHANGE_BUY_GRENADES \tgalileo.sma - define: 8': 'IS_MAP_MAPCHANGE_BUY_GRENADES', 'ERR(1) \tgalileo.sma - define: formatex( errorMessage, charsmax( errorMessage ), %1 );': 'ERR(${1:param1})', 'g_voteMapMenuPages\t galileo.sma': 'g_voteMapMenuPages', 'MAX_MESSAGE_LENGHT \tgalileo.sma - define: 80': 'MAX_MESSAGE_LENGHT', 'g_emptyCycleMapsArray\t galileo.sma': 'g_emptyCycleMapsArray', 'vote_handleChoice(2) \tgalileo.sma - public': 'vote_handleChoice(${1:player_id}, ${2:key})', 'MIN_INTEGER \tgalileo.sma - define: -2147483648': 'MIN_INTEGER', 'debug_nomination_match_choice(3) \tgalileo.sma - stock': 'debug_nomination_match_choice(${1:player_id}, ${2:menu}, ${3:item})', 'processSubMenuKeyHit(2) \tgalileo.sma - stock': 'processSubMenuKeyHit(${1:player_id}, ${2:key})', 'VOTEMAP_FIRST_PAGE_ITEMS_COUNTING \tgalileo.sma - define: 4': 'VOTEMAP_FIRST_PAGE_ITEMS_COUNTING', 'IS_TO_ENABLE_SVEN_COOP_SUPPORT \tgalileo.sma - define: 1': 'IS_TO_ENABLE_SVEN_COOP_SUPPORT', 'restoreRoundEnding(1) \tgalileo.sma - stock': 'restoreRoundEnding(${1:bool:roundEndStatus[ SaveRoundEnding ]})', 'MapNomination_NominationIndex \tgalileo.sma - enum': 'MapNomination_NominationIndex', 'IS_BY_ROUNDS \tgalileo.sma - define: 4': 'IS_BY_ROUNDS', 'IS_BY_TIMER \tgalileo.sma - define: 1': 'IS_BY_TIMER', 'test_voteMinPlayers\t galileo.sma': 'test_voteMinPlayers', 'loadTheCursorOnMapSeries(7) \tgalileo.sma - stock': 'loadTheCursorOnMapSeries(${1:Array:mapArray}, ${2:Trie:mapTrie}, ${3:Trie:loadedMapSeriesTrie}, ${4:currentMapName[]}, ${5:nextMapName[]}, ${6:&mapCount}, ${7:const cursorOnMapSeries})', 'g_nextMapCyclePosition\t galileo.sma': 'g_nextMapCyclePosition', "GET_MAP_NAME_LEFT(2) \tgalileo.sma - define: { str_token( %2,                   %3, MAX_MAPNAME_LENGHT - 1, __g_getMapNameRightToken, MAX_MAPNAME_LENGHT - 1, ' ' ); }": 'GET_MAP_NAME_LEFT(${1:param1}, ${2:param2})', 'TD_NO_HOURS_MINS_SECS_VOICE \tgalileo.sma - const: 8': 'TD_NO_HOURS_MINS_SECS_VOICE', 'sayCurrentMap(0) \tgalileo.sma - public': 'sayCurrentMap()', 'getLastEmptyCycleMap(1) \tgalileo.sma - stock': 'getLastEmptyCycleMap(${1:lastEmptyCycleMap[ MAX_MAPNAME_LENGHT ]})', 'ANNOUNCE_CHOICE_PLAYERS \tgalileo.sma - define: 1': 'ANNOUNCE_CHOICE_PLAYERS', 'setGameToFinishAtHalfTime(0) \tgalileo.sma - public': 'setGameToFinishAtHalfTime()', 'nominationAttemptWithNamePart(2) \tgalileo.sma - stock': 'nominationAttemptWithNamePart(${1:player_id}, ${2:startSearchIndex = 0})', 'cacheCvarsValuesIgnored(0) \tgalileo.sma - stock': 'cacheCvarsValuesIgnored()', 'displayVoteMapMenuCommands(1) \tgalileo.sma - public': 'displayVoteMapMenuCommands(${1:player_id})', 'handleDisplayVoteMapCommands(3) \tgalileo.sma - public': 'handleDisplayVoteMapCommands(${1:player_id}, ${2:menu}, ${3:item})', 'HUD_VOTE_VISUAL_COUNTDOWN \tgalileo.sma - define: 2': 'HUD_VOTE_VISUAL_COUNTDOWN', 'g_isMapExtensionPeriodRunning\t galileo.sma': 'g_isMapExtensionPeriodRunning', 'IS_TO_ALLOW_A_CRASH_SEARCH(1) \tgalileo.sma - define: ( file_exists( modeFlagFilePath ) && !( DEBUG_LEVEL & DEBUG_LEVEL_FAKE_VOTES ) )': 'IS_TO_ALLOW_A_CRASH_SEARCH(${1:param1})', 'setLastEmptyCycleMap(1) \tgalileo.sma - stock': 'setLastEmptyCycleMap(${1:lastEmptyCycleMap[ MAX_MAPNAME_LENGHT ]})', 'cvar_isToReplaceByVoteMenu\t galileo.sma': 'cvar_isToReplaceByVoteMenu', 'handleOneMapAtFirstPosition(3) \tgalileo.sma - stock': 'handleOneMapAtFirstPosition(${1:firstPlaceChoices[]}, ${2:secondPlaceChoices[]}, ${3:numberOfMapsAtSecondPosition})', 'g_isPlayerVoted\t galileo.sma': 'g_isPlayerVoted', 'cvar_voteMapChoiceNext\t galileo.sma': 'cvar_voteMapChoiceNext', 'toShowTheMapExtensionHud(4) \tgalileo.sma - stock': 'toShowTheMapExtensionHud(${1:const lang1[]}, ${2:const lang2[]}, ${3:const lang3[]}, ${4:extend_step})', 'SaveRoundEnding_LastRound \tgalileo.sma - enum': 'SaveRoundEnding_LastRound', 'g_arrayOfRunOffChoices\t galileo.sma': 'g_arrayOfRunOffChoices', 'setCorrectMenuPage(4) \tgalileo.sma - stock': 'setCorrectMenuPage(${1:player_id}, ${2:pageString[]}, ${3:menuPages[]}, ${4:pagesCount})', 'TASKID_BLOCK_NEW_VOTING_START \tgalileo.sma - enum': 'TASKID_BLOCK_NEW_VOTING_START', 'cleanTheUnitTestsData(0) \tgalileo.sma - stock': 'cleanTheUnitTestsData()', 'MAX_SERVER_RESTART_ACCEPTABLE \tgalileo.sma - define: 1': 'MAX_SERVER_RESTART_ACCEPTABLE', 'debugIsToLoadNextWhiteListGroup(4) \tgalileo.sma - stock': 'debugIsToLoadNextWhiteListGroup(${1:currentHour}, ${2:startHour}, ${3:endHour}, ${4:isToLoadTheseMaps})', 'displayTheVoteMapActionMenu(0) \tgalileo.sma - public': 'displayTheVoteMapActionMenu()', 'sayTimeLeft(1) \tgalileo.sma - public': 'sayTimeLeft(${1:id})', 'IS_DISABLED_VOTEMAP_RUNOFF \tgalileo.sma - define: 4': 'IS_DISABLED_VOTEMAP_RUNOFF', 'destroy_two_dimensional_array(2) \tgalileo.sma - stock': 'destroy_two_dimensional_array(${1:Array:outerArray}, ${2:bool:isToDestroyTheOuterArray = true})', 'map_getNext(4) \tgalileo.sma - stock': 'map_getNext(${1:Array:mapArray}, ${2:const currentMap[]}, ${3:nextMapName[]}, ${4:const caller[]})', 'GameEndingType_ByFragLimit \tgalileo.sma - enum': 'GameEndingType_ByFragLimit', 'test_resetRoundsScores_loader(4) \tgalileo.sma - stock': 'test_resetRoundsScores_loader(${1:defaultCvarValue}, ${2:elapsedValue}, ${3:defaultLimiterValue}, ${4:aimResult})', 'g_test_whiteListFilePath\t galileo.sma': 'g_test_whiteListFilePath', 'test_isMapExtensionAvowed_case2(1) \tgalileo.sma - public': 'test_isMapExtensionAvowed_case2(${1:s})', 'g_votingMapNames\t galileo.sma': 'g_votingMapNames', 'unnominatedDisconnectedPlayer(1) \tgalileo.sma - stock': 'unnominatedDisconnectedPlayer(${1:player_id})', 'show_last_round_message(0) \tgalileo.sma - public': 'show_last_round_message()', 'map_populateListOnSeries(3) \tgalileo.sma - stock': 'map_populateListOnSeries(${1:Array:mapArray}, ${2:Trie:mapTrie}, ${3:mapFilePath[]})', 'g_isToCreateGameCrashFlag\t galileo.sma': 'g_isToCreateGameCrashFlag', 'timeRemain(0) \tgalileo.sma - public': 'timeRemain()', 'show_my_nominated_maps(2) \tgalileo.sma - stock': 'show_my_nominated_maps(${1:player_id}, ${2:maxPlayerNominations})', 'test_populateListOnSeries_build(5) \tgalileo.sma - stock': 'test_populateListOnSeries_build(${1:s}, ${2:Array:populatedArray}, ${3:Trie:populatedTrie}, ${4:expectedSize}, ${5:bool:isFull})', 'IS_DISABLED_VOTEMAP_EXTENSION \tgalileo.sma - define: 8': 'IS_DISABLED_VOTEMAP_EXTENSION', 'IS_RUNOFF_VOTE \tgalileo.sma - define: 4': 'IS_RUNOFF_VOTE', 'loadMapFileListTrie(3) \tgalileo.sma - stock': 'loadMapFileListTrie(${1:mapFileDescriptor}, ${2:Trie:fillerMapTrie}, ${3:Trie:duplicatedMaps})', 'REMOVE_LETTER_COLOR_TAGS(1) \tgalileo.sma - define: { replace_all( %1, MAX_COLOR_MESSAGE - 1, "!g", "" ); replace_all( %1, MAX_COLOR_MESSAGE - 1, "!t", "" ); replace_all( %1, MAX_COLOR_MESSAGE - 1, "!n", "" ); replace_all( %1, MAX_COLOR_MESSAGE - 1, "!y", "" ); }': 'REMOVE_LETTER_COLOR_TAGS(${1:param1})', 'flushVoteBlockedMaps(3) \tgalileo.sma - stock': 'flushVoteBlockedMaps(${1:blockedMapsBuffer[]}, ${2:flushAnnouncement[]}, ${3:&announcementShowedTimes})', 'LOG(1) \tgalileo.sma - define: debugMesssageLogger( %1 );': 'LOG(${1:param1})', 'create_fakeVotes(0) \tgalileo.sma - public': 'create_fakeVotes()', 'isToHandleRecentlyEmptyServer(0) \tgalileo.sma - stock': 'isToHandleRecentlyEmptyServer()', 'g_currentMapName\t galileo.sma': 'g_currentMapName', 'g_isEndGameLimitsChanged\t galileo.sma': 'g_isEndGameLimitsChanged', 'IS_MAP_VALID_BSP(1) \tgalileo.sma - define: ( is_map_valid( %1 ) || is_map_valid_bsp_check( %1 ) )': 'IS_MAP_VALID_BSP(${1:param1})', 'SET_TEST_FAILURE(1) \tgalileo.sma - define: { if( setTestFailure( %1 ) ) { LOG( 1, "    ( SET_TEST_FAILURE ) Just returning/blocking." ) return; } }': 'SET_TEST_FAILURE(${1:param1})', 'CANNOT_START_VOTE_SPECTATORS\t galileo.sma': 'CANNOT_START_VOTE_SPECTATORS', 'cvar_endOnRound\t galileo.sma': 'cvar_endOnRound', 'test_GET_MAP_INFO_load(0) \tgalileo.sma - stock': 'test_GET_MAP_INFO_load()', 'print_is_white_list_out_block(0) \tgalileo.sma - stock': 'print_is_white_list_out_block()', 'vote_rock(1) \tgalileo.sma - public': 'vote_rock(${1:player_id})', 'tryToRunAnAlternateSeries(4) \tgalileo.sma - stock': 'tryToRunAnAlternateSeries(${1:Array:mapcycleFileListArray}, ${2:currentMapName[]}, ${3:defaultNextMapName[]}, ${4:&defaultNextMapCyclePosition})', 'try_to_manage_map_end(1) \tgalileo.sma - stock': 'try_to_manage_map_end(${1:bool:isFragLimitEnd = false})', 'announceCellString(2) \tgalileo.sma - stock': 'announceCellString(${1:cellStringAnnounce[]}, ${2:cellStringsBuffer[]})', 'percent(2) \tgalileo.sma - stock': 'percent(${1:is}, ${2:of})', 'cvar_nomCleaning\t galileo.sma': 'cvar_nomCleaning', 'g_winLimitNumber\t galileo.sma': 'g_winLimitNumber', 'IS_COLORED_CHAT_ENABLED(1) \tgalileo.sma - define: ( g_isColorChatSupported && g_isColoredChatEnabled )': 'IS_COLORED_CHAT_ENABLED(${1:param1})', 'nomination_toggle(2) \tgalileo.sma - stock': 'nomination_toggle(${1:player_id}, ${2:mapIndex})', 'announceThePendingVoteTime(1) \tgalileo.sma - stock': 'announceThePendingVoteTime(${1:Float:time})', 'configureVoteDisplayDebugging(0) \tgalileo.sma - stock': 'configureVoteDisplayDebugging()', 'g_isRunOffNeedingKeepCurrentMap\t galileo.sma': 'g_isRunOffNeedingKeepCurrentMap', 'IS_TO_LOAD_ALTERNATE_MAP_SERIES \tgalileo.sma - define: 8': 'IS_TO_LOAD_ALTERNATE_MAP_SERIES', 'fromDigitsRepresentation(2) \tgalileo.sma - stock': 'fromDigitsRepresentation(${1:Array:digits}, ${2:origin_base})', 'delete_users_menus(1) \tgalileo.sma - stock': 'delete_users_menus(${1:bool:isToDoubleReset = false})', 'test_whitelistMinPlayers\t galileo.sma': 'test_whitelistMinPlayers', 'is_to_block_map_nomination(2) \tgalileo.sma - stock': 'is_to_block_map_nomination(${1:player_id}, ${2:mapName[]})', 'PLUGIN_AUTHOR\t galileo.sma': 'PLUGIN_AUTHOR', 'g_isServerShuttingDown\t galileo.sma': 'g_isServerShuttingDown', 'setupLoadWhiteListParams(3) \tgalileo.sma - stock': 'setupLoadWhiteListParams(${1:bool:isWhiteListBlockOut}, ${2:&Trie:listTrie}, ${3:&Array:listArray})', 'g_isTimeToResetRounds\t galileo.sma': 'g_isTimeToResetRounds', 'cvar_voteShowNoneOptionType\t galileo.sma': 'cvar_voteShowNoneOptionType', 'COLOR_GREY\t galileo.sma': 'COLOR_GREY', 'RUNOFF_EXTEND \tgalileo.sma - define: 2': 'RUNOFF_EXTEND', 'IS_MAP_MAPCHANGE_DROP_WEAPONS \tgalileo.sma - define: 2': 'IS_MAP_MAPCHANGE_DROP_WEAPONS', 'handleServerStart(2) \tgalileo.sma - public': 'handleServerStart(${1:backupMapsFilePath[]}, ${2:startAction})', 'g_midMaxMapsPerGroupToUseArray\t galileo.sma': 'g_midMaxMapsPerGroupToUseArray', 'test_GET_MAP_NAME(4) \tgalileo.sma - stock': 'test_GET_MAP_NAME(${1:Array:populatedArray}, ${2:index}, ${3:mapNameExpected[]}, ${4:mapInfoExpected[]})', 'processLoadedGroupMapFileFrom(4) \tgalileo.sma - stock': 'processLoadedGroupMapFileFrom(${1:Array:playerFillerMapsArray}, ${2:Array:fillersFilePathsArray}, ${3:Trie:minPlayerFillerMapGroupTrie=Invalid_Trie}, ${4:bool:isToClearTheTrie=true})', 'VOTE_START_ROUNDS \tgalileo.sma - define: ( IS_THE_ROUND_AVERAGE_TIME_TOO_SHORT() ? 10 : ( IS_THE_ROUND_AVERAGE_TIME_SHORT() ? 7 : 4 ) )': 'VOTE_START_ROUNDS', 'GameEndingType_ByNothing \tgalileo.sma - enum': 'GameEndingType_ByNothing', 'cvar_voteMinPlayersMapFilePath\t galileo.sma': 'cvar_voteMinPlayersMapFilePath', 'test_loadVoteChoices_serie_d(0) \tgalileo.sma - stock': 'test_loadVoteChoices_serie_d()', 'test_mp_winlimit\t galileo.sma': 'test_mp_winlimit', 'DEBUG_LEVEL \tgalileo.sma - define: 0': 'DEBUG_LEVEL', 'displayEndOfTheMapVoteMenu(1) \tgalileo.sma - public': 'displayEndOfTheMapVoteMenu(${1:player_id})', 'howManySecondsLastMapTheVoting(1) \tgalileo.sma - stock': 'howManySecondsLastMapTheVoting(${1:bool:isToIncludeRunoff = true})', 'test_resetRoundsScores_cases(0) \tgalileo.sma - stock': 'test_resetRoundsScores_cases()', 'team_win_event(0) \tgalileo.sma - public': 'team_win_event()', 'IS_VOTE_OVER \tgalileo.sma - define: 8': 'IS_VOTE_OVER', 'CLIENT_AUTHORIZED_MACRO(1) \tgalileo.sma - define: { LOG( 128, "I AM ENTERING ON client_authorized(1) player_id: %d", %1 ) restartEmptyCycle(); if( get_user_flags( %1 ) & ADMIN_MAP ) { g_rtvWaitAdminNumber++; } }': 'CLIENT_AUTHORIZED_MACRO(${1:param1})', 'map_restoreEndGameCvars(0) \tgalileo.sma - public': 'map_restoreEndGameCvars()', 'cmd_startVote(3) \tgalileo.sma - public': 'cmd_startVote(${1:player_id}, ${2:level}, ${3:cid})', 'g_extendmapStepMinutes\t galileo.sma': 'g_extendmapStepMinutes', 'map_announceNomination(2) \tgalileo.sma - stock': 'map_announceNomination(${1:player_id}, ${2:map[]})', 'g_rockedVote\t galileo.sma': 'g_rockedVote', 'fillersFilePaths_MininumPlayers \tgalileo.sma - enum': 'fillersFilePaths_MininumPlayers', 'SOUND_COUNTDOWN \tgalileo.sma - define: 2': 'SOUND_COUNTDOWN', 'g_isColoredChatEnabled\t galileo.sma': 'g_isColoredChatEnabled', 'g_nominationPlayersMenuPages\t galileo.sma': 'g_nominationPlayersMenuPages', 'g_nominatedMapsArray\t galileo.sma': 'g_nominatedMapsArray', 'test_voteMinPlayersMapFilePath\t galileo.sma': 'test_voteMinPlayersMapFilePath', 'clientDisconnected(1) \tgalileo.sma - stock': 'clientDisconnected(${1:player_id})', 'intermission_hold(0) \tgalileo.sma - public': 'intermission_hold()', 'VOTE_TIME_COUNT \tgalileo.sma - define: 5.5': 'VOTE_TIME_COUNT', 'cvar_extendmapAllowStayType\t galileo.sma': 'cvar_extendmapAllowStayType', 'MAX_FILE_PATH_LENGHT \tgalileo.sma - define: 128': 'MAX_FILE_PATH_LENGHT', 'cvar_hudsHide\t galileo.sma': 'cvar_hudsHide', 'END_OF_MAP_VOTE_ANNOUNCE1 \tgalileo.sma - define: 2': 'END_OF_MAP_VOTE_ANNOUNCE1', 'tryToMoveTheMapCycleCursor(4) \tgalileo.sma - stock': 'tryToMoveTheMapCycleCursor(${1:Array:mapcycleFileListArray}, ${2:defaultNextMapSeries}, ${3:const defaultNextMapNameClean[]}, ${4:&defaultNextMapCyclePosition})', 'saveRoundEnding(1) \tgalileo.sma - stock': 'saveRoundEnding(${1:bool:roundEndStatus[ SaveRoundEnding ]})', 'cvar_mp_timelimit\t galileo.sma': 'cvar_mp_timelimit', 'cvar_extendmapAllowStay\t galileo.sma': 'cvar_extendmapAllowStay', 'CHOOSE_MAP_MENU_NAME\t galileo.sma': 'CHOOSE_MAP_MENU_NAME', 'inicializeEmptyCycleFeature(0) \tgalileo.sma - public': 'inicializeEmptyCycleFeature()', 'SortCustomSynced2D(3) \tgalileo.sma - stock': 'SortCustomSynced2D(${1:array[][]}, ${2:arraySync[][]}, ${3:arraySize})', 'start_voting_by_timer(0) \tgalileo.sma - public': 'start_voting_by_timer()', 'cmd_listrecent_handler(3) \tgalileo.sma - public': 'cmd_listrecent_handler(${1:player_id}, ${2:menu}, ${3:item})', 'cmd_nominations(1) \tgalileo.sma - public': 'cmd_nominations(${1:player_id})', 'loadTheNextMapFile(3) \tgalileo.sma - stock': 'loadTheNextMapFile(${1:mapcycleFilePath[]}, ${2:&Array:mapcycleFileListArray}, ${3:&Trie:mapcycleFileListTrie})', 'cvar_runoffRatio\t galileo.sma': 'cvar_runoffRatio', 'showRemainingTimeUntilVoting(0) \tgalileo.sma - stock': 'showRemainingTimeUntilVoting()', 'addMenuMoreBackExitOptions(6) \tgalileo.sma - stock': 'addMenuMoreBackExitOptions(${1:menu}, ${2:player_id}, ${3:menuGeneralItem[]}, ${4:bool:isToEnableMoreButton}, ${5:bool:isToEnableBackButton}, ${6:itemsCount})', 'cvar_voteMinPlayers\t galileo.sma': 'cvar_voteMinPlayers', 'helper_loadNominations(1) \tgalileo.sma - stock': 'helper_loadNominations(${1:...})', 'changeMap(0) \tgalileo.sma - public': 'changeMap()', 'SaveRoundEnding_PenultRound \tgalileo.sma - enum': 'SaveRoundEnding_PenultRound', 'computeMapVotingCount(4) \tgalileo.sma - stock': 'computeMapVotingCount(${1:mapVotingCount[]}, ${2:mapVotingCountLength}, ${3:voteIndex}, ${4:bool:isToAddResults = true})', 'getMapNameIndex(1) \tgalileo.sma - stock': 'getMapNameIndex(${1:mapName[]})', 'g_test_aimedPlayersNumber\t galileo.sma': 'g_test_aimedPlayersNumber', 'toAnnounceTheMapExtension(1) \tgalileo.sma - stock': 'toAnnounceTheMapExtension(${1:const lang[]})', 'setThisMapAsPossibleCrashingMap(1) \tgalileo.sma - stock': 'setThisMapAsPossibleCrashingMap(${1:const mapName[]})', 'announceThePendingVote(0) \tgalileo.sma - public': 'announceThePendingVote()', 'g_LastTime\t galileo.sma': 'g_LastTime', 'display_menu_dirt(5) \tgalileo.sma - stock': 'display_menu_dirt(${1:player_id}, ${2:menuKeys}, ${3:bool:isVoteOver}, ${4:bool:noneIsHidden}, ${5:voteStatus[]})', 'g_test_failureNumber\t galileo.sma': 'g_test_failureNumber', 'map_change(0) \tgalileo.sma - public': 'map_change()', 'g_recentMapsMenuPages\t galileo.sma': 'g_recentMapsMenuPages', 'cancel_player_vote(1) \tgalileo.sma - stock': 'cancel_player_vote(${1:player_id})', 'cmd_HL1_votemap(1) \tgalileo.sma - public': 'cmd_HL1_votemap(${1:player_id})', 'isPlayerAbleToSeeTheVoteMenu(1) \tgalileo.sma - stock': 'isPlayerAbleToSeeTheVoteMenu(${1:player_id})', 'GameEndingType_ByWinLimit \tgalileo.sma - enum': 'GameEndingType_ByWinLimit', 'g_maxVotingChoices\t galileo.sma': 'g_maxVotingChoices', 'game_commencing_event(0) \tgalileo.sma - public': 'game_commencing_event()', 'cvar_serverFraglimitRestart\t galileo.sma': 'cvar_serverFraglimitRestart', 'voteExpire(0) \tgalileo.sma - public': 'voteExpire()', 'startTheRunoffVoting(0) \tgalileo.sma - public': 'startTheRunoffVoting()', 'chooseTheEndOfMapStartOption(1) \tgalileo.sma - stock': 'chooseTheEndOfMapStartOption(${1:roundsRemaining})', 'test_populateListOnSeries_loada(2) \tgalileo.sma - stock': 'test_populateListOnSeries_loada(${1:s}, ${2:bool:is=false})', 'nomination_clearAll(0) \tgalileo.sma - stock': 'nomination_clearAll()', 'test_g_currentMapName\t galileo.sma': 'test_g_currentMapName', 'map_extend(1) \tgalileo.sma - stock': 'map_extend(${1:const lang[]})', 'g_isToShowExpCountdown\t galileo.sma': 'g_isToShowExpCountdown', 'IS_TO_IGNORE_SPECTATORS(1) \tgalileo.sma - define: ( g_isColorChatSupported && get_pcvar_num( cvar_serverPlayersCount ) )': 'IS_TO_IGNORE_SPECTATORS(${1:param1})', 'g_minPlayerFillerMapGroupTrie\t galileo.sma': 'g_minPlayerFillerMapGroupTrie', 'g_isTimeToResetGame\t galileo.sma': 'g_isTimeToResetGame', 'cvar_endOfMapVoteExpiration\t galileo.sma': 'cvar_endOfMapVoteExpiration', 'DEBUGGER_OUTPUT_LOG_FILE_NAME\t galileo.sma': 'DEBUGGER_OUTPUT_LOG_FILE_NAME', 'TASKID_PROCESS_LAST_ROUND \tgalileo.sma - enum': 'TASKID_PROCESS_LAST_ROUND', 'REMOVE_CODE_COLOR_TAGS(1) \tgalileo.sma - define: { replace_all( %1, MAX_COLOR_MESSAGE - 1, "^4", "" ); replace_all( %1, MAX_COLOR_MESSAGE - 1, "^3", "" ); replace_all( %1, MAX_COLOR_MESSAGE - 1, "^2", "" ); replace_all( %1, MAX_COLOR_MESSAGE - 1, "^1", "" ); }': 'REMOVE_CODE_COLOR_TAGS(${1:param1})', 'cvar_emptyServerWaitMinutes\t galileo.sma': 'cvar_emptyServerWaitMinutes', 'SET_VOTING_TIME_TO(2) \tgalileo.sma - define: { if( ( %1 = get_pcvar_num( %2 ) ) < 5 ) { %1 = INFINITY_VOTING_TIME_VALUE; } }': 'SET_VOTING_TIME_TO(${1:param1}, ${2:param2})', 'MAX_MENU_ITEMS_PER_PAGE \tgalileo.sma - define: 8': 'MAX_MENU_ITEMS_PER_PAGE', 'cvar_endOnRoundMax\t galileo.sma': 'cvar_endOnRoundMax', 'round_start_event(0) \tgalileo.sma - public': 'round_start_event()', 'TASKID_VOTE_DISPLAY \tgalileo.sma - enum': 'TASKID_VOTE_DISPLAY', 'map_isInMenu(1) \tgalileo.sma - stock': 'map_isInMenu(${1:map[]})', 'isPrefixInMenu(1) \tgalileo.sma - stock': 'isPrefixInMenu(${1:map[]})', 'cvar_recentMapsBannedNumber\t galileo.sma': 'cvar_recentMapsBannedNumber', 'TASKID_PREVENT_INFITY_GAME \tgalileo.sma - enum': 'TASKID_PREVENT_INFITY_GAME', 'printIntegerArray(4) \tgalileo.sma - stock': 'printIntegerArray(${1:level}, ${2:integerArray[]}, ${3:arrayName[]}, ${4:integerArraySize})', 'cvar_whitelistMinPlayers\t galileo.sma': 'cvar_whitelistMinPlayers', 'computeVoteMenuFooter(3) \tgalileo.sma - stock': 'computeVoteMenuFooter(${1:player_id}, ${2:voteFooter[]}, ${3:voteFooterSize})', 'str_break \tgalileo.sma - define: argbreak': 'str_break', 'TO_STOP_THE_CRASH_SEARCH\t galileo.sma': 'TO_STOP_THE_CRASH_SEARCH', 'TASKID_DELETE_USERS_MENUS \tgalileo.sma - enum': 'TASKID_DELETE_USERS_MENUS', 'g_originalFragLimit\t galileo.sma': 'g_originalFragLimit', 'cvar_extendmapStepRounds\t galileo.sma': 'cvar_extendmapStepRounds', 'configureVotingStart(1) \tgalileo.sma - stock': 'configureVotingStart(${1:bool:is_forced_voting})', 'cvar_successfullLevels\t galileo.sma': 'cvar_successfullLevels', 'MapNomination_NominatedIndex \tgalileo.sma - enum': 'MapNomination_NominatedIndex', 'finalizeVoting(0) \tgalileo.sma - stock': 'finalizeVoting()', 'updateNominationsForwardSearch(3) \tgalileo.sma - stock': 'updateNominationsForwardSearch(${1:player_id}, ${2:nominationIndex}, ${3:mapIndex})', 'printRunOffMaps(1) \tgalileo.sma - stock': 'printRunOffMaps(${1:runOffMapsCount})', 'performRunoffExtending(0) \tgalileo.sma - stock': 'performRunoffExtending()', 'vote_addFillers(2) \tgalileo.sma - stock': 'vote_addFillers(${1:blockedMapsBuffer[]}, ${2:&announcementShowedTimes = 0})', 'cmd_changeLevel(3) \tgalileo.sma - public': 'cmd_changeLevel(${1:player_id}, ${2:level}, ${3:cid})', 'g_test_maxDelayResult\t galileo.sma': 'g_test_maxDelayResult', 'configureServerMapChange(1) \tgalileo.sma - stock': 'configureServerMapChange(${1:emptyCycleFilePath[]})', 'showGalVoteMapHelp(3) \tgalileo.sma - stock': 'showGalVoteMapHelp(${1:player_id}, ${2:index = 0}, ${3:argument[] = {0}})', 'g_norMaxMapsPerGroupToUseArray\t galileo.sma': 'g_norMaxMapsPerGroupToUseArray', 'g_isExtendmapAllowStay\t galileo.sma': 'g_isExtendmapAllowStay', 'standardizeTheHoursForWhitelist(3) \tgalileo.sma - stock': 'standardizeTheHoursForWhitelist(${1:&currentHour}, ${2:&startHour}, ${3:&endHour})', 'blockNewVotingToStart(0) \tgalileo.sma - stock': 'blockNewVotingToStart()', 'MAP_CYCLE_LOAD_FLAG\t galileo.sma': 'MAP_CYCLE_LOAD_FLAG', 'test_populateListOnSeries_load(0) \tgalileo.sma - stock': 'test_populateListOnSeries_load()', 'changeMapIntermission(0) \tgalileo.sma - public': 'changeMapIntermission()', 'g_totalCtWins\t galileo.sma': 'g_totalCtWins', 'g_mapPrefixes\t galileo.sma': 'g_mapPrefixes', 'test_colorChatLimits(1) \tgalileo.sma - stock': 'test_colorChatLimits(${1:player_id})', 'test_isWhiteListNomBlock\t galileo.sma': 'test_isWhiteListNomBlock', 'test_whatGameEndingTypeIt(16) \tgalileo.sma - stock': 'test_whatGameEndingTypeIt(${1:cvarW=0}, ${2:win=0}, ${3:cts=0}, ${4:trs=0}, ${5:cvarM=0}, ${6:max=0}, ${7:played=0}, ${8:cvarT=0}, ${9:Float:time=0.0}, ${10:Float:limit=0.0}, ${11:cvarF=0}, ${12:frag=0}, ${13:frags=0}, ${14:mean=0}, ${15:saved=0}, ${16:GameEndingType:result})', 'DEBUG_LEVEL_FAKE_VOTES \tgalileo.sma - define: 8': 'DEBUG_LEVEL_FAKE_VOTES', 'displayVoteMapMenu(1) \tgalileo.sma - stock': 'displayVoteMapMenu(${1:player_id})', 'test_endOfMapVoting_case6(1) \tgalileo.sma - public': 'test_endOfMapVoting_case6(${1:s})', 'start_voting_by_maxrounds(0) \tgalileo.sma - public': 'start_voting_by_maxrounds()', 'nextmapPluginInit(0) \tgalileo.sma - public': 'nextmapPluginInit()', 'debugIsTimeToStartTheEndOfMap(2) \tgalileo.sma - stock': 'debugIsTimeToStartTheEndOfMap(${1:secondsRemaining}, ${2:debugLevel})', 'g_isPlayerParticipating\t galileo.sma': 'g_isPlayerParticipating', 'approveTheVotingStart(1) \tgalileo.sma - stock': 'approveTheVotingStart(${1:bool:is_forced_voting})', 'cvar_banRecentStyle\t galileo.sma': 'cvar_banRecentStyle', 'cvar_voteWeightFlags\t galileo.sma': 'cvar_voteWeightFlags', 'IS_DISABLED_VOTEMAP_INTRO \tgalileo.sma - define: 2': 'IS_DISABLED_VOTEMAP_INTRO', 'cvar_isEmptyCycleByMapChange\t galileo.sma': 'cvar_isEmptyCycleByMapChange', 'g_rtvWaitRounds\t galileo.sma': 'g_rtvWaitRounds', 'cvar_coloredChatPrefix\t galileo.sma': 'cvar_coloredChatPrefix', 'g_totalVoteTime\t galileo.sma': 'g_totalVoteTime', 'delete_user_menu(1) \tgalileo.sma - stock': 'delete_user_menu(${1:player_id})', 'MAP_FOLDER_LOAD_FLAG\t galileo.sma': 'MAP_FOLDER_LOAD_FLAG', 'configure_last_round_HUD(0) \tgalileo.sma - public': 'configure_last_round_HUD()', 'CURRENT_AND_NEXTMAP_FILE_NAME\t galileo.sma': 'CURRENT_AND_NEXTMAP_FILE_NAME', 'isThereNextMapOnTheSerie(3) \tgalileo.sma - stock': 'isThereNextMapOnTheSerie(${1:&currentSerie}, ${2:const mapNameClean[]}, ${3:nextMapName[]})', 'test_functionNameExample_case(1) \tgalileo.sma - stock': 'test_functionNameExample_case(${1:expected})', 'tryToShowTheVotingMenu(0) \tgalileo.sma - public': 'tryToShowTheVotingMenu()', 'restoreServerCvarsFromTesting(0) \tgalileo.sma - stock': 'restoreServerCvarsFromTesting()', 'PLUGIN_NAME\t galileo.sma': 'PLUGIN_NAME', 'g_playerVotedOption\t galileo.sma': 'g_playerVotedOption', 'map_manageEnd(0) \tgalileo.sma - public': 'map_manageEnd()', 'test_isWhiteListBlockOut\t galileo.sma': 'test_isWhiteListBlockOut', 'g_pendingVoteCountdown\t galileo.sma': 'g_pendingVoteCountdown', 'show_intermission(1) \tgalileo.sma - stock': 'show_intermission(${1:Float:mp_chattime})', 'loadTheDefaultVotingChoices(0) \tgalileo.sma - stock': 'loadTheDefaultVotingChoices()', 'nomination_menuHook(1) \tgalileo.sma - public': 'nomination_menuHook(${1:player_id})', 'loadRunOffVoteChoices(0) \tgalileo.sma - stock': 'loadRunOffVoteChoices()', 'g_extendmapStepRounds\t galileo.sma': 'g_extendmapStepRounds', 'SECONDS_BY_ROUND_AVERAGE \tgalileo.sma - define: 70': 'SECONDS_BY_ROUND_AVERAGE', 'SHOW_STATUS_AFTER_VOTE \tgalileo.sma - define: 1': 'SHOW_STATUS_AFTER_VOTE', 'IS_THE_ROUND_AVERAGE_TIME_TOO_SHORT(1) \tgalileo.sma - define: ( g_totalRoundsSavedTimes > MAX_SAVED_ROUNDS_FOR_AVERAGE - 2 && g_roundAverageTime < g_totalVoteTime / 2 )': 'IS_THE_ROUND_AVERAGE_TIME_TOO_SHORT(${1:param1})', 'GET_LAST_PAGE_NUMBER(2) \tgalileo.sma - define: ( ( ( %1 + 1 ) / %2 ) + ( ( ( ( %1 + 1 ) % %2 ) > 0 ) ? 1 : 0 ) );': 'GET_LAST_PAGE_NUMBER(${1:param1}, ${2:param2})', 'g_isMapExtensionAllowed\t galileo.sma': 'g_isMapExtensionAllowed', 'loadMapFileListArray(3) \tgalileo.sma - stock': 'loadMapFileListArray(${1:mapFileDescriptor}, ${2:Array:mapArray}, ${3:Trie:duplicatedMaps})', 'TASKID_VOTE_HANDLEDISPLAY \tgalileo.sma - enum': 'TASKID_VOTE_HANDLEDISPLAY', 'g_test_voteMapFilePath\t galileo.sma': 'g_test_voteMapFilePath', 'pendingVoteCountdown(0) \tgalileo.sma - public': 'pendingVoteCountdown()', 'cvar_rtvWaitAdmin\t galileo.sma': 'cvar_rtvWaitAdmin', 'IS_DISABLED_VOTEMAP_EXIT \tgalileo.sma - define: 1': 'IS_DISABLED_VOTEMAP_EXIT', 'test_endOfMapVotingStart_case3(1) \tgalileo.sma - public': 'test_endOfMapVotingStart_case3(${1:s})', 'saveCurrentAndNextMapNames(3) \tgalileo.sma - stock': 'saveCurrentAndNextMapNames(${1:const currentMapName[]}, ${2:const nextMapName[]}, ${3:bool:forceUpdateFile = false})', 'g_pendingMapVoteCountdown\t galileo.sma': 'g_pendingMapVoteCountdown', 'SOUND_RUNOFF_REQUIRED \tgalileo.sma - define: 8': 'SOUND_RUNOFF_REQUIRED', 'periodicTimeLeftHandleChecking(1) \tgalileo.sma - stock': 'periodicTimeLeftHandleChecking(${1:secondsLeft})', 'IS_TO_RTV_WAIT_ADMIN \tgalileo.sma - define: 1': 'IS_TO_RTV_WAIT_ADMIN', 'debugTeamWinEvent(3) \tgalileo.sma - stock': 'debugTeamWinEvent(${1:string_team_winner[]}, ${2:wins_CT_trigger}, ${3:wins_Terrorist_trigger})', 'cvar_mp_freezetime\t galileo.sma': 'cvar_mp_freezetime', 'test_populateListOnSeries(6) \tgalileo.sma - stock': 'test_populateListOnSeries(${1:s}, ${2:Array:populatedArray}, ${3:expectedIndexes[]}, ${4:mapName[]}, ${5:bool:isNotToBe}, ${6:isFull})', 'setNextMap(4) \tgalileo.sma - stock': 'setNextMap(${1:currentMapName[]}, ${2:nextMapName[]}, ${3:bool:isToUpdateTheCvar = true}, ${4:bool:forceUpdateFile = false})', 'computeTheTestElapsedTime(0) \tgalileo.sma - stock': 'computeTheTestElapsedTime()', 'toPrintTheVotingMenuForAnalysis(0) \tgalileo.sma - stock': 'toPrintTheVotingMenuForAnalysis()', 'g_menuMapIndexForPlayerArrays\t galileo.sma': 'g_menuMapIndexForPlayerArrays', 'loadMapFileListComplete(4) \tgalileo.sma - stock': 'loadMapFileListComplete(${1:mapFileDescriptor}, ${2:Array:mapArray}, ${3:Trie:fillerMapTrie}, ${4:Trie:duplicatedMaps})', 'is_to_block_RTV(1) \tgalileo.sma - stock': 'is_to_block_RTV(${1:player_id})', 'SWITCH_ENDING_GAME_TYPE_RETURN(10) \tgalileo.sma - define: { gameType = switchEndingGameType( %0, %1, %2, %3, %4, %5, %6, %7, %8, %9 ); if( gameType != GameEndingType_ByNothing ) { LOG( 1, "    ( SWITCH_ENDING_GAME_TYPE_RETURN ) Returning GameEndingType: %d", gameType ) return gameType; } }': 'SWITCH_ENDING_GAME_TYPE_RETURN(${1:param1}, ${2:param2}, ${3:param3}, ${4:param4}, ${5:param5}, ${6:param6}, ${7:param7}, ${8:param8}, ${9:param9}, ${10:param10})', 'IS_ENABLED_VOTEMAP_NOMINATIONS \tgalileo.sma - define: 16': 'IS_ENABLED_VOTEMAP_NOMINATIONS', 'saveCurrentTestsTimeStamp(0) \tgalileo.sma - stock': 'saveCurrentTestsTimeStamp()', 'removeMapFromTheVotingMenu(1) \tgalileo.sma - stock': 'removeMapFromTheVotingMenu(${1:mapName[]})', 'flushCellStrings(1) \tgalileo.sma - stock': 'flushCellStrings(${1:cellStringsBuffer[]})', 'configureNextEmptyCycleMap(0) \tgalileo.sma - stock': 'configureNextEmptyCycleMap()', 'IS_IT_A_VALID_MAP_LINE(1) \tgalileo.sma - define: ( %1[ 0 ] && %1[ 1 ] != \';\' && !equal( %1, "//", 2 ) )': 'IS_IT_A_VALID_MAP_LINE(${1:param1})', 'test_getUniqueRandomBasic_load(0) \tgalileo.sma - stock': 'test_getUniqueRandomBasic_load()', 'test_populateListOnSeries_loadb(2) \tgalileo.sma - stock': 'test_populateListOnSeries_loadb(${1:s}, ${2:bool:is=false})', 'LAST_ROUND_HUD_SHOW_INTERVAL \tgalileo.sma - define: 30': 'LAST_ROUND_HUD_SHOW_INTERVAL', 'g_minMaxMapsPerGroupToUseArray\t galileo.sma': 'g_minMaxMapsPerGroupToUseArray', 'DEBUG_LEVEL_NORMAL \tgalileo.sma - define: 1': 'DEBUG_LEVEL_NORMAL', 'ROUND_VOTING_START_SECONDS_DELAY(1) \tgalileo.sma - define: ( get_pcvar_num( cvar_mp_freezetime ) + PERIODIC_CHECKING_INTERVAL - ( get_pcvar_num( cvar_isToAskForEndOfTheMapVote ) & END_OF_MAP_VOTE_ANNOUNCE1 ? 5 : 0 ) + ( g_roundAverageTime > 2 * g_totalVoteTime / 3 ? g_totalVoteTime / 5 : 1 ) )': 'ROUND_VOTING_START_SECONDS_DELAY(${1:param1})', 'test_amx_nextmap\t galileo.sma': 'test_amx_nextmap', 'computeNextWhiteListLoadTime(2) \tgalileo.sma - stock': 'computeNextWhiteListLoadTime(${1:seconds}, ${2:bool:isSecondsLeft = true})', 'g_test_isToEnableLogging\t galileo.sma': 'g_test_isToEnableLogging', 'MAX_BIG_BOSS_STRING \tgalileo.sma - define: 512': 'MAX_BIG_BOSS_STRING', 'IS_THE_ROUND_TIME_TOO_BIG(1) \tgalileo.sma - define: ( ( %1 > 8.0 && g_roundAverageTime > 300 ) || %1 < 0.5 )': 'IS_THE_ROUND_TIME_TOO_BIG(${1:param1})', 'resetRoundsScores(0) \tgalileo.sma - public': 'resetRoundsScores()', 'cvar_mp_maxrounds\t galileo.sma': 'cvar_mp_maxrounds', 'VOTE_TIME_RUNOFF \tgalileo.sma - define: 3.0': 'VOTE_TIME_RUNOFF', 'MAX_INTEGER \tgalileo.sma - define: 2147483647': 'MAX_INTEGER', 'SERVER_START_RANDOMMAP \tgalileo.sma - define: 4': 'SERVER_START_RANDOMMAP', 'TASKID_SHOW_LAST_ROUND_MESSAGE \tgalileo.sma - enum': 'TASKID_SHOW_LAST_ROUND_MESSAGE', 'nomination_handleMatchChoice(3) \tgalileo.sma - public': 'nomination_handleMatchChoice(${1:player_id}, ${2:menu}, ${3:item})', 'round_end_event(0) \tgalileo.sma - public': 'round_end_event()', 'test_loadVoteChoices_serie_a(0) \tgalileo.sma - stock': 'test_loadVoteChoices_serie_a()', 'cancelVoting(1) \tgalileo.sma - stock': 'cancelVoting(${1:bool:isToDoubleReset = false})', 'new_round_event(0) \tgalileo.sma - public': 'new_round_event()', 'g_test_testsNumber\t galileo.sma': 'g_test_testsNumber', 'test_nominateAndUnnominate(4) \tgalileo.sma - stock': 'test_nominateAndUnnominate(${1:player_id}, ${2:map_index}, ${3:total_Nom}, ${4:action})', 'toShowTheMapNextHud(4) \tgalileo.sma - stock': 'toShowTheMapNextHud(${1:const lang1[]}, ${2:const lang2[]}, ${3:const lang3[]}, ${4:map[]})', 'test_handleServerStart(0) \tgalileo.sma - stock': 'test_handleServerStart()', 'HELPER_MAP_FILE_LIST_LOAD(1) \tgalileo.sma - define: helper_mapFileListLoadReplace( false, %1 );': 'HELPER_MAP_FILE_LIST_LOAD(${1:param1})', 'vote_resetStats(0) \tgalileo.sma - public': 'vote_resetStats()', 'cvar_isToShowExpCountdown\t galileo.sma': 'cvar_isToShowExpCountdown', 'g_timeLimitNumber\t galileo.sma': 'g_timeLimitNumber', 'whiteListHourlySet(8) \tgalileo.sma - stock': 'whiteListHourlySet(${1:trigger}, ${2:currentLine[]}, ${3:startHourString[]}, ${4:endHourString[]}, ${5:&isBlackList}, ${6:&currentHour}, ${7:&startHour}, ${8:&endHour})', 'toDigitsRepresentation(2) \tgalileo.sma - stock': 'toDigitsRepresentation(${1:origin_number}, ${2:origin_base})', 'printDynamicArrayCells(1) \tgalileo.sma - stock': 'printDynamicArrayCells(${1:Array:array})', 'g_norPlayerFillerMapGroupArrays\t galileo.sma': 'g_norPlayerFillerMapGroupArrays', 'TASKID_FINISH_GAME_TIME_BY_HALF \tgalileo.sma - enum': 'TASKID_FINISH_GAME_TIME_BY_HALF', 'convertWhitelistToBlacklist(2) \tgalileo.sma - stock': 'convertWhitelistToBlacklist(${1:&startHour}, ${2:&endHour})', 'g_isToShowNoneOption\t galileo.sma': 'g_isToShowNoneOption', 'g_mapPrefixCount\t galileo.sma': 'g_mapPrefixCount', 'map_isTooRecent(1) \tgalileo.sma - stock': 'map_isTooRecent(${1:map[]})', 'VOTEMAP_VOTING_MAP_NAMES_INDEX_FLAG \tgalileo.sma - define: -2': 'VOTEMAP_VOTING_MAP_NAMES_INDEX_FLAG', 'MAP_CHANGES_AT_THE_CURRENT_ROUND_END \tgalileo.sma - define: 1': 'MAP_CHANGES_AT_THE_CURRENT_ROUND_END', 'loadWhiteListFile(5) \tgalileo.sma - stock': 'loadWhiteListFile(${1:currentHour}, ${2:&Trie:listTrie}, ${3:Array:whitelistFileArray}, ${4:bool:isBlackList}, ${5:&Array:listArray = Invalid_Array})', 'VOTE_TIME_SEC \tgalileo.sma - define: 1.0': 'VOTE_TIME_SEC', 'reshowTheVoteMenu(1) \tgalileo.sma - stock': 'reshowTheVoteMenu(${1:player_id})', 'IS_WHITELIST_BLOCKING(2) \tgalileo.sma - define: ( %1 && ( ( g_blacklistTrie && TrieKeyExists( g_blacklistTrie, %2 ) ) || ( g_whitelistTrie && !TrieKeyExists( g_whitelistTrie, %2 ) ) ) )': 'IS_WHITELIST_BLOCKING(${1:param1}, ${2:param2})', 'SaveRoundEnding_WhileVoting \tgalileo.sma - enum': 'SaveRoundEnding_WhileVoting', 'configureSpecificGameModFeature(0) \tgalileo.sma - stock': 'configureSpecificGameModFeature()', 'startTheVoting(1) \tgalileo.sma - stock': 'startTheVoting(${1:bool:is_forced_voting})', 'g_isTheLastGameRound\t galileo.sma': 'g_isTheLastGameRound', 'g_isEmptyCycleMapConfigured\t galileo.sma': 'g_isEmptyCycleMapConfigured', 'GET_MAP_INFO(3) \tgalileo.sma - define: { ArrayGetString( %1, %2, __g_getMapNameInputLine, MAX_MAPNAME_LENGHT - 1 ); GET_MAP_INFO_RIGHT( __g_getMapNameInputLine, %3 ) }': 'GET_MAP_INFO(${1:param1}, ${2:param2}, ${3:param3})', 'DESTROY_PLAYER_NEW_MENU_TYPE(1) \tgalileo.sma - define: { LOG( 128, "I AM ENTERING ON DESTROY_PLAYER_NEW_MENU_TYPE(1) menu_id: %d", %1 ) if( %1 ) { menu_destroy( %1 ); %1 = 0; } }': 'DESTROY_PLAYER_NEW_MENU_TYPE(${1:param1})', 'runTheServerMapCrashSearch(0) \tgalileo.sma - stock': 'runTheServerMapCrashSearch()', 'test_configureTheNextMap_loade(1) \tgalileo.sma - stock': 'test_configureTheNextMap_loade(${1:s})', 'tryToSetGameModCvarString(2) \tgalileo.sma - stock': 'tryToSetGameModCvarString(${1:cvarPointer}, ${2:string[]})', 'cvar_endOnRoundRtv\t galileo.sma': 'cvar_endOnRoundRtv', 'test_serverFraglimitRestart\t galileo.sma': 'test_serverFraglimitRestart', 'configureTheUnitTests(0) \tgalileo.sma - stock': 'configureTheUnitTests()', 'endRoundWatchdog(0) \tgalileo.sma - stock': 'endRoundWatchdog()', 'resetRoundEnding(0) \tgalileo.sma - stock': 'resetRoundEnding()', 'IS_TO_START_THE_VOTE_BY_FRAGS(1) \tgalileo.sma - define: ( %1 < ( g_fragLimitNumber > 30 ? 20 : 12 ) )': 'IS_TO_START_THE_VOTE_BY_FRAGS(${1:param1})', 'vote_manageEnd(0) \tgalileo.sma - public': 'vote_manageEnd()', 'g_nextMapName\t galileo.sma': 'g_nextMapName', 'test_strictValidMapsTrie_load(0) \tgalileo.sma - stock': 'test_strictValidMapsTrie_load()', 'g_isTheLastGameRoundContext\t galileo.sma': 'g_isTheLastGameRoundContext', 'cvar_unnominateDisconnected\t galileo.sma': 'cvar_unnominateDisconnected', 'g_test_areTheUnitTestsRunning\t galileo.sma': 'g_test_areTheUnitTestsRunning', 'saveTheRoundTime(0) \tgalileo.sma - stock': 'saveTheRoundTime()', 'sayNextMap(0) \tgalileo.sma - public': 'sayNextMap()', 'test_voteMapFilePath\t galileo.sma': 'test_voteMapFilePath', 'str_break \tgalileo.sma - define: strbreak': 'str_break', 'PLUGIN_VERSION\t galileo.sma': 'PLUGIN_VERSION', 'handleTwoMapsAtFirstPosition(1) \tgalileo.sma - stock': 'handleTwoMapsAtFirstPosition(${1:firstPlaceChoices[]})', 'g_isOnMaintenanceMode\t galileo.sma': 'g_isOnMaintenanceMode', 'configureTheMapcycleSystem(3) \tgalileo.sma - stock': 'configureTheMapcycleSystem(${1:mapToChange[]}, ${2:possibleNextMap[]}, ${3:possibleNextMapPosition})', 'test_endOfMapVoting(0) \tgalileo.sma - stock': 'test_endOfMapVoting()', 'cvar_mp_roundtime\t galileo.sma': 'cvar_mp_roundtime', 'g_originalChatTime\t galileo.sma': 'g_originalChatTime', 'ARE_THERE_ENOUGH_PLAYERS_FOR_MANAGE_END(1) \tgalileo.sma - define: ( get_real_players_number() >= get_pcvar_num( cvar_endOnRoundMininum ) )': 'ARE_THERE_ENOUGH_PLAYERS_FOR_MANAGE_END(${1:param1})', 'configureTheNextMapPlugin(4) \tgalileo.sma - stock': 'configureTheNextMapPlugin(${1:possibleCurrentMap[]}, ${2:possibleNextMap[]}, ${3:possibleNextMapPosition}, ${4:bool:forceUpdateFile = false})', 'HUD_VOTE_RESULTS_ANNOUNCE \tgalileo.sma - define: 8': 'HUD_VOTE_RESULTS_ANNOUNCE', 'vote_getRocksNeeded(0) \tgalileo.sma - stock': 'vote_getRocksNeeded()', 'sayTheTime(1) \tgalileo.sma - public': 'sayTheTime(${1:id})', 'sayFFStatus(0) \tgalileo.sma - public': 'sayFFStatus()', 'cvar_serverMaxroundsRestart\t galileo.sma': 'cvar_serverMaxroundsRestart', 'loadMapFileSeriesListArray(5) \tgalileo.sma - stock': 'loadMapFileSeriesListArray(${1:mapFileDescriptor}, ${2:Array:mapArray}, ${3:Trie:mapTrie}, ${4:Trie:loadedMapSeriesTrie}, ${5:const cursorOnMapSeries})', 'cacheCvarsValues(1) \tgalileo.sma - stock': 'cacheCvarsValues(${1:ignoreUnregistred=false})', 'configureServerStart(0) \tgalileo.sma - stock': 'configureServerStart()', 'round_restart_event(0) \tgalileo.sma - public': 'round_restart_event()', 'TASKID_DBG_FAKEVOTES \tgalileo.sma - enum': 'TASKID_DBG_FAKEVOTES', 'processLoadedMapsFile(3) \tgalileo.sma - stock': 'processLoadedMapsFile(${1:FillersFilePathType:fillersFilePathEnum}, ${2:blockedMapsBuffer[]}, ${3:&announcementShowedTimes})', 'MapNomination_PlayerId \tgalileo.sma - enum': 'MapNomination_PlayerId', 'whatGameEndingTypeItIs(0) \tgalileo.sma - stock': 'whatGameEndingTypeItIs()', 'cvar_mp_fraglimit\t galileo.sma': 'cvar_mp_fraglimit', 'cvar_serverPlayersCount\t galileo.sma': 'cvar_serverPlayersCount', 'DO_NOT_ALPHABETIZE_VOTEMAP_MENU \tgalileo.sma - define: 4': 'DO_NOT_ALPHABETIZE_VOTEMAP_MENU', 'startEmptyCycleSystem(0) \tgalileo.sma - public': 'startEmptyCycleSystem()', 'cvar_emptyMapFilePath\t galileo.sma': 'cvar_emptyMapFilePath', 'str_token \tgalileo.sma - define: strtok2': 'str_token', 'RTV_CMD_DYNAMIC \tgalileo.sma - define: 4': 'RTV_CMD_DYNAMIC', 'PRINT_COLORED_MESSAGE(2) \tgalileo.sma - define: { message_begin( MSG_ONE_UNRELIABLE, g_user_msgid, _, %1 ); write_byte( %1 ); write_string( %2 ); message_end(); }': 'PRINT_COLORED_MESSAGE(${1:param1}, ${2:param2})', 'nomination_announceCancellation(1) \tgalileo.sma - stock': 'nomination_announceCancellation(${1:nominations[]})', 'g_test_nomMapFilePath\t galileo.sma': 'g_test_nomMapFilePath', 'g_isColorChatSupported\t galileo.sma': 'g_isColorChatSupported', 'cvar_rtvReminder\t galileo.sma': 'cvar_rtvReminder', 'IS_VOTE_IN_PROGRESS \tgalileo.sma - define: 1': 'IS_VOTE_IN_PROGRESS', 'test_endOfMapVoteStart\t galileo.sma': 'test_endOfMapVoteStart', 'MAX_PLAYER_NAME_LENGHT \tgalileo.sma - define: 48': 'MAX_PLAYER_NAME_LENGHT', 'sayRoundsLeft(1) \tgalileo.sma - stock': 'sayRoundsLeft(${1:id})', 'getPlayerNominationMapIndex(2) \tgalileo.sma - stock': 'getPlayerNominationMapIndex(${1:player_id}, ${2:nominationIndex})', 'g_nominationLoadedMapsArray\t galileo.sma': 'g_nominationLoadedMapsArray', 'SOUND_MAPCHANGE \tgalileo.sma - define: 16': 'SOUND_MAPCHANGE', 'map_loadRecentBanList(1) \tgalileo.sma - public': 'map_loadRecentBanList(${1:maximumLoadMapsCount})', 'addMenuMoreBackOptions(6) \tgalileo.sma - stock': 'addMenuMoreBackOptions(${1:menu}, ${2:player_id}, ${3:menuOptionString[]}, ${4:bool:isToEnableMoreButton}, ${5:bool:isToEnableBackButton}, ${6:itemsCount})', 'test_serverMoveCursor\t galileo.sma': 'test_serverMoveCursor', 'is_there_game_commencing(0) \tgalileo.sma - stock': 'is_there_game_commencing()', 'g_minPlayerFillerMapGroupArrays\t galileo.sma': 'g_minPlayerFillerMapGroupArrays', 'test_voteDuration\t galileo.sma': 'test_voteDuration', 'SET_MENU_LANG_STRING_PROPERTY(3) \tgalileo.sma - define: { formatex( menuOptionString, charsmax( menuOptionString ), "%L", player_id, %3 ); menu_setprop( %2, %1, menuOptionString ); }': 'SET_MENU_LANG_STRING_PROPERTY(${1:param1}, ${2:param2}, ${3:param3})', 'IS_MAP_MAPCHANGE_FREEZE_PLAYERS \tgalileo.sma - define: 4': 'IS_MAP_MAPCHANGE_FREEZE_PLAYERS', 'cvar_mapcyclefile\t galileo.sma': 'cvar_mapcyclefile', 'setDisplaying(0) \tgalileo.sma - public': 'setDisplaying()', 'g_voteStatus\t galileo.sma': 'g_voteStatus', 'HUD_TIMELEFT_ANNOUNCE \tgalileo.sma - define: 16': 'HUD_TIMELEFT_ANNOUNCE', 'test_populateListOnSeries_loadc(2) \tgalileo.sma - stock': 'test_populateListOnSeries_loadc(${1:s}, ${2:bool:is=false})', 'g_gameEndingTypeContextSaved\t galileo.sma': 'g_gameEndingTypeContextSaved', 'convert_octal_to_decimal(1) \tgalileo.sma - stock': 'convert_octal_to_decimal(${1:octal_number})', 'cvar_gal_mapcyclefile\t galileo.sma': 'cvar_gal_mapcyclefile', 'cvar_disabledValuePointer\t galileo.sma': 'cvar_disabledValuePointer', 'g_isToShowSubMenu\t galileo.sma': 'g_isToShowSubMenu', 'g_nominationLoadedMapsTrie\t galileo.sma': 'g_nominationLoadedMapsTrie', 'vote_manageEarlyStart(0) \tgalileo.sma - stock': 'vote_manageEarlyStart()', 'MAX_NOM_MENU_ITEMS_PER_PAGE \tgalileo.sma - define: 7': 'MAX_NOM_MENU_ITEMS_PER_PAGE', 'VOTE_TIME_HUD1 \tgalileo.sma - define: 7.0': 'VOTE_TIME_HUD1', 'test_extendMapMaximum\t galileo.sma': 'test_extendMapMaximum', 'cvar_endOnRoundChange\t galileo.sma': 'cvar_endOnRoundChange', 'switchEndingGameType(10) \tgalileo.sma - stock': 'switchEndingGameType(${1:by_maxrounds}, ${2:cv_maxrounds}, ${3:by_time}, ${4:cv_time}, ${5:by_winlimit}, ${6:cv_winlimit}, ${7:by_frags}, ${8:cv_frags}, ${9:GameEndingType:type}, ${10:bool:allowSelfReturn})', 'test_announceVoteBlockedMap_a(0) \tgalileo.sma - stock': 'test_announceVoteBlockedMap_a()', 'VOTE_TIME_ANNOUNCE2 \tgalileo.sma - define: 5.0': 'VOTE_TIME_ANNOUNCE2', 'showPlayersVoteResult(0) \tgalileo.sma - stock': 'showPlayersVoteResult()', 'printNominationList(2) \tgalileo.sma - stock': 'printNominationList(${1:mapsList[]}, ${2:isFlushed=false})', 'cvar_rtvWaitRounds\t galileo.sma': 'cvar_rtvWaitRounds', 'srv_announceEarlyVote(1) \tgalileo.sma - public': 'srv_announceEarlyVote(${1:player_id})', 'RTV_CMD_STANDARD \tgalileo.sma - define: 1': 'RTV_CMD_STANDARD', 'g_voteShowNoneOptionType\t galileo.sma': 'g_voteShowNoneOptionType', 'cvar_voteUniquePrefixes\t galileo.sma': 'cvar_voteUniquePrefixes', 'sayHandlerForOneNomWords(2) \tgalileo.sma - stock': 'sayHandlerForOneNomWords(${1:player_id}, ${2:firstWord[]})', 'prevent_map_change(0) \tgalileo.sma - stock': 'prevent_map_change()', 'client_putinserver(1) \tgalileo.sma - public': 'client_putinserver(${1:player_id})', 'END_AT_THE_CURRENT_ROUND_END \tgalileo.sma - define: 1': 'END_AT_THE_CURRENT_ROUND_END', 'g_totalVotesCounted\t galileo.sma': 'g_totalVotesCounted', 'dalayedTestsToExecute(0) \tgalileo.sma - public': 'dalayedTestsToExecute()', 'cvar_gameCrashRecreationAction\t galileo.sma': 'cvar_gameCrashRecreationAction', 'g_midPlayerFillerMapGroupArrays\t galileo.sma': 'g_midPlayerFillerMapGroupArrays', 'CONVERT_NONE_OPTION_TO_CANCEL_LAST_VOTE \tgalileo.sma - define: 2': 'CONVERT_NONE_OPTION_TO_CANCEL_LAST_VOTE', 'g_playersKills\t galileo.sma': 'g_playersKills', 'test_mapGetNext_case(4) \tgalileo.sma - stock': 'test_mapGetNext_case(${1:Array:testMapListArray}, ${2:const currentMap[]}, ${3:const nextMapAim[]}, ${4:mapIndexAim})', 'test_SortCustomSynced2D(0) \tgalileo.sma - stock': 'test_SortCustomSynced2D()', 'IS_RTV_VOTE \tgalileo.sma - define: 64': 'IS_RTV_VOTE', 'map_loadPrefixList(1) \tgalileo.sma - public': 'map_loadPrefixList(${1:prefixesFilePath[]})', 'unblockNewVotingToStart(0) \tgalileo.sma - public': 'unblockNewVotingToStart()', 'g_nominationPartialNameAttempt\t galileo.sma': 'g_nominationPartialNameAttempt', 'start_voting_by_frags(0) \tgalileo.sma - public': 'start_voting_by_frags()', 'SHOW_STATUS_ALWAYS \tgalileo.sma - define: 3': 'SHOW_STATUS_ALWAYS', 'registerTheMapCycleCvar(0) \tgalileo.sma - stock': 'registerTheMapCycleCvar()', 'g_totalRoundsSavedTimes\t galileo.sma': 'g_totalRoundsSavedTimes', 'IS_THE_ROUND_AVERAGE_TIME_SHORT(1) \tgalileo.sma - define: ( g_totalRoundsSavedTimes > MIN_VOTE_START_ROUNDS_DELAY && g_roundAverageTime < g_totalVoteTime )': 'IS_THE_ROUND_AVERAGE_TIME_SHORT(${1:param1})', 'g_endVotingType\t galileo.sma': 'g_endVotingType', 'printTheCurrentAndNextMapNames(0) \tgalileo.sma - stock': 'printTheCurrentAndNextMapNames()', 'test_rtvRatio\t galileo.sma': 'test_rtvRatio', 'GameEndingType_ByMaxRounds \tgalileo.sma - enum': 'GameEndingType_ByMaxRounds', 'test_voteMapChoiceCount\t galileo.sma': 'test_voteMapChoiceCount', 'saveServerCvarsForTesting(0) \tgalileo.sma - stock': 'saveServerCvarsForTesting()', 'getRecentMapsAndWhiteList(3) \tgalileo.sma - stock': 'getRecentMapsAndWhiteList(${1:player_id}, ${2:&isRecentMapNomBlocked}, ${3:&isWhiteListNomBlock})', 'START_VOTEMAP_MAX_TIME \tgalileo.sma - define: ( g_totalVoteTime )': 'START_VOTEMAP_MAX_TIME', 'start_voting_by_winlimit(0) \tgalileo.sma - public': 'start_voting_by_winlimit()', 'findDispFormat(1) \tgalileo.sma - stock': 'findDispFormat(${1:_time})', 'test_endOfMapVotingStart_case4(1) \tgalileo.sma - public': 'test_endOfMapVotingStart_case4(${1:s})', 'ALWAYS_KEEP_SHOWING_NONE_OPTION \tgalileo.sma - define: 1': 'ALWAYS_KEEP_SHOWING_NONE_OPTION', 'GameEndingType_ByTimeLimit \tgalileo.sma - enum': 'GameEndingType_ByTimeLimit', 'TOGGLE_BIT_FLAG_ON_OFF(2) \tgalileo.sma - define: { LOG( 256, "I AM ENTERING ON TOGGLE_BIT_FLAG_ON_OFF(2) mask: %d, flag: %d", %1, %2 ) %1 & %2 ? ( %1 &= ~%2 ) : ( %1 |= %2 ); }': 'TOGGLE_BIT_FLAG_ON_OFF(${1:param1}, ${2:param2})', 'STATUS_TYPE_COUNT \tgalileo.sma - define: 1': 'STATUS_TYPE_COUNT', 'test_GET_MAP_NAME_load(0) \tgalileo.sma - stock': 'test_GET_MAP_NAME_load()', 'g_showLastRoundHudCounter\t galileo.sma': 'g_showLastRoundHudCounter', 'g_user_msgid\t galileo.sma': 'g_user_msgid', 'g_timeLimitContextSaved\t galileo.sma': 'g_timeLimitContextSaved', 'RTV_CMD_EXTENSION_WAIT_DISABLE \tgalileo.sma - define: 16': 'RTV_CMD_EXTENSION_WAIT_DISABLE', 'MIN_ROUND_TIME_DELAY \tgalileo.sma - define: 10': 'MIN_ROUND_TIME_DELAY', 'DEBUG_LEVEL_UNIT_TEST_DELAYED \tgalileo.sma - define: 4': 'DEBUG_LEVEL_UNIT_TEST_DELAYED', 'saveGameEndingTypeContext(0) \tgalileo.sma - stock': 'saveGameEndingTypeContext()', 'RTV_CMD_SHORTHAND \tgalileo.sma - define: 2': 'RTV_CMD_SHORTHAND', 'g_greatestKillerFrags\t galileo.sma': 'g_greatestKillerFrags'}
        , func_list )

